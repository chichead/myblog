[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "오렌지 맨숀🍊",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\nR고보면 쉬운 퀀트 분석 01 주식정보 불러오기\n\n\n\n\n\n\n2022/09/18\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 04 Ragg package\n\n\n\n\n\n\n2022/09/04\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR, Python, Julia 모두 Quarto로 모여라\n\n\n\n\n\n\n2022/08/27\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nRStudio가 갑자기 Posit으로 이름을 고치는 이유는 뭘까\n\n\n\n\n\n\n2022/08/21\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 03 palmerpenguins package\n\n\n\n\n\n\n2022/05/27\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\ngeofacet package로 대한민국 카토그램 만들기\n\n\n\n\n\n\n2022/03/20\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 02 ggbump package\n\n\n\n\n\n\n2022/02/20\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 01 tibble package\n\n\n\n\n\n\n2021/05/02\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "",
    "text": "프로그래밍 언어 그 자체를 가지고 명령어를 통해 작업을 하는 건 많이 어렵습니다. 불편하기도 하고요. 그럴 때 사용하는 게 바로 IDE(통합계발환경, Intergrated Development Environment)입니다. Python을 이용할 때 사용하는 PyCharm이나 Jupyter Notebook, 혹은 MS에서 나온 텍스트 에디터 VS Code가 대표적인 IDE라고 할 수 있을겁니다. R의 가장 대표 IDE는 RStudio입니다. 그런데 이 RStudio가 갑자기 이름을 바꾼다고 선언했습니다. 아마 8월 중으로 이름표를 새로 바꿀 것 같은데요, 새로운 이름은 Posit입니다."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "오렌지 맨숀",
    "section": "",
    "text": "귤 향 가득한, 오렌지 맨숀입니다."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "오렌지 맨숀🍊",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\nR고보면 쉬운 퀀트 분석 01 주식정보 불러오기\n\n\n\n\n\n\n2022/09/18\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 04 Ragg package\n\n\n\n\n\n\n2022/09/04\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR, Python, Julia 모두 Quarto로 모여라\n\n\n\n\n\n\n2022/08/27\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nRStudio가 갑자기 Posit으로 이름을 고치는 이유는 뭘까\n\n\n\n\n\n\n2022/08/21\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 03 palmerpenguins package\n\n\n\n\n\n\n2022/05/27\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\ngeofacet package로 대한민국 카토그램 만들기\n\n\n\n\n\n\n2022/03/20\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 02 ggbump package\n\n\n\n\n\n\n2022/02/20\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nR아두면 쓸데있는 패키지 이야기 01 tibble package\n\n\n\n\n\n\n2021/05/02\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/blog_post/post.html",
    "href": "posts/blog_post/post.html",
    "title": "더미 블로그 / This is a dummy blog posts",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n구독자 혹시 맬서스라는 이름 들어봤어? 윗글은 영국의 고전 경제학자 토마스 맬서스가 1798년 쓴 <인구론>의 일부야. 맬서스는 <인구론>을 통해 임금, 토지, 식량 등의 생존 자원은 1, 2, 3, 4… 이렇게 산술급수로 증가하지만 인구는 1, 2, 4, 8… 기하급수적으로 증가한다는 걸 지적했어.\n인구 증가 문제를 해결하지 않으면 사회적으로 큰 문제가 생길 것이라고 경고했지.\n맬서스의 경고가 가장 극심했던 시절은 1960년대야. 1968년 전 세계의 인구 증가율이 역대 최대치인 2.1%를 기록했고, “이대로 가다간 인구 폭발로 세계가 종말을 맞이하는 것 아니야”라는 불안한 목소리가 여기저기 나오기도 했어. 이 영향으로 만들어진 정책이 바로 산아제한 정책이야. “덮어놓고 낳다 보면 거지꼴을 못 면한다”는 구호로 진행된 우리나라를 포함해 일본, 중국 등 동아시아에서 산아제한 정책은 효과적이었어.\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n\n\nThis is inline code plus a small code chunk.\n\nlibrary(tidyverse)\n\nggplot(mpg) +\n  geom_jitter(aes(cty, hwy), size = 4, alpha = 0.5) \n\n\n\n\n\n\n\n\n\n\n\nTransforming OLS estimatesMaximizing likelihood\n\n\n\n\nCode\npreds_lm %>% \n  ggplot(aes(body_mass_g, bill_length_mm, col = correct)) +\n  geom_jitter(size = 4, alpha = 0.6) +\n  facet_wrap(vars(species)) +\n  scale_color_manual(values = c('grey60', thematic::okabe_ito(3)[3])) +\n  scale_x_continuous(breaks = seq(3000, 6000, 1000)) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = 'top', \n    panel.background = element_rect(color = 'black'),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = 'Body mass (in g)',\n    y = 'Bill length (in mm)'\n  )\n\n\n\n\n\n\n\n\n\nCode\nglm.mod <- glm(sex ~ body_mass_g + bill_length_mm + species, family = binomial, data = dat)\n\npreds <- dat %>% \n  mutate(\n    prob.fit = glm.mod$fitted.values,\n    prediction = if_else(prob.fit > 0.5, 'male', 'female'),\n    correct = if_else(sex == prediction, 'correct', 'incorrect')\n  )\n\n\npreds %>% \n  ggplot(aes(body_mass_g, bill_length_mm, col = correct)) +\n  geom_jitter(size = 4, alpha = 0.6) +\n  facet_wrap(vars(species)) +\n  scale_x_continuous(breaks = seq(3000, 6000, 1000)) +\n  scale_color_manual(values = c('grey60', thematic::okabe_ito(3)[3])) +\n  theme_minimal(base_size = 10) +\n  theme(\n    legend.position = 'top', \n    panel.background = element_rect(color = 'black'),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = 'Body mass (in g)',\n    y = 'Bill length (in mm)'\n  )\n\n\n\n\n\n\n\n\n\n\n\\[\n\\int_0^1 f(x) \\ dx\n\\]\n\n\n\n\n\n\n\n\ngeom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)\n\n\n\n\n\n\n\nggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?"
  },
  {
    "objectID": "posts/post-with-code/post-with-code.html",
    "href": "posts/post-with-code/post-with-code.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html#posit이-뭔데",
    "href": "posts/welcome/index.html#posit이-뭔데",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "Posit이 뭔데?",
    "text": "Posit이 뭔데?\nPosit을 사전에서 찾아보면 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다로 나옵니다. 토론 과정에서 아이디어를 제시하는 경우 posit이라는 단어를 쓰는 셈인거죠. RStudio(IDE 이름이 회사 이름이기도 합니다)에서는 posit이라는 단어가 데이터 분석가, 데이터 과학자들의 업무와 잘 어울린다는 판단을 했고, RStudio의 새로운 이름으로 Posit을 결정했다고 발표했습니다. 회사명도 Posit으로 바뀔 예정입니다."
  },
  {
    "objectID": "posts/welcome/index.html#rtudio가-이름을-바꾸는-이유는",
    "href": "posts/welcome/index.html#rtudio가-이름을-바꾸는-이유는",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "RTudio가 이름을 바꾸는 이유는?",
    "text": "RTudio가 이름을 바꾸는 이유는?\nR을\u001c\n\n바뀌는 이유 1. A broader focus\n\n“We want to make scientific communication better for everyone”\n\n\nRstudio는 이미 python을 지원하고 있음\n\n\nR 인터페이스로 python을 할 수 있는 reticulate 패키지도 있고\n\n\n하지만 python 이용자가 Rstudio를 이용하는 걸 본 적은 없음. 대부분 다 jupyter 쓰지\n\n\n혹은 VS code를 쓰지\n\n“That name has started to feel increasing constraining”\n\nRstudio라는 이름이 가지는 한계 / R만 개발할 수 있는 IDE\n\n\nR 이름 뗄 테니까 다른 언어(python, Julia 등)도 우리 개발환경으로 들어와라라고 유혹하는 것\n\n바뀌는 이유 2. A large community\n\n“We want to help more parts of science become as open, dynamic, inclusive, and diverse as the community we belong to”\n\n\n비교적 잘 운영되고 있는 R community\n\n\n하지만 python community와 비교했을 때 확장의 한계도 있다\n\n\n역시나 다른 커뮤니티와의 융합을 목적으로 둠\n\n\n그렇다고 R에서 python으로의 전환까지 이어지진 않을 것임\n\n\n해들리 위컴 왈\n“I’m not going to stop writing R code” “I’m not going to learn Python.”\n\n\n이와 궤를 같이하는 변화가 바로 Quarto\n\n\n차세대 Rmarkdown인 Quarto에서는 jupyter, VS code, Observable javascript를 기본적으로 실행할 수 있음\n\n2. Posit이 뭔데\n\nPosit의 실제 뜻 / 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다\n\n\n토론을 할 때 아이디어를 제시하는 경우 posit이라는 단어를 씀\n\n\n데이터 분석가, 과학자들의 업무와 잘 어울리는 단어 posit을 새로운 IDE의 이름으로 결정\n\n\n\n홈페이지는 8월 중으로 오픈 예정 https://posit.co/\n\n\nSpeaker notes (press ‘s’ when presenting to switch to speaker mode)."
  },
  {
    "objectID": "posts/welcome/index.html#rstudio가-이름을-바꾸는-이유는",
    "href": "posts/welcome/index.html#rstudio가-이름을-바꾸는-이유는",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "RStudio가 이름을 바꾸는 이유는?",
    "text": "RStudio가 이름을 바꾸는 이유는?\nR을\n\n바뀌는 이유 1. A broader focus\n\n“We want to make scientific communication better for everyone”\n\n\nRstudio는 이미 python을 지원하고 있음\n\n\nR 인터페이스로 python을 할 수 있는 reticulate 패키지도 있고\n\n\n하지만 python 이용자가 Rstudio를 이용하는 걸 본 적은 없음. 대부분 다 jupyter 쓰지\n\n\n혹은 VS code를 쓰지\n\n“That name has started to feel increasing constraining”\n\nRstudio라는 이름이 가지는 한계 / R만 개발할 수 있는 IDE\n\n\nR 이름 뗄 테니까 다른 언어(python, Julia 등)도 우리 개발환경으로 들어와라라고 유혹하는 것\n\n바뀌는 이유 2. A large community\n\n“We want to help more parts of science become as open, dynamic, inclusive, and diverse as the community we belong to”\n\n\n비교적 잘 운영되고 있는 R community\n\n\n하지만 python community와 비교했을 때 확장의 한계도 있다\n\n\n역시나 다른 커뮤니티와의 융합을 목적으로 둠\n\n\n그렇다고 R에서 python으로의 전환까지 이어지진 않을 것임\n\n\n해들리 위컴 왈\n“I’m not going to stop writing R code” “I’m not going to learn Python.”\n\n\n이와 궤를 같이하는 변화가 바로 Quarto\n\n\n차세대 Rmarkdown인 Quarto에서는 jupyter, VS code, Observable javascript를 기본적으로 실행할 수 있음\n\n2. Posit이 뭔데\n\nPosit의 실제 뜻 / 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다\n\n\n토론을 할 때 아이디어를 제시하는 경우 posit이라는 단어를 씀\n\n\n데이터 분석가, 과학자들의 업무와 잘 어울리는 단어 posit을 새로운 IDE의 이름으로 결정\n\n\n\n홈페이지는 8월 중으로 오픈 예정 https://posit.co/\n\n\nSpeaker notes (press ‘s’ when presenting to switch to speaker mode)."
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html",
    "href": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "",
    "text": "프로그래밍 언어 그 자체를 가지고 명령어를 통해 작업을 하는 건 많이 어렵습니다. 불편하기도 하고요. 그럴 때 사용하는 게 바로 IDE(통합계발환경, Intergrated Development Environment)입니다. Python을 이용할 때 사용하는 PyCharm이나 Jupyter Notebook, 혹은 MS의 텍스트 에디터 VS Code가 대표적인 IDE라고 할 수 있을겁니다.\nRStudio는 R의 가장 대표 IDE입니다. 그런데 이 RStudio가 지난 7월 말, 본인들의 이름을 바꾼다고 선언했습니다. 아마 8월 중으로 이름표를 새로 바꿀 것 같은데요, 그들이 공개한 RStudio의 새로운 이름은 Posit입니다. RStudio는 왜 갑자기 이름을 Posit으로 바꾸려는걸까요?"
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#posit이-뭔데",
    "href": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#posit이-뭔데",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "Posit이 뭔데?",
    "text": "Posit이 뭔데?\nPosit을 사전에서 찾아보면 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다로 나옵니다. 토론 과정에서 아이디어를 제시하는 경우 posit이라는 단어를 쓰는 셈인거죠. RStudio(IDE 이름이 회사 이름이기도 합니다)에서는 posit이라는 단어가 데이터 분석가, 데이터 과학자들의 업무와 잘 어울린다는 판단을 했고, RStudio의 새로운 이름으로 Posit을 결정했다고 발표했습니다. 회사명도 Posit으로 바뀔 예정입니다."
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#rstudio가-이름을-바꾸는-이유는",
    "href": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#rstudio가-이름을-바꾸는-이유는",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "RStudio가 이름을 바꾸는 이유는",
    "text": "RStudio가 이름을 바꾸는 이유는\n\n1. A Broader Focus\n\n“That name has started to feel increasing constraining.”\n\n데이터 관련 분석 프로그래밍, 혹은 데이터 사이언스에서 R은 항상 Python과 비교됩니다. 데이터 관련 공부를 시작하면서 R과 Python 사이의 양자택일은 쉽지 않은 고민이죠. 전반적인 흐름은 Python에게 웃어주고 있는 모양세입니다. 여기에 Julia까지 참전하면서 R의 입지는 점점 줄어들고 있습니다. R 이름을 딱 박고 있는 RStudio 입장에서 반길일이 아니죠.\nRStudio가 여지껏 가만히 있었던 건 아닙니다. RStudio는 이미 Python을 지원하고 있습니다. R 인터페이스로 Python을 할 수 있는 reticulate 패키지도 있고요. 하지만 Python 이용자가 RStudio를 이용하는 건 쉽지 않은 선택입니다. 이미 잘 갖춰진 Python 전용 IDE를 쓰지 뭣하러 RStudio를 씁니까. 아니면 호환성 좋은 VS code를 쓰면 되죠.\nRStudio의 수석과학자 해들리 위컴은 RStudio라는 이름이 가지는 한계를 인정했습니다. 누가봐도 RStudio는 R만 개발할 수 있는 IDE로 느껴집니다. 그래서 그들은 선택을 한 겁니다. 우리 프로그램에 R 이름 뗄 테니까, Python, Julia 등 다른 언어 쓰는 사람들도 우리 개발환경으로 들어오라고요.\n\n\n\n2. A Large Community\nR community는 RStudio를 중심으로 비교적 잘 운영되고 있습니다. 하지만 위에서 언급한것처럼 규모 측면이나 확장성 측면에서 한계도 명확하죠. RStudio는 이번 Posit으로의 개편을 통해 다른 커뮤니티와의 융합을 목적으로 두고 있습니다. 그렇다고 R에서 Python으로의 전환이 이뤄지진 않을 겁니다.\n\n“I’m not going to stop writing R code. I’m not going to learn Python.”\n\n해들리 위컴이 이렇게 밝힌 이상 Python으로의 거대한 전환은 없을 것 같네요. Posit으로의 변화에 발맞춰 또 다른 변화가 있으니 바로 Quarto입니다. 차세대 Rmarkdown인 Quarto에서는 Jupyter, VS code, Observable Javascript를 기본적으로 실행할 수 있다고 합니다. Quarto에 대해서는 다음 포스트를 통해 더 깊이 이야기를 해보도록 하겠습니다. 여튼 개편될 Posit은 아마 8월 이후에나 만나볼 수 있을 것 같습니다. 홈페이지는 8월 중으로 오픈 예정이라고 합니다."
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#section",
    "href": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#section",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "",
    "text": "R을 공부하는 제 입장에서 이번 RStudio의 변화는 반길일입니다."
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#posit의-뜻은",
    "href": "posts/220821_Rstudio-is-becoming-Posit/post_220821.html#posit의-뜻은",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "Posit의 뜻은",
    "text": "Posit의 뜻은\nPosit을 사전에서 찾아보면 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다로 나옵니다. 토론 과정에서 아이디어를 제시하는 경우 posit이라는 단어를 쓰는 셈인거죠. RStudio(IDE 이름이 회사 이름이기도 합니다)에서는 posit이라는 단어가 데이터 분석가, 데이터 과학자들의 업무와 잘 어울린다는 판단을 했고, RStudio의 새로운 이름으로 Posit을 결정했다고 발표했습니다. 회사명도 Posit으로 바뀔 예정입니다.\n조금 더 지켜봐야겠지만 R을 공부하는 제 입장에서 이번 RStudio의 변화는 반길만한 일입니다. 여러 언어 환경에 있는 사람들을 한 IDE에 모아둘 수 있다면 협업도 더 원활하게 이뤄질테니까요. 앞으로 발표될 Posit에 대한 정보는 꾸준히 정리해보겠습니다."
  },
  {
    "objectID": "posts/210502_tibble-package/index.html",
    "href": "posts/210502_tibble-package/index.html",
    "title": "data frame의 진화, tibble package",
    "section": "",
    "text": "tidyverse 패키지를 사용하면 data.frame 대신 사용하게되는 tibble. 오늘 알아볼 R package는 tibble입니다. tibble 패키지의 역사부터 기존의 data.frame과는 어떻게 다른지 정리해봅니다.\n\n\n2014년 1월, dplyr 패키지에선 data.frame을 tbl_df이라는 서브클래스로 사용했습니다. 이전의 data.frame과 다르게 출력된 결과가 콘솔창을 다 뒤덮지도 않고 칼럼명 아래에 자료형을 표현해주는 강점이 있었죠. 이 tbl_df가 지금의 tibble 패키지의 시초입니다. tbl_df를 [티블-디프]로 읽다가 뒤에 df는 떨어져나가고 tbl남 남아 결국엔 tibble이 되었죠. 참고로 패키지를 만든 해들리 위컴은 뉴질랜드 사람인데, 뉴질랜드인들이 table을 tibble이라고 발음한다고 합니다.\n\n\n위대한 패키지 tidyverse의 일원인만큼 tibble 로고의 뒷 배경은 tidyverse 세계관을 공유하고 있습니다. 우주 배경을 뒤에 두고 표가 그려져있죠. 그 위엔 TIBBLE 이라는 이름표가 적혀있고요. 폰트 스타일은 스타트랙을 닮았는데, 스타트랙에는 tibble과 유사한 tribble이라는 크리쳐가 등장합니다. tribble은 tibble 패키지의 함수로도 등장하는데 이건 뒤에서 설명 드리겠습니다. tibble 이름표를 잘 보면 TI33으로도 읽을 수 있는데 공학용 계산기로 유명한 텍사스 인스트루먼트(TI)에서 만든 동명의 모델이 있죠. (물론 의도한지는 모르겠지만요)"
  },
  {
    "objectID": "posts/210502_tibble-package/index.html#all-about-tibble",
    "href": "posts/210502_tibble-package/index.html#all-about-tibble",
    "title": "data frame의 진화, tibble package",
    "section": "All about tibble",
    "text": "All about tibble\nas.tibble\n아이리스(붓꽃) 데이터가 담겨있는 iris 데이터를 가지고 살펴보겠습니다. 총 150개의 로(row)와 5개의 칼럼(column)으로 이뤄진 데이터프레임(data.frame)입니다. 만일 코드에 그냥 iris라고 입력한다면 콘솔창에는 150개의 행을 보실 수 있을텐데요. 그걸 막기 위해 iris 데이터의 머릿부분만 불러오라는 함수 head( )를 써보았어요.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n이번엔 tibble 패키지를 이용해볼까요. 여기서 사용할 함수는 as_tibble( )입니다. 무언가를 tibble로 만들어주는 고마운 함수입니다. 새로운 iris tibble 녀석을 tbl_iris에 할당했습니다. 그리고 불러와봅시다. tibble은 그냥 tbl_iris라고 입력해도 콘솔창을 다 뒤덮지않는군요. 10개의 행을 보여주고는 나머지 140개가 남아있다고 깨알같이 설명해줍니다. 게다가 5개의 칼럼이 어떤 녀석인지 밑에다가 자료형을 설명해주고 있군요. 착한 녀석이죠. 혹여나 이러한 편의를 무시하고 모든 행을 다 보고 싶은 경우에는 옵션을 통해 바꿔줄 수 있습니다.\n\nlibrary(tibble)\n\ntbl_iris <- as_tibble(iris)\ntbl_iris\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# … with 140 more rows\n\n# 행이 n개를 넘어가면 m개만 출력하고 싶다면\n# options(tibble.print_max = n, tibble.print_min = m)\n\n# 모든 행을 다 보고 싶다면\n# option(tibble.print_max = Inf)\n\n# 콘솔창의 폭은 고려말고 모든 열을 다 보고 싶다면\n# option(tibble.width = Inf)\n\n\ntibble\n본격적으로 tibble을 만들어봅니다. tibble( )을 이용하면 후딱 tibble을 생성할 수 있답니다. tibble( ) 함수는 data.frame( ) 함수와는 다르게 변수의 이름을 바꾸지 않아요. 예를 들어볼게요. 오렌지 맨숀라는 칼럼에 숫자 1을 넣은 data.frame을 만들어볼거에요. 동일하게 tibble로도 만들어보고요.\n\n# 오렌지 맨숀이라는 이름의 칼럼을 가진 데이터를 만들어봅니다\n\nlibrary(tibble)\n\ndata.frame(`오렌지 맨숀` = 1)\n\n  오렌지.맨숀\n1           1\n\ntibble(`오렌지 맨숀` = 1)\n\n# A tibble: 1 × 1\n  `오렌지 맨숀`\n          <dbl>\n1             1\n\n\n칼럼 이름에 공백이 들어가게 되면 data.frame은 공백을 온점으로 바꿔줍니다. 오렌지 맨숀 대신 오렌지.맨숀이 되었죠? 반면 tibble은 변수의 이름을 바꾸지 않고 그대로 내비두죠. 이러한 tibble의 유연함은 공백말고 다른 비정상적인 문자도 칼럼 이름에 넣을 수 있게 했어요.\n\n# tibble은 비정상적 문자도 칼럼명에 넣을 수 있습니다\n# 물론 백틱(`)으로 묶어야 합니다\n\ntb <- tibble(\n  `:^)` = \"smile\", \n  ` ` = \"space\",\n  `2021` = \"number\"\n)\n\ntb\n\n# A tibble: 1 × 3\n  `:^)` ` `   `2021`\n  <chr> <chr> <chr> \n1 smile space number\n\n\n\ntribble\n\ntibble을 만들 수 있는 또다른 방법은 함수 tribble을 사용하는겁니다. 스타 트렉의 커크 함장에게 눈처럼 내리는 동물이 바로 트리블이랍니다. 트리블은 복실복실한 털과 귀여운 목소리 탓에 애완용으로 많이 키워졌는데 다만 한가지 주의해야할 부분은 바로 번식이랍니다. 한 번 번식을 시작하면 끝도 없이 증식해버려서 자칫하면 손을 쓸 수 없을지도 몰라요.\ntibble 패키지에 있는 tribble은 transposed tibble의 줄임말입니다. 단어 그대로 전치된 티블이라는 뜻이지요. 기존의 tibble 입력 형식이 colname = data 같은 가로형이었다면 tribble에서는 세로형으로 입력할 수 있지요. 간단하게 적은 양의 데이터를 코드로 입력할 때에는 tribble을 쓰면 편리합니다.\n\n# tribble 함수에서 칼럼명은 ~로 시작해야 합니다\n# 데이터 구분은 ,로 하고요\n\ntribble(\n  ~x, ~y, ~z,\n  \"a\", 21, \"2000\",\n  \"b\", 31, \"1990\"\n)\n\n# A tibble: 2 × 3\n  x         y z    \n  <chr> <dbl> <chr>\n1 a        21 2000 \n2 b        31 1990 \n\n\n\ntibble_row\ntibble을 만들 수 있는 또 다른 방법. tibble_row( )가 있어요. 기본적으로 data.frame과 tibble은 벡터들의 모음입니다. 여기서 잠깐, 벡터는 동일한 유형의 데이터가 여러개 묶여있는 형식을 뜻해요. 수치형 벡터도 있을 테고, 문자형 벡터도 있을 거고요, 논리형 벡터도 존재해요. 함수 등과 같이 특별한 타입의 데이터들은 벡터가 아니여요. class를 가지고 있는 일부 요소들은 벡터이기도 하고 아닌 녀석도 있죠.\ntibble_row 이야기를 하는데 갑자기 벡터 이야기를 해서 뜬금없다고 생각할 수 있지만 다 이유가 있답니다. 기존 함수들로는 벡터가 아닌 데이터(스칼라)를 tibble 안에 담을 수 없었어요. 하지만 tibble_row 함수와 함께라면 스칼라도 tibble 안에 넣을 수 있게 되죠. tibble_row 함수는 한 행(row)을 차지하는 데이터프레임을 구성해줍니다. 즉 한 열에 크기가 1인 녀석만 들어갈 수 있지만 그 대신 스칼라 데이터도 넣을 수 있게 된 거죠. 참고로 저장되는 스칼라는 list 형태로 포장됩니다.\n\n# vector가 아닌 scalar 데이터를 만들어봅니다\n# lm(linear model)과 time 데이터를 써 보겠습니다\n\nmodel <- lm(y ~ x, data.frame(x = 1:5, y = 3:7), model = FALSE)\ntime <- Sys.time()\n\ntibble(time)\n\n# A tibble: 1 × 1\n  time               \n  <dttm>             \n1 2022-10-03 17:41:53\n\n\nmodel의 경우 vector가 아니여서 tibble에 담기지 않아요. 반면 time 데이터는 들어갈 수 있어요. 하지만 tibble_row 함수를 사용한다면 어떨까요. tibble_row와 함께라면 vector와 scalar 상관없이 tibble에 담을 수 있습니다.\n\ntibble_row(model)\n\n# A tibble: 1 × 1\n  model \n  <list>\n1 <lm>"
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/index.html",
    "href": "posts/220821_Rstudio-is-becoming-Posit/index.html",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "",
    "text": "프로그래밍 언어 그 자체를 가지고 명령어를 통해 작업을 하는 건 많이 어렵습니다. 불편하기도 하고요. 그럴 때 사용하는 게 바로 IDE(통합계발환경, Intergrated Development Environment)입니다. Python을 이용할 때 사용하는 PyCharm이나 Jupyter Notebook, 혹은 MS의 텍스트 에디터 VS Code가 대표적인 IDE라고 할 수 있을겁니다.\nRStudio는 R의 가장 대표 IDE입니다. 그런데 이 RStudio가 지난 7월 말, 본인들의 이름을 바꾼다고 선언했습니다. 아마 8월 중으로 이름표를 새로 바꿀 것 같은데요, 그들이 공개한 RStudio의 새로운 이름은 Posit입니다. RStudio는 왜 갑자기 이름을 Posit으로 바꾸려는걸까요?"
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/index.html#rstudio가-이름을-바꾸는-이유는",
    "href": "posts/220821_Rstudio-is-becoming-Posit/index.html#rstudio가-이름을-바꾸는-이유는",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "RStudio가 이름을 바꾸는 이유는",
    "text": "RStudio가 이름을 바꾸는 이유는\n\n1. A Broader Focus\n\n“That name has started to feel increasing constraining.”\n\n데이터 관련 분석 프로그래밍, 혹은 데이터 사이언스에서 R은 항상 Python과 비교됩니다. 데이터 관련 공부를 시작하면서 R과 Python 사이의 양자택일은 쉽지 않은 고민이죠. 전반적인 흐름은 Python에게 웃어주고 있는 모양세입니다. 여기에 Julia까지 참전하면서 R의 입지는 점점 줄어들고 있습니다. R 이름을 딱 박고 있는 RStudio 입장에서 반길일이 아니죠.\nRStudio가 여지껏 가만히 있었던 건 아닙니다. RStudio는 이미 Python을 지원하고 있습니다. R 인터페이스로 Python을 할 수 있는 reticulate 패키지도 있고요. 하지만 Python 이용자가 RStudio를 이용하는 건 쉽지 않은 선택입니다. 이미 잘 갖춰진 Python 전용 IDE를 쓰지 뭣하러 RStudio를 씁니까. 아니면 호환성 좋은 VS code를 쓰면 되죠.\nRStudio의 수석과학자 해들리 위컴은 RStudio라는 이름이 가지는 한계를 인정했습니다. 누가봐도 RStudio는 R만 개발할 수 있는 IDE로 느껴집니다. 그래서 그들은 선택을 한 겁니다. 우리 프로그램에 R 이름 뗄 테니까, Python, Julia 등 다른 언어 쓰는 사람들도 우리 개발환경으로 들어오라고요.\n\n\n\n2. A Large Community\nR community는 RStudio를 중심으로 비교적 잘 운영되고 있습니다. 하지만 위에서 언급한것처럼 규모 측면이나 확장성 측면에서 한계도 명확하죠. RStudio는 이번 Posit으로의 개편을 통해 다른 커뮤니티와의 융합을 목적으로 두고 있습니다. 그렇다고 R에서 Python으로의 전환이 이뤄지진 않을 겁니다.\n\n“I’m not going to stop writing R code. I’m not going to learn Python.”\n\n해들리 위컴이 이렇게 밝힌 이상 Python으로의 거대한 전환은 없을 것 같네요. Posit으로의 변화에 발맞춰 또 다른 변화가 있으니 바로 Quarto입니다. 차세대 Rmarkdown인 Quarto에서는 Jupyter, VS code, Observable Javascript를 기본적으로 실행할 수 있다고 합니다. Quarto에 대해서는 다음 포스트를 통해 더 깊이 이야기를 해보도록 하겠습니다. 여튼 개편될 Posit은 아마 10월 이후에나 만나볼 수 있을 것 같습니다. 홈페이지는 10월 중으로 오픈 예정이라고 합니다."
  },
  {
    "objectID": "posts/220821_Rstudio-is-becoming-Posit/index.html#posit의-뜻은",
    "href": "posts/220821_Rstudio-is-becoming-Posit/index.html#posit의-뜻은",
    "title": "RStudio가 Posit으로 이름을 바꾼다",
    "section": "Posit의 뜻은",
    "text": "Posit의 뜻은\nPosit을 사전에서 찾아보면 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다로 나옵니다. 토론 과정에서 아이디어를 제시하는 경우 posit이라는 단어를 쓰는 셈인거죠. RStudio(IDE 이름이 회사 이름이기도 합니다)에서는 posit이라는 단어가 데이터 분석가, 데이터 과학자들의 업무와 잘 어울린다는 판단을 했고, RStudio의 새로운 이름으로 Posit을 결정했다고 발표했습니다. 회사명도 Posit으로 바뀔 예정입니다.\n조금 더 지켜봐야겠지만 R을 공부하는 제 입장에서 이번 RStudio의 변화는 반길만한 일입니다. 여러 언어 환경에 있는 사람들을 한 IDE에 모아둘 수 있다면 협업도 더 원활하게 이뤄질테니까요. 앞으로 발표될 Posit에 대한 정보는 꾸준히 정리해보겠습니다."
  },
  {
    "objectID": "posts/220220_ggbump-package/index.html",
    "href": "posts/220220_ggbump-package/index.html",
    "title": "bump chart를 그리고 싶을 때, ggbump package",
    "section": "",
    "text": "ggplot2는 grammar of graphics(a.k.a. gg)을 토대로 시각화를 만드는 패키지입니다. 2는 ver.2의 의미를 담았죠. gg는 릴랜드 윌킨스의 동명의 책 The Grammar of Graphics에서 따온 건데, 이 책에서 릴랜드는 데이터를 어떻게 시각적으로 표현할 것인지에 대해 다룹니다. gg에 대한 이야기는 나중에 다른 포스트에서 다루도록 하겠습니다.\nggplot2 패키지의 문법 기반 위에서 돌아가는 서브 패키지들은 보통 gg라는 접두사로 시작됩니다. ggbump 역시 ggplot2의 일원이라고 이해할 수 있어요. 그렇다면 bump는 무엇을 의미하는 걸까요? 자동차의 범퍼, 혹은 놀이동산의 범퍼카를 떠올리면 bump의 의미를 유추할 수 있어요. bump는 바로, 충돌을 의미합니다. 충돌과 차트, 어떤 연관이 있는 걸까요?\n\n\n\n\n2022 May Bumps, Corpus Christi College\n\n\n영국의 케임브리지 대학에는 The bump라고 불리는 조정 경기가 있습니다. 케임브리지를 가로지르는 캠 강(river Cam) 은 나란히 경주하기에는 너무 좁아서 한 줄로 경주하는 독특한 조정 경주를 진행해왔어요. 19세기 초부터 시작된 이 경기 이름이 바로 The bump입니다. The bump의 경주 방식은 이렇습니다. 우선 강을 따라 한 줄로 경기를 시작합니다. 각 선수들은 전속력으로 노를 저어 앞에 있는 보트를 따라잡고 충돌(bump)하죠. 그렇게 되면 앞에 있는 조정 팀을 추월한 것으로 인정, 순위가 올라가게 됩니다. 주최 측에서는 경기의 진행 상황을 매핑하는 차트를 그려서 제공했는데, 이 차트를 bump chart라고 불렀습니다. 아래 차트는 2020년 사순절에 치러진 대회(Lent Bump)의 남자부 경기 결과입니다. 어떤 차트인지 감이 오죠?\n\n\n\n\n로고에는 3개의 노드(점), 노드에 연결된 시그모이드 곡선이 보입니다. 시그모이드(Sigmoid) 곡선은 S자 모양의 부드러운 곡선을 의미합니다. Sigmoid라는 단어의 뜻이 S자 모양이거든요. 시그모이드 곡선은 로지스틱 방정식, 정규분포의 누적분포함수에서 확인할 수 있습니다. 아래 차트를 보면 정규분포의 누적분포함수의 부드러운 S자 곡선을 확인할 수 있습니다.\n\nlibrary(tidyverse)\n\n# ggplot2에서 주요 확률분포 곡선을 그릴 때는 stat_function을 활용하면 됩니다\n# 정규분포(norm)의 누적분포함수를 그릴 땐 fun = pnorm 조건을 쓰세요\n# 마찬가지로 지수분포(exp)에서 누적분포함수를 그릴 땐 fun = pexp 조건을 쓰면 됩니다.\n\nggplot(data.frame(X = c(-3, 3)), aes(x = X)) +\n  stat_function(fun = pnorm, colour = \"black\", size = 1) +\n  ggtitle(\"Cumulative Normal Distribution of X ~ N(0,1)\") +\n  theme_classic()\n\n\n\n# 참고로 접두사 p는 누적분포함수(CDF)를 의미하고, \n# 접두사 q는 누적분포함수(CDF)의 역함수인 분위수함수를, \n# 접두사 r은 무작위 난수 샘플을 의미합니다\n\nggbump package를 활용하면 시그모이드 곡선도 그릴 수 있습니다. 그럼 본격적으로 ggbump 패키지에 대해서 살펴보도록 하죠."
  },
  {
    "objectID": "posts/220220_ggbump-package/index.html#all-about-ggbump",
    "href": "posts/220220_ggbump-package/index.html#all-about-ggbump",
    "title": "bump chart를 그리고 싶을 때, ggbump package",
    "section": "All about ggbump",
    "text": "All about ggbump\ngeom_sigmoid\n\nlibrary(tidyverse)\nlibrary(ggbump)\n\ndf <- data.frame(x = 1:6,\n                 y = 5:10,\n                 xend = 7,\n                 yend = -5:0)\n\nhead(df)\n\n  x  y xend yend\n1 1  5    7   -5\n2 2  6    7   -4\n3 3  7    7   -3\n4 4  8    7   -2\n5 5  9    7   -1\n6 6 10    7    0\n\n\n시그모이드 곡선에 필요한 변수는 시작점, 끝점, 그룹 정도입니다. 시작점의 위치는 (x, y) 변수에, 끝점의 위치는 (xend, yend) 변수에 넣으면 되죠. 그리고 어떤 점끼리 이어지는지 그룹을 결정해주면 됩니다. 위의 데이터를 가지고 시그모이드 곡선을 그려보면 총 6개의 선이 그려집니다. (1, 5)와 (7, -5)를 잇는 곡선을 포함해서 말이죠.\n\nlibrary(tidyverse)\nlibrary(ggbump)\n\n# geom_sigmoid 함수에서 x, y, xend, yend, group 변수를 지정해주면 됩니다.\n# geom_sigmoid 외의 함수는 점(geom_point)과 라벨(geom_text)을 위한 함수입니다.\n\nggplot(df) +\n  geom_sigmoid(aes(x = x, xend = xend, y = y, yend = yend, group = factor(x)), color = \"black\") +\n  geom_point(aes(x = x, y = y)) +\n  geom_point(aes(x = xend, y = yend)) +\n  geom_text(aes(x = x, y = y, label = paste0(\"(\", x, \", \", y, \")\")), vjust = 1.8, size = 3) +\n  geom_text(aes(x = xend, y = yend, label = paste0(\"(\", xend, \", \", yend, \")\")), \n            vjust = 1.4, size = 3) +\n  theme_classic()\n\n\n\n\n\ngeom_bump\nbump chart를 그리기 위해선 geom_bump 함수를 사용하면 됩니다. 간단하게 가상의 데이터를 만들어 보겠습니다. 대한민국을 포함해 총 5개 국가(Korea, Japan, China, Russia, India)의 임의 데이터입니다. 아래와 같이 나라명과 연도(2020, 2021, 2022), 그리고 임의의 value값이 포함돼있습니다.\n\ndf <- tibble(country = c(\"Korea\", \"Korea\", \"Korea\", \"Japan\", \"Japan\", \"Japan\", \"China\", \"China\", \"China\", \"Russia\", \"Russia\", \"Russia\", \"India\", \"India\", \"India\"),\n             year = c(2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022),\n             value = c(500, 200, 100, 400, 300, 400, 200, 400, 200, 500, 400, 300, 300, 300, 100))\n\nhead(df)\n\n# A tibble: 6 × 3\n  country  year value\n  <chr>   <dbl> <dbl>\n1 Korea    2020   500\n2 Korea    2021   200\n3 Korea    2022   100\n4 Japan    2020   400\n5 Japan    2021   300\n6 Japan    2022   400\n\n\ngeom_bump 함수를 사용하려면 rank 값이 필요합니다. 각 연도별로 묶어서 value값에 따라 rank 값을 부여하면 되겠습니다. rank 함수를 사용하면 됩니다.\n\n# ties.method는 만일 value값이 동등할경우 어떻게 계산할 것인지 결정하는 부분입니다.\n# 보통은 min(동률 순위 중 낮은 값 출력), max(동률 순위 중 높은 값 출력)을 사용합니다.\n# 여기선 그냥 겹치지 않게 그리기 위해 random method(순서 상관없이 랜덤)를 선택했습니다.\n\ndf <- df |>\n  group_by(year) |>\n  mutate(rank = rank(value, ties.method = \"random\")) |>\n  ungroup()\n\nhead(df)\n\n# A tibble: 6 × 4\n  country  year value  rank\n  <chr>   <dbl> <dbl> <int>\n1 Korea    2020   500     4\n2 Korea    2021   200     1\n3 Korea    2022   100     2\n4 Japan    2020   400     3\n5 Japan    2021   300     3\n6 Japan    2022   400     5\n\n\nrank값이 잘 나왔군요. rank값은 값이 크면 클수록 더 높은 숫자가 부여됩니다. 2020년 한국의 value는 500, 일본의 value는 400인데 한국이 4위, 일본이 3위인 걸 보면 알 수 있죠. 우리가 보통 생각하는 순위와는 반대입니다. 위에서 rank를 계산할 때 -value로 계산한다면 이 부분은 해결할 수 있습니다. 여기선 그래프를 그릴 때 y축을 돌려버리는 걸로 처리하겠습니다.\n\nlibrary(wesanderson)\n\nggplot(df, aes(year, rank, color = country)) +\n  geom_bump() +\n  theme_classic() +\n  theme(legend.position = \"none\") +\n  scale_y_reverse() +\n  scale_color_manual(values = wes_palette(\"Zissou1\", n = 5))\n\n\n\n\n부드러운 시그모이드 곡선으로 이뤄진 범프 차트가 만들어졌습니다. scale_color_manual에 들어있는 wes_palette는 이름에서 유추할 수 있듯 웨스 앤더슨 감독의 색감이 담긴 컬러 팔레트입니다. 이 차트에서는 웨스 앤더슨 감독의 2004년 작 <스티브 지소와의 해저 생활(The Life Aquatic With Steve Zissou)>의 색상을 사용했습니다.\n\n\nThe Life Aquatic with Steve Zissou, Wes Anderson\n\n\n여기서 조금 더 꾸며볼까요? bump line의 폭을 늘리고 점도 찍어보고, 해당 라인이 어떤 국가를 의미하는지 라벨도 달아보겠습니다. 축은 있으면 보기 싫으니 선을 다 없애버립시다. 그리고 x축은 정수 연도만 남겨야 할 것 같고요. 정리해보면 이렇게 될 겁니다.\n\nggplot(df, aes(year, rank, color = country)) +\n  geom_bump(size = 5, smooth = 8, alpha = 0.8) +\n  geom_point(size = 5) +\n  geom_text(data = df %>% filter(year == min(year)),\n            aes(x = year, label = country), size = 5, hjust = 0, vjust = -1) +\n  geom_text(data = df %>% filter(year == max(year)),\n            aes(x = year, label = country), size = 5, hjust = 1, vjust = -1) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank()) +\n  scale_x_continuous(limits = c(2019.95, 2022.05),\n                     breaks = seq(2020, 2022, 1)) +\n  scale_y_reverse(limits = c(5, 0.5)) +\n  labs(y = \"RANK\",\n       x = NULL) +\n  scale_color_manual(values = wes_palette(\"Zissou1\", n = 5))"
  },
  {
    "objectID": "posts/220527_palmerpenguins-package/index.html",
    "href": "posts/220527_palmerpenguins-package/index.html",
    "title": "iris 대신 귀여운 penguins package 씁시다",
    "section": "",
    "text": "오늘 소개할 R package는 palmerpenguins package입니다. 남극의 파머 군도에 있는 3곳의 섬에서 관찰된 3종의 펭귄 데이터가 담겨져 있죠.\n\n\n파머 군도에 있는 Dreams Island, Torgersen Island, Biscoe Point에는 세 종의 펭귄이 살고 있습니다. 턱끈 펭귄(Chinstrap), 젠투 펭귄(Gentoo), 아델리 펭귄(Adélie) 이렇게 말이죠. palmerpenguins package에는 이 세 펭귄의 크기, 성별 정보가 담겨있습니다. 펭귄들의 데이터는 미국의 장기 생태 연구 네트워크(US Long Term Ecological Research Network)에서 운영하는 프로그램의 일부로, 파머 군도에서 2007년부터 2009년까지 크리스틴 고먼 박사에 의해 수집됐습니다.\n\n\nR을 이용하는 유저 중에 iris 데이터를 한 번이라도 안 써본 유저는 없을 겁니다. iris 데이터는 로널드 피셔(Ronald Fisher)의 1936년 논문에 포함되어 있던 유서 깊은 자료입니다. R에 기본적으로 내장되어 있는 데이터이기도 하고 기본적인 R 연산, 시각화를 공부하는데 iris만한 데이터가 없죠. 그런데 이 iris 데이터를 이제 그만 쓰자는 목소리가 나오고 있어요. 바로 로널드 피셔 때문이죠.\n\n\n피셔는 통계학자이자 유전학자이자 진화생물학자였습니다. 현대 통계학에 지대한 공을 세운 학자로 알려져있습니다. 통계학자 앤더스 할(Anders Hald)은 피셔를 두고 현대 통계학의 토대를 거의 혼자서 만들어낸 천재로 지칭할 정도죠. Bootstrap을 처음으로 제안한 브래들리 에프론(스탠퍼드 대학교 통계학과 교수)도 로널드 피셔를 20세기 통계에서 가장 중요한 인물이라고 말할 정도입니다.\nF-검정, F-분포의 F가 바로 피셔의 F입니다. 피셔가 F-분포를 처음 제안했고, 조지 W 스네데코가 이후에 완성하면서 처음 제안한 피셔를 기려 F-분포, F-검정이라고 명명한거죠. 그래서 F-분포를 피셔-스네데코 분포라고도 합니다. ggplot2에서 제공해주는 stat_function을 활용해서 간단한 F-분포를 그려봤습니다. `\n\nlibrary(tidyverse)\n\nggplot(data.frame(x = c(0, 5)), aes(x = x)) +\n  stat_function(fun = \"df\", args = list(df1 = 5, df2 = 10), size = 1) +\n  theme_classic()\n\n\n\n# 자유도가 (a, b)인 F-분포를 그리려면 args의 df1, df2에 a, b를 넣으면 됩니다.\n# 위의 그래프는 자유도가 5, 10인 F-분포입니다.\n\n전체 대상(모집단)의 특성(모수)을 파악하기 위해 표본을 추출해 추론하는 건 현대 통계에서 아주 당연한 접근방식이죠? 이 흐름을 만든 게 바로 로널드 피셔입니다. 피셔는 모집단과 표본집단을 구분짓고, 일부(표본집단)를 통해 전체(모집단)에 대한 분석이 가능하다는 걸 귀무가설로 증명해 냈습니다. 귀무가설(null hypothesis)도 피셔가 정의한 개념입니다.\n그리고 이걸 발전시켜서 추측통계학, 이른바 추계학(stochastic)을 탄생시키죠. 추계학은 통계의 범위를 수학뿐만 아니라 여론조사, 제품검사, 의약품의 효과 등 사회과학의 방법론까지 확장시켰습니다. 20세기 통계에서 가장 중요한 인물이라고 칭하는 게 부족함이 없어보입니다.\n그런데 그 대단한 피셔가 우생학자로도 유명했습니다. BLM 시위 이후 피셔의 우생학자로서의 삶이 다시 재조명되면서 과학 분야 전반에서 정화의 흐름이 나오고 있습니다. 영국의 명문대학 유니버시티 칼리지 런던은 피셔의 이름이 붙은 연구 센터의 이름을 Center for Computational Biology로 바꾸기도 했죠. 그래서 iris를 과연 계속 써야하는지에 대한 논의가 나온 겁니다. 그 대안으로 떠오른 데이터셋이 바로 palmerpenguins package의 펭귄 데이터입니다."
  },
  {
    "objectID": "posts/220527_palmerpenguins-package/index.html#all-about-package",
    "href": "posts/220527_palmerpenguins-package/index.html#all-about-package",
    "title": "iris 대신 귀여운 penguins package 씁시다",
    "section": "All about package",
    "text": "All about package\npenguins\n파머 군도에서 수집된 원자료는 penguins_raw에 담겨있습니다. 관측치를 모두 활용하고 싶다면 penguins_raw를 불러오면 됩니다. 아마 대부분의 경우에는 penguins 데이터면 충분할겁니다. penguins 데이터에는 8개의 변수, 344개의 개체 정보가 들어가 있습니다. bill_length와 bill_depth는 펭귄의 부리의 크기를 나타낸 정보입니다. 아래 그림을 보면 length와 depth의 차이를 알 수 있어요.\n\n\npalmerpenguins::penguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n# species : 펭귄 종을 나타내는 factor형 변수(Adélie, Chinstrap, Gentoo)\n# island : 남극 파머 군도의 섬을 나타내는 factor형 변수(Biscoe, Dreams, Torgersen)\n# bill_length_mm : 펭귄 부리의 길이를 ㎜단위로 나타낸 number형 변수\n# bill_depth_mm : 펭귄 부리의 깊이를 ㎜단위로 나타낸 number형 변수\n# flipper_length_mm : 펭귄 물갈퀴의 길이를 ㎜단위로 나타낸 integer형 변수\n# body_mass_g : 펭귄 몸무게를 g단위로 나타낸 integer형 변수\n# sex : 펭귄 성별을 나타낸 factor형 변수(female, male)\n# year : 연구 시점이 담긴 integer형 변수(2007, 2008, 2009)\n\nSimpson’s paradox\niris대신 제시되는 데이터셋인만큼 기본적인 시각화를 연습하는데 penguins 패키지는 부족함이 없습니다. 펭귄 부리의 길이와 깊이를 가지고 scatter plot을 그려보겠습니다. geom_smooth로 상관관계를 살펴보면 음의 상관관계가 있다고 볼 수 있겠네요.\n\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_classic()\n\n\n\n\n하지만 종별로 나눠서 살펴보면 어떨까요? 이번엔 Adélie, Chinstrap, Gentoo 세 종별로 scatter plot을 그려서 상관관계를 살펴보겠습니다. 종별로 보면 부리의 길이와 깊이는 양의 상관관계가 있어 보입니다. 야생의 데이터에서 확인할 수 있는 심슨의 역설(Simpson’s Paradox)의 아주 좋은 사례입니다. 영국의 통계학자 에드워드 심슨이 정리한 이 역설은 각각의 변수를 살피지 않고 전체 통계만 보고 판단하다가 발생할 수 있는 함정입니다.\n\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 2) + \n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"darkorchid\",\"cyan4\")) +\n  theme_classic() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/220827_quarto/index.html",
    "href": "posts/220827_quarto/index.html",
    "title": "R Markdown의 차세대 포맷, Quarto",
    "section": "",
    "text": "RStudio는 자사의 2022년 컨퍼런스 rstudio::conf(2022)에서 발표한 여러 소식 가운데 가장 중요한 소식으로 이렇게 4가지를 꼽았습니다.\n\nRStudio의 이름은 Posit으로 바꾼다\n새로운 오픈소스 기반의 과학기술 출판 시스템, Quarto\nShiny 생태계의 새로운 발전\ntidymodel의 업데이트\n\n1번은 이미 이 포스트에서 다루었죠? 그 연장선이라고 볼 수 있는 Quarto가 이번 게시물의 주제입니다. Quarto는 R Markdown에 이은 RStudio의 차세대 R 출판 플랫폼입니다. 기존의 R Markdown을 이용하면 R code sript를 Word, HTML, PDF, PPT 등 다양한 문서 형식으로 만들 수 있었습니다. 웹을 통한 출판(Bookdown)까지도 가능했죠.\n\n그런데 이 R Markdwon이 어느새 10년 가까이 지났습니다. 기능의 편리함은 지적할만한 게 없었지만 R Markdown 생태계가 너무 커져버렸죠. 관련 생태계가 커졌다는 건 오히려 반길 일이지만 덕지덕지 붙어버린 서드파티 패키지들이 많아진 게 문제였습니다. 더 이상 통일된 하나의 R Markdown의 제작과 작업이 되질 못했습니다. 과학, 기술 블로그를 만들 땐 distill package를 사용하고, 웹 프레젠테이션 파일을 만들 땐 xaringan(사륜안) package를 사용하고…\n그래서 등장한 게 바로 이 Quarto입니다. R Markdown과 마찬가지로 Knitr와 Pandoc을 기반으로 하고 있고요. 궁극적으로 R Studio는 Quarto 생태계에 다른 언어를 사용하는 사람들끼리 모을 생각을 하고 있습니다. 그래서 저번 Posit 이야기의 연장선이라고 말씀을 드린 겁니다. 그 이유 때문인지 Quarto는 R의 내장 라이브러리가 아닌 독립 소프트웨어로 제작되었습니다. 새로운 시스템 Quarto 단어가 생소할 텐데, Quarto는 4절판을 의미합니다. 8페이지 분량의 텍스트를 두 번 접어서 네 장을 만드는 형식을 뜻하죠. 출판 역사에 의미가 있는 단어를 골랐다고 합니다.\n\n\n\nhttps://quarto.org/docs/get-started/\nQuarto는 위 링크에서 받을 수 있습니다. 링크를 들어가면 나오는 홈페이지에서도 확인할 수 있지만 Quarto는 R 뿐만 아니라 VS code, Jupyter에서도 활용할 수 있습니다."
  },
  {
    "objectID": "posts/220827_quarto/index.html#quarto-vs-r-markdown",
    "href": "posts/220827_quarto/index.html#quarto-vs-r-markdown",
    "title": "R Markdown의 차세대 포맷, Quarto",
    "section": "Quarto vs R Markdown",
    "text": "Quarto vs R Markdown\n\n\n\n\n\nQuarto의 구조를 알기 위해선 R Markdown에 대한 이해가 필요합니다.일단 R Markdown 시스템은 위의 그림과 같습니다. Rmd(R 마크다운) 파일을 knitr package를 통해 md(마크다운) 파일로 만들고, pandoc 라이브러리를 통해 문서, PPT, 웹페이지, 책의 형태로 퍼블리싱 되는 거죠. knitr은 2012년 Yihui Xie에 의해 개발된 패키지입니다. Knitr 패키지를 이용하면 동적 리포트를 생성할 수 있게 해주죠. md 파일을 다양한 형식으로 변환할 때에는 pandoc 라이브러리를 활용합니다. 정리해보면 기존 R Markdown은 Rmd 파일을 여러가지 형태의 문서로 퍼블리싱 해주는 시스템이라고 할 수 있겠네요.\n\nQuarto도 비슷합니다. R Markdown과 마찬가지로 Knitr과 pandoc을 활용합니다. 달라진 건 적용 대상입니다. 기존 시스템에선 Rmd만 가능했다면 이제는 Python도 가능합니다. jupyter까지 활용하게 되면서 Python에서 qmd(Qarto markdown) 파일을 작성하면 jupyter를 통해 md 파일로 변환해 여러가지 결과물을 만들어 낼 수 있게 된거죠.\n\n\n\n구분\nR Markdown\nQuarto\n\n\n\n\n기본 포맷\nhtml_document\npdf_document\nword_document\nhtml\npdf\nword\n\n\n비머 포맷(발표자료)\nbeamer_presentation\nbeamer\n\n\nPPT\npowerpoint_presentation\npptx\n\n\nHTML Slides\nxaringan\nioslides\nrevealjs\nrevealjs"
  },
  {
    "objectID": "posts/220827_quarto/index.html#quarto의-미래",
    "href": "posts/220827_quarto/index.html#quarto의-미래",
    "title": "R Markdown의 차세대 포맷, Quarto",
    "section": "Quarto의 미래",
    "text": "Quarto의 미래\n\n\n\nR & stats illustrations by @allison_horst\n\n\nRStudio의 이번 Qaurto 발표는 결국 Posit과 비슷합니다. Python과 Julia 등 다른 언어들까지 포함하는 IDE인 Posit을 발표하고, 새롭게 출시한 Quarto에는 jupyter를 지원하면서 다른 언어 이용자들을 R 커뮤니티에 끌어들이겠다는 겁니다. Python 이용자들도 충분히 웹사이트와 블로그, 책을 만들 수 있다고 유혹하는 것이죠. RStudio의 CEO가 발표한 내용을 살펴보면 미래에는 마치 Google Docs에서 사람들이 자유롭게 문서를 편집하듯이 여러 언어를 사용하는 이용자들이 Quarto 문서를 통해 협업을 하길 구상하고 있더라고요. 물론 아직까지 그런 환경이 갖춰져 있는 건 아니지만, 꽤나 매력적인 미래의 모습입니다. 하루빨리 그런 환경이 오길 바라면서 이번 포스트를 마무리하겠습니다."
  },
  {
    "objectID": "posts/220827_quarto/index.html#r-markdown과-차이점",
    "href": "posts/220827_quarto/index.html#r-markdown과-차이점",
    "title": "R Markdown의 차세대 포맷, Quarto",
    "section": "R Markdown과 차이점",
    "text": "R Markdown과 차이점\n\n\n\n\n\nQuarto의 구조를 알기 위해선 R Markdown에 대한 이해가 필요합니다. 일단 R Markdown 시스템은 위의 그림과 같습니다. Rmd(R 마크다운) 파일을 knitr package를 통해 md(마크다운) 파일로 만들고, pandoc 라이브러리를 통해 문서, PPT, 웹페이지, 책의 형태로 퍼블리싱되는 거죠. knitr은 2012년 Yihui Xie에 의해 개발된 패키지입니다. Knitr 패키지를 이용하면 동적 리포트를 생성할 수 있게 해주죠. md 파일을 다양한 형식으로 변환할 때에는 pandoc 라이브러리를 활용합니다. 정리해보면 기존 R Markdown은 Rmd 파일을 여러 가지 형태의 문서로 퍼블리싱해주는 시스템이라고 할 수 있겠네요.\n\n\n\nR & stats illustrations by @allison_horst\n\n\nQuarto도 비슷합니다. R Markdown과 마찬가지로 Knitr과 pandoc을 활용합니다. 달라진 건 적용 대상입니다. 기존 시스템에선 Rmd만 가능했다면 이제는 Python도 가능합니다. jupyter까지 활용하게 되면서 Python에서 qmd(Qarto markdown) 파일을 작성하면 jupyter를 통해 md 파일로 변환해 다양한 결과물을 만들어 낼 수 있게 된 거죠.\n\n\nQuarto vs R Markdown\n\n\n\n\n\n\n\n\n구분\nR Markdown\nQuarto\n\n\n\n\n기본 포맷\nhtml_document\npdf_document\nword_document\nhtml\npdf\nword\n\n\n비머 포맷(발표자료)\nbeamer_presentation\nbeamer\n\n\nPPT\npowerpoint_presentation\npptx\n\n\nHTML 슬라이드\nxaringan\nioslides\nrevealjs\n\n\nrevealjs\n\n\n블로그 및 웹사이트\nblogdown\ndistill\nQuarto Websites\nQuarto Blogs\n\n\n책\nbookdown\nQuarto Books\n\n\n인터랙티브\nShiny Documents\nQuarto Interactive Documents\n\n\nPaged HTML\npagedown\n2022 여름 공개 예정\n\n\nJournal Articles\nrticles\n2022 여름 공개 예정\n\n\n대시보드\nflexdashboard\n2022 가을 공개 예정\n\n\n\n다양한 포맷을 만들기 위해 여러 패키지를 사용했던 R Markdown과 달리, Quarto에서는 Quarto 시스템으로 다 들어왔습니다. 예전 R을 활용해 기술 블로그를 만들기 위해 distll package를 사용했지만, 이젠 Quarto의 Quarto Websites, Blogs를 활용하면 됩니다. 이 블로그도 Quarto Blogs를 이용해 만들었습니다. 아직 공개되지 않은 대시보드와 Journal Articles, Paged HTML도 곧 공개될 예정입니다."
  },
  {
    "objectID": "posts/220320_geofacet/index.html",
    "href": "posts/220320_geofacet/index.html",
    "title": "대선 득표율 지도 시각화 with R",
    "section": "",
    "text": "FiveThirtyEight의 2020 미 대선 선거결과 시각화\n\n\n해외 언론에서 선거 결과를 시각화한 기사를 볼 때마다 드는 생각이 있습니다. “아 우리나라도 저렇게 격자형태로 시각화하면 멋드러지지 않을까…” 국내에서는 시군구 혹은 읍면동 단위로 색을 칠하는 형태가 대부분이지 그 안에 그래프를 넣어서 시각화하기가 힘들어요. 미국은 50개 주에 1개의 특별구로 이루어졌으니, 필요한 격자는 51개 뿐이지만 우리나라의 시군구는 250개. 큰 권역 구분 정도는 다양한 시각화를 시도할 수 있지만 시군구 단위로 하기엔 부담이 될 수 있는거죠.\n\n\n그래도 해보고 싶습니다. 우리나라도 시군구 단위로 멋드러지게 만들고 싶어요. 그래서(!) 시군구 단위 그리드 만들어 봤습니다. 활용한 패키지는 geofacet입니다. geofacet은 말 그대로 지리적 정보(geo)로 면(facet)을 분할해 볼 수 있는 패키지인데요, 이 패키지가 좋은 건 Grid Designer라는 기능을 통해 자기만의 그리드를 만들 수 있다는 거죠. 그래서 지도를 펼치고 250개 시군구의 위치를 하나하나 지정해가며 만들어 봤습니다. geofacet package에도 제출해 놓았습니다. 여기에서 확인할 수 있어요.\n\nlibrary(readr)\nmygrid <- read_csv(\"kr_sgg.csv\", col_types = cols(code = col_character()))\n\nhead(mygrid[,c(1,3,4,2)])\n\n# A tibble: 6 × 4\n  code    row   col name               \n  <chr> <dbl> <dbl> <chr>              \n1 11110     5     7 서울특별시 종로구  \n2 11140     6     7 서울특별시 중구    \n3 11170     7     7 서울특별시 용산구  \n4 11200     6     8 서울특별시 성동구  \n5 11215     7     8 서울특별시 광진구  \n6 11230     5     8 서울특별시 동대문구\n\n\n만들어 놓은 대한민국 시군구 단위 그리드 구조는 아주 간단합니다. 이름, row, col, code 정도로 이루어져 있죠. geofacet 함수는 그리드의 행(row)과 열(col)을 인식해서 그 모양에 맞춰 facet해 주는 구조입니다. 이 그리드를 가지고 그려보면 이런 모양이 나옵니다.\n\ngeofacet::grid_preview(mygrid)\n\n\n\n\n짜잔~ 면적이 서로 다른 시군구를 동일한 면적 단위로 표현했기때문에 실제 위치와는 차이가 있을 수 있습니다. 시군구 그리드에 적용된 코드는 행정안전부에서 제공하고 있는 행정표준코드를 따라서 만들어 놓았습니다. 종로구(11110), 중구(11140) 이런식으로 말이죠. 시군구 단위의 여러 데이터들을 합쳐서 시각화, 분석할 일 있으면 행정코드 기준으로 정리한다면 간단하게 할 수 있을 겁니다."
  },
  {
    "objectID": "posts/220320_geofacet/index.html#geo_grid-ggplot",
    "href": "posts/220320_geofacet/index.html#geo_grid-ggplot",
    "title": "대선 득표율 지도 시각화 with R",
    "section": "geo_grid + ggplot",
    "text": "geo_grid + ggplot\n선거 데이터 만들기\n이제 여기에 해야할 것은 각각의 시군구에 그래프를 넣어보는 겁니다. 이번 대통령 선거 득표 정보를 바탕으로 그래프를 넣어보려고 해요. 선관위 개표 데이터를 정리해서 다음과 같은 데이터(PE_20)를 만들어 봤습니다. PE_20 데이터는 여기에서 다운받을 수 있습니다.\n\nlibrary(readxl)\nlibrary(tibble)\n\nPE_20 <- read_excel(\"Presidential_Election_2022.xlsx\")\nPE_20 <- as_tibble(PE_20)\n\nhead(PE_20)\n\n# A tibble: 6 × 21\n   code 구분    시군…¹  선거…² 투표수 이재명 윤석열 심상정 오준호 허경영 이백윤\n  <dbl> <chr>   <chr>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 11110 서울특… 종로구  129968 100629  46130  49172   3115     53    558     42\n2 11140 서울특… 중구    111448  84998  38244  42906   2310     46    463     19\n3 11170 서울특… 용산구  199077 152068  60063  85047   4374     67    755     37\n4 11200 서울특… 성동구  252087 197240  84411 103880   5365    123    969     50\n5 11215 서울특… 광진구  303582 235471 109922 113733   7072    155   1416     52\n6 11230 서울특… 동대문… 300928 232106 108171 112890   6416    151   1304     44\n# … with 10 more variables: 옥은호 <dbl>, 김경재 <dbl>, 조원진 <dbl>,\n#   김재연 <dbl>, 이경희 <dbl>, 김민찬 <dbl>, 계 <dbl>, 무효투표수 <dbl>,\n#   기권수 <dbl>, 개표율 <dbl>, and abbreviated variable names ¹​시군구명,\n#   ²​선거인수\n\n\nPE_20 데이터에는 각 시군구 단위로 후보별 득표수를 넣어 두었습니다. 시군구별 선거인수, 후보별 득표수, 무효투표수, 기권수 등… 이 데이터로 시각화를 바로 할 순 없습니다. 우리에게 필요한 건 각 후보별 득표율이니까, 조금 더 정제할 필요가 있죠. 일단 득표율 TOP3 후보의 득표율을 계산해보겠습니다. 득표율은 후보별 투표수를 전체 투표수 - 무효투표수로 나누면 됩니다.\n\nlibrary(dplyr)\n\nPE_20 <- PE_20 |> mutate(lee_R = 이재명 / (투표수 - 무효투표수),\n                         yoon_R = 윤석열 / (투표수 - 무효투표수),\n                         sim_R = 심상정 / (투표수 - 무효투표수))\n\nPE_20_rate <- PE_20 |> select(c(code, lee_R, yoon_R, sim_R, 구분, 시군구명))\nhead(PE_20_rate)\n\n# A tibble: 6 × 6\n   code lee_R yoon_R  sim_R 구분       시군구명\n  <dbl> <dbl>  <dbl>  <dbl> <chr>      <chr>   \n1 11110 0.464  0.495 0.0313 서울특별시 종로구  \n2 11140 0.454  0.510 0.0274 서울특별시 중구    \n3 11170 0.399  0.564 0.0290 서울특별시 용산구  \n4 11200 0.432  0.532 0.0275 서울특별시 성동구  \n5 11215 0.472  0.488 0.0304 서울특별시 광진구  \n6 11230 0.471  0.492 0.0279 서울특별시 동대문구\n\n\n제대로 계산되었는지 비교해봅시다. 선관위 홈페이지에서 살펴보면 종로구에서 3명의 후보의 득표율이 46.42%, 49.48%, 3.13%였고, 중구에서의 득표율이 각각 45.42%, 50.96%, 2.74% 군요. 계산된 것과 비교해보니 맞는것 같습니다. 계산된 데이터는 wide form인데 시각화를 위해선 long form으로 조정할 필요가 있어요.\n\nlong form 으로 만들기\nlong form으로 바꾸는 법은 여러가지가 있지만 여기선 2개를 소개해드리겠습니다. 먼저 tidyr 패키지의 gather 함수. gather 함수가 직관적이지 않다면 그 대안으로 나온 pivot_longer를 사용하는 것도 방법입니다. 두 함수의 결과는 같으니까 원하는 것 사용하면 될 겁니다. tidyr 패키지 제작자인 해들리 위컴은 새로 나온 pivot_longer 함수를 추천하고 있어요.\n\nlibrary(dplyr)\nlibrary(tidyr)\n\nPE_20_final <- PE_20_rate |> gather(key = \"cand\", value = \"rate\", lee_R, yoon_R, sim_R)\n\n# key: long form 데이터로 바꾸었을 때 이름이 될 칼럼명\n# value: long form 데이터로 바꾸었을 때 값이 들어갈 칼럼명\n# PE_20_rate의 칼럼 중 후보별 득표율 칼럼 3개(lee_R, yoon_R, sim_R)를 써주면 됩니다.\n\nhead(PE_20_final)\n\n# A tibble: 6 × 5\n   code 구분       시군구명 cand   rate\n  <dbl> <chr>      <chr>    <chr> <dbl>\n1 11110 서울특별시 종로구   lee_R 0.464\n2 11140 서울특별시 중구     lee_R 0.454\n3 11170 서울특별시 용산구   lee_R 0.399\n4 11200 서울특별시 성동구   lee_R 0.432\n5 11215 서울특별시 광진구   lee_R 0.472\n6 11230 서울특별시 동대문구 lee_R 0.471\n\nPE_20_final2 <- PE_20_rate |> pivot_longer(cols = ends_with(\"R\"), \n                                           names_to = \"cand\",\n                                           values_to = \"rate\")\n\n# cols: long form 데이터로 바꾸고 싶은 칼럼들(lee_R, yoon_R, sim_R)\n# ends_with: 동일한 단어로 끝나는 애들만 고를 때 사용하는 함수(tidyselect package의 함수)\n# names_to : long form 데이터로 바꾸었을 때 lee_R, yoon_R, sim_R이 들어갈 칼럼 이름\n# values_to : long form 데이터로 바꾸었을 때 value 값에 들어갈 칼럼 이름\n\nhead(PE_20_final2)\n\n# A tibble: 6 × 5\n   code 구분       시군구명 cand     rate\n  <dbl> <chr>      <chr>    <chr>   <dbl>\n1 11110 서울특별시 종로구   lee_R  0.464 \n2 11110 서울특별시 종로구   yoon_R 0.495 \n3 11110 서울특별시 종로구   sim_R  0.0313\n4 11140 서울특별시 중구     lee_R  0.454 \n5 11140 서울특별시 중구     yoon_R 0.510 \n6 11140 서울특별시 중구     sim_R  0.0274\n\n\n\nggplot 그래프 그리기\n데이터도 정리가 되었겠다… 이제 이것을 가지고 그래프로 그려서 그리드에 넣으면 끝입니다. 일단 후보별 득표율을 가지고 지역별로 들어갈 바 차트가 어떤 모양이 될지, 샘플을 만들어보겠습니다. 서울특별시 종로구(code = 11110)를 가지고 예시로 그려봅시다.\n\n# 그래프를 그렸을 때 기호순으로 나열될 수 있도록 factor level을 부여해줍니다.\n# coord_flip()를 사용하면 후보의 순서가 뒤집어지기때문에 factor level은 역순으로.\n# 각 후보에 맞춰서 컬러 팔레트 설정해줍니다.\n\nPE_20_final$cand <- factor(PE_20_final$cand, levels = c(\"sim_R\", \"yoon_R\", \"lee_R\"))\ndata_11110 <- PE_20_final |> filter(code == 11110)\n\nlibrary(tidyverse)\n\nggplot(data_11110, aes(x = cand, y = rate, fill = cand)) +\n  geom_col() +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#F7EF99\", \"#fc7b84\", \"#008EC6\")) +\n  theme_minimal() +\n  theme(\n    strip.background = element_blank(),\n    strip.text.x = element_blank(),\n    axis.text.y = element_blank()\n    )\n\n\n\n\n최종 시각화\n이제 이 그래프를 250개 시군구에 넣으면 됩니다. 어떻게? geofacet::facet_geo 함수를 쓰면 단 한 줄이면 만들 수 있습니다. 전국 지도에서 3위 후보의 득표율이 보이질 않으니… 일단 제외하고 1, 2위 후보만 시각화를 해 보겠습니다.\n\n# 위의 코드에서 추가된 건 facet_geo()뿐\n# 만들어 놓은 그리드(mygrid)와 join할 데이터(code)를 입력하면 끝\n# 시각화 정리는 theme에서 약간의 조정으로 마무리\n\nlibrary(geofacet)\n\nggplot(subset(PE_20_final, cand != \"sim_R\"), aes(x = cand, y = rate, fill = cand)) +\n  geom_col() +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#fc7b84\", \"#008EC6\")) +\n  facet_geo(~ code, grid = mygrid) +\n  theme_minimal() +\n  theme(\n    strip.background = element_blank(),\n    strip.text.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank()\n  ) + \n  scale_y_continuous(breaks = c(.5, 1), limits = c(0, 1))\n\n\n\n\n짜잔! 이러면 우리가 원했던 250개 시군구 그리드에 각각의 후보별 득표율을 그릴수 있게 되었습니다."
  },
  {
    "objectID": "posts/220904_Ragg/index.html",
    "href": "posts/220904_Ragg/index.html",
    "title": "한글 폰트 깨짐 현상 Ragg package로 부셔드림",
    "section": "",
    "text": "R에서 데이터를 잘 정제해서 시각화를 만들면 항상 한글의 벽에 부딫히곤 합니다. 한글을 인식하지 못하는 경우에는 인코딩을 해결하면 깨짐현상을 막을 수 있죠. 그렇다면 이미지를 추출할 때 한글이 깨지는 경우는 어떻게 할까요? 여기 그 예시가 있습니다. 대한민국의 주요 도시의 위치를 나타내기 위해 이런 데이터 셋을 만들어봤어요. tibble package에서 소개했던 tibble::tribble 함수를 이용해봤습니다. 세계화 시대에 맞춰 도시명에는 한글과 영어, 그리고 한자까지 포함했고요.\n\nlibrary(tibble)\n\nROK_city <- tribble(\n  ~City, ~Lat, ~Lon,\n  \"울산(Ulsan, 蔚山)\", 35.549999, 129.316666,\n  \"광주(Gwangju, 光州)\", 35.166668, 126.916664,\n  \"대전(Daejeon, 大田)\", 36.351002, 127.385002,\n  \"대구(Daegu, 大邱)\", 35.866669, 128.600006,\n  \"부산(Busan, 釜山)\", 35.166668, 129.066666,\n  \"청주(Chungju, 淸州)\", 36.981304, 127.935905,\n  \"원주(Wonju, 原州)\", 37.342220, 127.920158,\n  \"인천(Incheon, 仁川)\", 37.456257, 126.705208,\n  \"서울(Seoul)\", 37.532600,127.024612\n)\n\n\n이 데이터셋을 바탕으로 지도를 그려봤습니다. 지도의 제목은 <🇰🇷대한민국(大韓民國)의 주요 도시 위치>로 해봤습니다. 그래프 제목에 이모지 정도는 써 줘야 그래도 웹 3.0 시대를 살고 있다고 할 수 있지 않겠습니까? 그렇게 만들어본 그래프의 모습입니다.\n\n\n\n\n처참한 모습입니다. 영어를 제외한 모든 글자를 인식하지 못하는군요. 하지만 걱정하지 마세요. 해결책이 있습니다. 바로 Ragg package를 이용하면 됩니다."
  },
  {
    "objectID": "posts/220904_Ragg/index.html#rapp-package",
    "href": "posts/220904_Ragg/index.html#rapp-package",
    "title": "한글 폰트 깨짐 현상 Rapp package로 부셔드림",
    "section": "Rapp Package",
    "text": "Rapp Package\nRapp가 무슨 뜻?\nRapp package 사용법\nRapp package를 사용하는 법은 아주 간단합니다. 일반적인 package를 설치하듯 R에 Rapp package를 설치하면 됩니다. intall.package(\"ragg\") 이렇게 말이죠. 개발버전의 Rapp package를 사용하고 싶다면 devtools::install_github(\"r-lib/ragg\")를 이용하면 됩니다. 설치한 다음엔 RStudio의 옵션창으로 가 봅시다. 일반 옵션에서 Graphics 항목에서 Graphics Device를 기존 (Default)로 되어있던 것을 AGG로 변경하면 끝입니다. 아래 스크린샷을 참고하시면 이해하기 편할겁니다."
  },
  {
    "objectID": "posts/220904_Ragg/index.html#ragg-package",
    "href": "posts/220904_Ragg/index.html#ragg-package",
    "title": "한글 폰트 깨짐 현상 Ragg package로 부셔드림",
    "section": "Ragg Package",
    "text": "Ragg Package\nRagg가 뭐지?\n\nRapp package는 Maxim Shemanarev라는 개발자가 개발한 AGG(Anti-Grain Geometry) 라이브러리를 기반으로 만들어진 R용 그래픽 패키지입니다. R과 AGG가 만나 Ragg package로 탄생했죠. Rag가 누더기, 조각이라는 뜻이 있는만큼 패키지 로고는 천 조각의 모습을 하고 있습니다. R의 그래픽 패키지로 가장 많이 알려진 건 grDevices package일 겁니다. 색상, 폰트를 자유롭게 이용하기 위해, 이제는 grDevices 대신 Ragg를 사용하면 됩니다. AGG는 grDevices에서 제공하는 표준 래스터 장치보다 더 높은 성능과 더 높은 품질을 제공하고 있습니다.\n\nRapp package 사용법\nRapp package를 사용하는 법은 아주 간단합니다. 일반적인 package를 설치하듯 R에 Rapp package를 설치하면 됩니다. intall.package(\"ragg\") 이렇게 말이죠. devtools::install_github(\"r-lib/ragg\")로 개발버전의 Rapp package를 사용해도 됩니다. 설치한 다음엔 RStudio의 옵션창으로 가 봅시다. 일반 옵션에서 Graphics 항목에서 Graphics Device를 기존 (Default)로 되어있던 것을 AGG로 변경하면 끝입니다. 아래 스크린샷을 참고하시면 이해하기 편할겁니다.\n\n\n\n\n\nAPP 환경에서 만드는 그래프\n이제 다시 그래프를 만들어봅시다. 대한민국의 지도를 만들기 위해 rnaturalearth package의 ne_countries 함수를 이용했습니다. rnaturalearth package는 과학 데이터의 장벽을 낮추기 위한 프로젝트 중 하나인 ropensci package에 포함되어 있는데요, ropensci는 나중에 따로 다뤄보겠습니다. 여튼 rnaturalearth::ne_countries 함수를 사용해보겠습니다.\n\nkorea <- rnaturalearth::ne_countries(\n  scale = 10, \n  country = \"South Korea\", \n  returnclass = \"sf\"\n)\n\n불러온 대한민국 데이터를 ggplot2::geom_sf에 넣어 지도를 그려보겠습니다.\n\nlibrary(ggplot2)\nlibrary(ragg)\n\nggplot() + \n  geom_sf(\n    data = korea, \n    fill = \"#C3ECB1\", \n    colour = \"#D5D8DB\", \n    size = 0.2\n  ) + \n  ggrepel::geom_label_repel(\n    data = ROK_city,\n    aes(Lon, Lat, label = City), \n    fill = \"#FFFFFF88\",\n    box.padding = unit(5, \"mm\")\n  ) + \n  geom_point(data = ROK_city, aes(Lon, Lat)) +\n  ggtitle(\"대한민국(大韓民國)의 주요 도시 위치🇰🇷\") +\n  theme_void() +\n  theme(panel.background = element_rect(\"#AADAFE\"),\n        plot.title = element_text(margin = margin(5, 5, 5, 5)))\n\n\n\n\n짜잔~ rapp 패키지로 APP 환경을 이용하면 한글과 이모지, 한자가 깨지지 않는 이미지를 손쉽게 얻을 수 있습니다."
  },
  {
    "objectID": "posts/220918_quant/index.html",
    "href": "posts/220918_quant/index.html",
    "title": "내가 원하는 주식 종목 정보 한번에 불러오기",
    "section": "",
    "text": "R을 활용해 주식을 분석하는 방법엔 다양한 선택지가 있습니다. 주식정보 사이트에서 데이터를 크롤링해 분석하는 방법, 그리고 패키지를 활용하는 방법 등… R의 퀀트 분석에서 가장 유명한 패키지는 아마 quantmod package일 겁니다. quantmod package를 이용하면 주식, 환율, 원자재 등 다양한 경제 데이터를 활용해 분석할 수 있습니다. 하지만 오늘은 tidyquant package를 활용해 퀀트 분석을 정리해보려고 합니다.\ntidyquant package는 zoo, xts, quantmod, TTR 등의 정량 데이터 및 시계열 데이터 분석 패키지를 통합해 제공해주고 있습니다. 거기에 패키지 이름에서 알 수 있듯 tidyverse 생태계의 도구를 사용해서 퀀트 분석을 할 수 있도록 설계되어 있죠. ggplot2를 이용한 시각화도 물론 가능합니다. 그럼 본격적으로 tidyquant package를 이용해 퀀트 분석을 시작해보겠습니다."
  },
  {
    "objectID": "posts/220918_quant/index.html#주식정보-불러오기",
    "href": "posts/220918_quant/index.html#주식정보-불러오기",
    "title": "내가 원하는 주식 종목 정보 한번에 불러오기",
    "section": "주식정보 불러오기",
    "text": "주식정보 불러오기\n우선 tidyquant package를 설치해야겠죠? install.packages(\"tidyquant\")를 입력해 tidyquant package를 설치합니다. 설치된 패키지를 불러옵시다. 거기에 tidyverse까지 함께 불러오겠습니다.\n\nlibrary(tidyquant)\nlibrary(tidyverse)\n\n\ntq_get()\ntq_get() 함수는 주식 관련 정보를 불러오는 가장 기본 함수입니다. get에 어떤 매개변수를 넣느냐에 따라 어느때는 주식정보를 얻을 수 있고, 또 어느때는 원자재 데이터를 가지고 올 수 있습니다. tq_get()함수의 주요 데이터 소스는 아래와 같습니다.\n\n\n\n\n\n\n데이터 소스\n데이터\n\n\n\nYahoo Finance\n기본적인 주가 정보는 Yahoo Finance의 API를 활용합니다\n\n\nFRED\n금리, 원자재 등 경제 관련 다양한 데이터는 세인트루이스 연준에서 제공하는 FRED(Federal Reserve Economic Data)를 활용합니다\n\n\nQuandl\n경제, 에너지 등의 데이터를 다루는 캐나다의 데이터 공유 플랫폼 회사 Quandl의 금융 API를 활용합니다\n\n\nTiingo\n주가 데이터, 코인 데이터 등을 제공해주는 Tiingo API도 사용할 수 있습니다\n\n\nAlpha Vantage\nTiingo와 비슷하게 주가, 코인 데이터 등을 제공해주는 Alpha Vantage API를 활용할 수 있습니다\n\n\nBloomberg\n블룸버그 경제 API도 사용할 수 있는데, 이 API는 유료 계정이 있어야 사용 가능합니다\n\n\n\n\nYahoo Finance부터 Bloomberg까지 다양한 매개변수가 있지만 이번 포스트에선 주가 정보를 불러오는 것에 집중해보겠습니다. 주가 정보 데이터는 Yahoo Finance에서 가져옵니다. 함수에 입력할 변수들도 간단합니다. 원하는 회사의 종목명과 시점만 적어주면 끝이죠. 예를 들어 2000년 1월 1일부터 2022년 8월 31일까지 엔비디아의 주가를 불러와본다고 해 봅시다. 엔비디아의 종목명은 NVDA이고, 주식 가격을 불러오기 위해 get에 넣을 매개변수는 stock.prices 입니다.\n\ntq_get(\"NVDA\",\n       get = \"stock.prices\",\n       from = \"2000-01-01\",\n       to = \"2022-08-31\")\n\n# A tibble: 5,702 × 8\n   symbol date        open  high   low close   volume adjusted\n   <chr>  <date>     <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl>\n 1 NVDA   2000-01-03 0.984 0.992 0.919 0.975 30091200    0.895\n 2 NVDA   2000-01-04 0.958 0.961 0.901 0.949 30048000    0.871\n 3 NVDA   2000-01-05 0.922 0.938 0.905 0.918 18835200    0.843\n 4 NVDA   2000-01-06 0.918 0.918 0.823 0.858 12048000    0.788\n 5 NVDA   2000-01-07 0.854 0.882 0.841 0.872  7118400    0.801\n 6 NVDA   2000-01-10 0.875 0.938 0.859 0.901 23985600    0.827\n 7 NVDA   2000-01-11 0.896 0.906 0.865 0.865 14812800    0.794\n 8 NVDA   2000-01-12 0.865 0.866 0.831 0.842 12355200    0.773\n 9 NVDA   2000-01-13 0.841 0.885 0.831 0.878 13219200    0.806\n10 NVDA   2000-01-14 0.891 0.952 0.888 0.915 60456000    0.840\n# … with 5,692 more rows\n\n\n짜잔~ 함수를 돌리면 tibble 형태의 데이터가 불러와집니다. 총 8열의 데이터에는 개장 시점의 가격부터 일일 거래량까지 기본적인 주식 정보가 담겨 있습니다. adjusted 열에는 주식 분할 및 배당 등 시장이 마감된 이후 주가에 영향을 줄 수 있는 변수까지 적용된 수정 가격이 들어가 있습니다.\n해외 주식만 가능한 건 아닙니다. 물론 우리나라 주식도 가능하죠. 이번엔 2000년 1월 1일부터 2022년 8월 31일까지 삼성전자의 주식 정보를 가져와 보겠습니다. Yahoo Finance에서 삼성전자의 종목명은 005930.KS 입니다. 입력하면 마찬가지로 tibble 형태의 삼성전자 주가 데이터를 불러올 수 있습니다.\n\ntq_get(\"005930.KS\",\n       get = \"stock.prices\",\n       from = \"2000-01-01\",\n       to = \"2022-08-31\")\n\n# A tibble: 5,690 × 8\n   symbol    date        open  high   low close   volume adjusted\n   <chr>     <date>     <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl>\n 1 005930.KS 2000-01-04  6000  6110  5660  6110 74195000    4623.\n 2 005930.KS 2000-01-05  5800  6060  5520  5580 74680000    4222.\n 3 005930.KS 2000-01-06  5750  5780  5580  5620 54390000    4253.\n 4 005930.KS 2000-01-07  5560  5670  5360  5540 40305000    4192.\n 5 005930.KS 2000-01-10  5600  5770  5580  5770 46880000    4366.\n 6 005930.KS 2000-01-11  5820  6100  5770  5770 59745000    4366.\n 7 005930.KS 2000-01-12  5610  5740  5600  5720 29220000    4328.\n 8 005930.KS 2000-01-13  5600  5740  5560  5710 41190000    4321.\n 9 005930.KS 2000-01-14  5720  5880  5680  5830 49375000    4412.\n10 005930.KS 2000-01-17  6000  6180  5920  6100 63505000    4616.\n# … with 5,680 more rows\n\n\n\n주가 시각화\n엔비디아 주가 데이터(조정가)로 간단히 그래프를 그려보겠습니다.\n\nNV_prices <- tq_get(\"NVDA\",\n                    get = \"stock.prices\",\n                    from = \"2000-01-01\",\n                    to = \"2022-08-31\")\n\nggplot(NV_prices) +\n  geom_line(aes(date, adjusted), color = \"black\") +\n  theme_minimal()\n\n\n\n\n\n이번엔 삼성전자 주가 데이터로 그래프를 그려보겠습니다. 이번에는 최고가도 표시해봤습니다.\n\nlibrary(scales)\n\nSE_prices <- tq_get(\"005930.KS\",\n                    get = \"stock.prices\",\n                    from = \"2000-01-01\",\n                    to = \"2022-08-31\")\n\nggplot(SE_prices) +\n  geom_line(aes(date, adjusted), color = \"black\") +\n  geom_point(data = subset(SE_prices, adjusted == max(adjusted)), \n             aes(date, adjusted), color = \"red\") +\n  geom_text(data = subset(SE_prices, adjusted == max(adjusted)),\n             aes(date - 500, adjusted, label = scales::comma(adjusted)))+\n  scale_y_continuous(labels = comma) +\n  theme_minimal()"
  },
  {
    "objectID": "daily.html",
    "href": "daily.html",
    "title": "Daily Function",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\nReading Time\n\n\n\n\n\n\n2022/10/06\n\n\nenframe() : Convert vectors to data frames\n\n\n벡터를 데이터프레임으로 바꾸고 싶을 때\n\n\n0 min\n\n\n\n\n2022/10/05\n\n\nsay() : Print messages with various animals\n\n\n아스키 아트와 함께 메시지를 출력하고 싶을 때\n\n\n0 min\n\n\n\n\n2022/10/04\n\n\njsonedit() : Provide a interactive view of lists\n\n\njson 파일의 구조를 한 눈에 보고 싶을 때\n\n\n0 min\n\n\n\n\n2022/10/03\n\n\nunnest() : Flatten back out into regular columns\n\n\n중첩된 데이터프레임을 풀 때\n\n\n2 min\n\n\n\n\n2022/10/02\n\n\nnest() : Create a list-column of data frames\n\n\n데이터프레임을 중첩시킬 때\n\n\n1 min\n\n\n\n\n2022/10/01\n\n\npull() : Extract a single column\n\n\n$ 연산자와 비슷한 함수\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "daily/211001/index.html",
    "href": "daily/211001/index.html",
    "title": "pull() : Extract a single column",
    "section": "",
    "text": "오늘의 함수는 dplyr 패키지의 pull() 함수입니다. pull() 함수는 $ 연산자와 비슷한 기능을 합니다. $ 연산자는 R에서 데이터 객체의 특정 부분을 추출할 때 사용하는데요. pull() 함수는 파이프 연산자 내에서 $보다 사용하기 편리하다는 장점이 있습니다.\n\n\n\npull(.data, var = -1, name = NULL, ...)\n\n\n\n.data : data.frame, tibble을 넣을 수 있습니다. 거기에 dbplyr, dtplyr package의 data.table backend도 가능합니다. var : 추출할 변수의 이름을 넣습니다. 숫자도 가능한데 양수는 왼쪽부터 순서, 음수는 오른쪽부터 순서를 나타냅니다. name : 변수 이름을 알 경우엔 name이라는 파라미터를 써도 됩니다.\n\n\n입력한 데이터와 동일한 사이즈의 vector가 나옵니다.\n\n\n\nlibrary(dplyr)\n\n# mtcars 데이터를 가지고 pull() 함수의 예를 들어보겠습니다.\n# mtcars 데이터의 구조는 이러합니다.\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n# -1을 입력하면 mtcars 데이터의 맨 오른쪽 칼럼인 carb가 나옵니다\nmtcars |> pull(-1)\n\n [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2\n\n# 칼럼 명 'carb'을 바로 써도 같은 결과가 나옵니다\nmtcars |> pull(carb)\n\n [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2\n\n\n\n\ndplyr에 있는 또다른 비슷한 함수인 select와의 차이점은 뭘까요? 일단 결과 값이 다릅니다.  pull은 단일 열을 벡터로 변환해 결과로 내보냅니다. 반면 select는 하나 이상의 열을 데이터프레임으로 변환하죠.\n\nfruits <- data.frame(orange = 1:5, lemon = 5:1)\n\n# select를 써서 orange 열(1개의 열)을 가져오면 data.frame이 나옵니다\nfruits |> select(orange) |>str()\n\n'data.frame':   5 obs. of  1 variable:\n $ orange: int  1 2 3 4 5\n\n# 이번엔 pull을 이용하면 int value가 들어간 벡터가 나옵니다\nfruits |> pull(orange) |> str()\n\n int [1:5] 1 2 3 4 5\n\n# data.frame에서 pull과 의미가 동일한 함수 -> .[, \"name\"]\nfruits %>% .[ , \"orange\"] %>% str()\n\n int [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "daily/211001/index.html#deep-select-vs-pull의-차이는",
    "href": "daily/211001/index.html#deep-select-vs-pull의-차이는",
    "title": "pull()",
    "section": "[Deep] select vs pull의 차이는?",
    "text": "[Deep] select vs pull의 차이는?\ndplyr에 있는 또다른 비슷한 함수인 select와의 차이점은 뭘까? 일단 결과 값이 다르다. pull은 단일 열을 벡터로 변환해 결과로 내보냄 반면 select는 하나 이상의 열을 데이터프레임으로 변환\n\nfruits <- data.frame(orange = 1:5, lemon = 5:1)\n\n# select를 써서 orange 열(1개의 열)을 가져오면\nfruits |> select(orange) |>str()\n\n'data.frame':   5 obs. of  1 variable:\n $ orange: int  1 2 3 4 5\n\n# 이번엔 pull을 이용\nfruits |> pull(orange) |> str()\n\n int [1:5] 1 2 3 4 5\n\n# data.frame에서 pull과 의미가 동일한 함수 -> .[, \"name\"\\\n# .를 써야하니 %>% 연산자를 사용하겠음\nfruits %>% .[ , \"orange\"] %>% str()\n\n int [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "daily/211002/index.html",
    "href": "daily/211002/index.html",
    "title": "nest() : Create a list-column of data frames",
    "section": "",
    "text": "오늘의 함수는 tidyr 패키지의 nest() 함수입니다. nest() 함수는 데이터프레임을 중첩시킬 때 사용합니다.  중첩(nest)된 데이터프레임은 하나 이상의 열이 리스트인 데이터프레임을 의미합니다. \n\n\n\nnest(.data, ..., names_sep = NULL, .key = deprecated())\n\n\n\n.data : data.frame, tibble을 넣을 수 있습니다. … : 중첩될 칼럼을 입력합니다. tidy-select expression을 활용해 선택 가능합니다. name_sep : 중첩될 칼럼의 이름을 정합니다. NULL(기본값)일 경우엔 기존 이름이 그래도 유지됩니다. .key : 예전 버전의 nest 함수에서 사용한 영역(중첩될 칼럼의 이름 설정)으로 현재 문법에서는 사용하지 않습니다.\n\n\n\nlibrary(tidyverse)\n\n# tibble 함수를 통해 중첩된 tibble을 만들어보겠습니다.\n# g와 data라는 2개의 열의 tibble이지만 data 열은 리스트의 형태입니다.\ndf1 <- tibble(\n  g = c(1, 2, 3),\n  data = list(\n    tibble(x = 1, y = 2),\n    tibble(x = 4:5, y = 6:7),\n    tibble(x = 10)\n  )\n)\n\ndf1\n\n# A tibble: 3 × 2\n      g data            \n  <dbl> <list>          \n1     1 <tibble [1 × 2]>\n2     2 <tibble [2 × 2]>\n3     3 <tibble [1 × 1]>\n\n# 이번엔 nest 함수를 통해 중첩된 tibble을 만들어보겠습니다.\ndf2 <- tribble(\n  ~g, ~x, ~y,\n   1,  1,  2,\n   2,  4,  6,\n   2,  5,  7,\n   3, 10, NA\n)\n\ndf2 |> nest(data = c(x, y))\n\n# A tibble: 3 × 2\n      g data            \n  <dbl> <list>          \n1     1 <tibble [1 × 2]>\n2     2 <tibble [2 × 2]>\n3     3 <tibble [1 × 2]>\n\n# tidy-select argument를 이용해서 데이터를 선택할 수도 있습니다.\ndf2 |> nest(data = any_of(c(\"x\", \"y\")))\n\n# A tibble: 3 × 2\n      g data            \n  <dbl> <list>          \n1     1 <tibble [1 × 2]>\n2     2 <tibble [2 × 2]>\n3     3 <tibble [1 × 2]>\n\ndf2 |> nest(data = !g)\n\n# A tibble: 3 × 2\n      g data            \n  <dbl> <list>          \n1     1 <tibble [1 × 2]>\n2     2 <tibble [2 × 2]>\n3     3 <tibble [1 × 2]>\n\n\nnest() 함수에는 중첩될 변수를 지정합니다. any_of(), starts_with() 등 tidy_select argument를 이용해서도 지정 가능합니다.  g를 기준으로 x와 y를 중첩하는 형태이기때문에 nest() 함수에 c(x, y)를 입력했습니다.\n\n\ndplyr::group_by()를 이용하는 것도 방법입니다.  중첩될 변수를 지정하는 것보다 group_by()를 이용해 중첩시키는 게 직관적입니다. \n\nlibrary(dplyr)\n\ndf2 |> group_by(g) |> nest()\n\n# A tibble: 3 × 2\n# Groups:   g [3]\n      g data            \n  <dbl> <list>          \n1     1 <tibble [1 × 2]>\n2     2 <tibble [2 × 2]>\n3     3 <tibble [1 × 2]>\n\n# group_by + nest = group_nest\n# dplyr 패키지의 group_nest는 tibble을 중첩할 때 두 과정을 한번에 처리합니다.\ndf2 |> group_nest(g)\n\n# A tibble: 3 × 2\n      g               data\n  <dbl> <list<tibble[,2]>>\n1     1            [1 × 2]\n2     2            [2 × 2]\n3     3            [1 × 2]\n\n# 중첩된 데이터프레임을 만들어서 각각의 그룹에 따라 모델을 만들고, 예측 list도 생성할 수 있습니다.\nmtcars_nested <- mtcars |>\n  group_by(cyl) |>\n  nest()\n\nmtcars_nested\n\n# A tibble: 3 × 2\n# Groups:   cyl [3]\n    cyl data              \n  <dbl> <list>            \n1     6 <tibble [7 × 10]> \n2     4 <tibble [11 × 10]>\n3     8 <tibble [14 × 10]>\n\n# lm 모델 생성\nmtcars_nested <- mtcars_nested |>\n  mutate(model = map(data, function(df) lm(mpg ~ wt, data = df)))\n\nmtcars_nested\n\n# A tibble: 3 × 3\n# Groups:   cyl [3]\n    cyl data               model \n  <dbl> <list>             <list>\n1     6 <tibble [7 × 10]>  <lm>  \n2     4 <tibble [11 × 10]> <lm>  \n3     8 <tibble [14 × 10]> <lm>  \n\n# 만들어진 모델을 통해 예측값을 계산해봅니다.\nmtcars_nested <- mtcars_nested |>\n  mutate(model = map(model, predict))\n\nmtcars_nested\n\n# A tibble: 3 × 3\n# Groups:   cyl [3]\n    cyl data               model     \n  <dbl> <list>             <list>    \n1     6 <tibble [7 × 10]>  <dbl [7]> \n2     4 <tibble [11 × 10]> <dbl [11]>\n3     8 <tibble [14 × 10]> <dbl [14]>"
  },
  {
    "objectID": "daily/211003/index.html",
    "href": "daily/211003/index.html",
    "title": "unnest() : Flatten back out into regular columns",
    "section": "",
    "text": "오늘의 함수는 tidyr 패키지의 unnest() 함수입니다. \nunnest() 함수는 중첩된 데이터프레임을 풀 때 사용합니다.\n\n\n\nunnest(\n  data,\n  cols,\n  ...,\n  keep_empty = FALSE,\n  ptype = NULL,\n  names_sep = NULL,\n  names_repair = \"check_unique\",\n  .drop = deprecated(),\n  .id = deprecated(),\n  .sep = deprecated(),\n  .preserve = deprecated()\n)\n\n\n\ndata : data.frame, tibble을 넣을 수 있습니다. col : 중첩된 상태를 해제할 칼럼을 입력합니다. tidy-select expression을 활용해 선택 가능합니다. keep_empty : 기본적으로 unnest() 함수는 각 요소별로 하나의 출력 행을 가져옵니다. NULL값이나 비어있는 경우엔 해당 행이 출력에서 삭제됩니다. 모든 행을 출력하려면 keep_empty = TRUE로 표시해야 합니다. name_sep : 풀어지는 칼럼의 이름을 정합니다. NULL(기본값)일 경우엔 기존 이름이 그래도 유지됩니다. names_repair : 출력되는 데이터프레임에 유효한 이름이 있는지 확인하는 데 사용합니다.\n\n\n\nlibrary(tidyverse)\n\n# tibble 함수를 통해 중첩된 tibble을 만들어보겠습니다.\ndf1 <- tibble(\n  x = 1:3,\n  y = list(\n    NULL,\n    tibble(a = 1, b = 2),\n    tibble(a = 1:3, b = 3:1)\n  )\n)\n\ndf1\n\n# A tibble: 3 × 2\n      x y               \n  <int> <list>          \n1     1 <NULL>          \n2     2 <tibble [1 × 2]>\n3     3 <tibble [3 × 2]>\n\n# unnest 함수를 통해 중첩된 tibble을 unnest 해보겠습니다.\ndf1 |> unnest(y)\n\n# A tibble: 4 × 3\n      x     a     b\n  <int> <dbl> <dbl>\n1     2     1     2\n2     3     1     3\n3     3     2     2\n4     3     3     1\n\n# keep_empty = TRUE로 처리할 경우 NULL값이 들어있던 1행도 출력됩니다.\ndf1 |> unnest(y, keep_empty = TRUE)\n\n# A tibble: 5 × 3\n      x     a     b\n  <int> <dbl> <dbl>\n1     1    NA    NA\n2     2     1     2\n3     3     1     3\n4     3     2     2\n5     3     3     1\n\n\n\n\n이번에는 unnest() 함수를 통해 중첩을 푸는 과정에서 칼럼의 이름이 어떻게 결정되는지 확인해보겠습니다. palmerpenguins 패키지에 있는 펭귄 데이터를 불러와 종별로 총 4가지의 데이터(펭귄의 부리 길이, 깊이, 물갈퀴 길이, 몸무게)의 분위값을 정리해보겠습니다.\n\nlibrary(palmerpenguins)\n\npenguins |> \n  select(c(species, bill_depth_mm, bill_length_mm, flipper_length_mm, body_mass_g)) |>\n  group_by(species) |>\n  summarise_all(.funs = function(x) list(enframe(\n    quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE))))\n\n# A tibble: 3 × 5\n  species   bill_depth_mm    bill_length_mm   flipper_length_mm body_mass_g     \n  <fct>     <list>           <list>           <list>            <list>          \n1 Adelie    <tibble [3 × 2]> <tibble [3 × 2]> <tibble [3 × 2]>  <tibble [3 × 2]>\n2 Chinstrap <tibble [3 × 2]> <tibble [3 × 2]> <tibble [3 × 2]>  <tibble [3 × 2]>\n3 Gentoo    <tibble [3 × 2]> <tibble [3 × 2]> <tibble [3 × 2]>  <tibble [3 × 2]>\n\n\n펭귄 종 별로 4가지 데이터에 대한 분위값이 각각 tibble 형태로 담겨 있습니다. 이걸 unnest() 함수를 통해 풀어보겠습니다.\n\npenguins |> \n  select(c(species, bill_depth_mm, bill_length_mm, flipper_length_mm, body_mass_g)) |>\n  group_by(species) |>\n  summarise_all(.funs = function(x) list(enframe(\n    quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)))) |>\n  unnest()\n\n# A tibble: 9 × 9\n  species   name  value name1 value1 name2 value2 name3 value3\n  <fct>     <chr> <dbl> <chr>  <dbl> <chr>  <dbl> <chr>  <dbl>\n1 Adelie    25%    17.5 25%     36.8 25%      186 25%    3350 \n2 Adelie    50%    18.4 50%     38.8 50%      190 50%    3700 \n3 Adelie    75%    19   75%     40.8 75%      195 75%    4000 \n4 Chinstrap 25%    17.5 25%     46.3 25%      191 25%    3488.\n5 Chinstrap 50%    18.4 50%     49.6 50%      196 50%    3700 \n6 Chinstrap 75%    19.4 75%     51.1 75%      201 75%    3950 \n7 Gentoo    25%    14.2 25%     45.3 25%      212 25%    4700 \n8 Gentoo    50%    15   50%     47.3 50%      216 50%    5000 \n9 Gentoo    75%    15.7 75%     49.6 75%      221 75%    5500 \n\n\n문제가 발생했습니다. 중첩이 풀린 데이터의 칼럼이 모두 name과 value로 표시되어 구분할 수 없게 되었습니다. 이럴때 사용하는 게 바로 names_repair와 names_sep입니다. 우선 names_repair는 check_unique가 기본값으로 되어 있습니다. 겹치는 변수가 없도록 name, name2, name3 같은 고유의 이름을 부여해주죠. 하지만 우리는 각 칼럼이 어떤 데이터인지 이름을 알고 싶습니다. 이럴 땐 name_sep을 사용합니다. 구분자를 무엇으로 할 지 설정해주면 해당 칼럼과 구분자를 합쳐서 칼럼명을 부여해줍니다.\n\n# names_sep = \"_\" 입력\npenguins |> \n  select(c(species, bill_depth_mm, bill_length_mm, flipper_length_mm, body_mass_g)) |>\n  group_by(species) |>\n  summarise_all(.funs = function(x) list(enframe(\n    quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)))) |>\n  unnest(names_sep = \"_\")\n\n# A tibble: 9 × 9\n  species   bill_depth…¹ bill_…² bill_…³ bill_…⁴ flipp…⁵ flipp…⁶ body_…⁷ body_…⁸\n  <fct>     <chr>          <dbl> <chr>     <dbl> <chr>     <dbl> <chr>     <dbl>\n1 Adelie    25%             17.5 25%        36.8 25%         186 25%       3350 \n2 Adelie    50%             18.4 50%        38.8 50%         190 50%       3700 \n3 Adelie    75%             19   75%        40.8 75%         195 75%       4000 \n4 Chinstrap 25%             17.5 25%        46.3 25%         191 25%       3488.\n5 Chinstrap 50%             18.4 50%        49.6 50%         196 50%       3700 \n6 Chinstrap 75%             19.4 75%        51.1 75%         201 75%       3950 \n7 Gentoo    25%             14.2 25%        45.3 25%         212 25%       4700 \n8 Gentoo    50%             15   50%        47.3 50%         216 50%       5000 \n9 Gentoo    75%             15.7 75%        49.6 75%         221 75%       5500 \n# … with abbreviated variable names ¹​bill_depth_mm_name, ²​bill_depth_mm_value,\n#   ³​bill_length_mm_name, ⁴​bill_length_mm_value, ⁵​flipper_length_mm_name,\n#   ⁶​flipper_length_mm_value, ⁷​body_mass_g_name, ⁸​body_mass_g_value\n\n\n\n\n리스트와 리스트가 중첩된 복잡한 데이터프레임을 풀려면 unnest() 함수를 두 번 사용하면 됩니다. 복잡하게 중첩된 데이터라면 hoist(), unnest_wider(), unnest_longer() 함수를 사용하면 좋습니다. 위 3개의 함수는 이른바 rectangling 작업에 사용되는 함수인데 이 녀석들은 나중에 따로 정리해보겠습니다.\n\ndf2 <- tibble(\n  a = list(c(\"a\", \"b\"), \"c\"),\n  b = list(1:2, 3),\n  c = c(11, 22)\n)\n\ndf2\n\n# A tibble: 2 × 3\n  a         b             c\n  <list>    <list>    <dbl>\n1 <chr [2]> <int [2]>    11\n2 <chr [1]> <dbl [1]>    22\n\n# unnest를 이용해 동시에 여러 열의 중첩을 해제할 수 있습니다.\ndf2 |> unnest(c(a, b))\n\n# A tibble: 3 × 3\n  a         b     c\n  <chr> <dbl> <dbl>\n1 a         1    11\n2 b         2    11\n3 c         3    22\n\n# 단계적으로 중첩을 해제하면 다음과 같은 결과를 얻습니다.\ndf2 |> unnest(a) |> unnest(b)\n\n# A tibble: 5 × 3\n  a         b     c\n  <chr> <dbl> <dbl>\n1 a         1    11\n2 a         2    11\n3 b         1    11\n4 b         2    11\n5 c         3    22"
  },
  {
    "objectID": "orange.html",
    "href": "orange.html",
    "title": "오렌지 맨숀",
    "section": "",
    "text": "귤 향 가득한, 오렌지 맨숀입니다."
  },
  {
    "objectID": "daily/211004/index.html",
    "href": "daily/211004/index.html",
    "title": "jsonedit() : Provide a interactive view of lists",
    "section": "",
    "text": "오늘의 함수는 listviewer 패키지의 jsonedit() 함수입니다. listviewer 패키지는 list 형태의 데이터를 인터랙티브 페이지에서 수정할 수 있는 함수들을 제공합니다. 그 중 하나인 jsonedit() 함수를 살펴보도록 하겠습니다.\n\n\n\njsonedit(listdata = NULL, \n         mode = \"tree\", \n         modes = c(\"code\", \"form\", \"text\", \"tree\", \"view\"),\n         ..., \n         width = NULL, \n         height = NULL,\n         elementId = NULL)\n\n\n\nlistdata : 확인할 list, string 데이터를 넣습니다. list를 위한 함수이지만 다른 형태의 데이터도 JSON으로 변환되기 때문에 데이터프레임을 넣어도 사실 상관없습니다 mode : 인터랙티브 페이지에 처음으로 뜨는 mode를 설정합니다. 기본값은 tree입니다.\n\n\n\nlibrary(tibble)\nlibrary(listviewer)\n\n# tibble 함수를 통해 중첩된 tibble을 만들어보겠습니다.\ndf1 <- tibble(\n  x = 1:3,\n  y = list(\n    NULL,\n    tibble(a = 1, b = 2),\n    tibble(a = 1:3, b = 3:1)\n  )\n)\n\n# jsonedit 함수로 df1 살펴보기\njsonedit(df1)\n\n\n\n\n# data.frame도 jsonedit 함수에 입력이 가능합니다\njsonedit(mtcars)"
  },
  {
    "objectID": "daily/211005/index.html",
    "href": "daily/211005/index.html",
    "title": "say() : Print messages with various animals",
    "section": "",
    "text": "오늘의 함수는 cowsay 패키지의 say() 함수입니다. 패키지 이름에서 알 수 있듯 say() 함수를 사용하면 소를 비롯한 여러 동물들의 아스키 아트로 텍스트를 출력할 수 있습니다. 아스키 아트는 텍스트와 특수문자만을 이용해서 그림을 표현하는 것을 말합니다.\n\n\n\nsay(what = \"Hello world!\",\n    by = \"cat\",\n    type = NULL,\n    what_color = NULL,\n    by_color = NULL,\n    length = 18,\n    fortune = NULL,\n    ...\n)\n\n\n\nwhat : 출력하고 싶은 말을 넣으세요 by : 어떤 동물이 말을 하도록 하고 싶나요? type : message(기본값), warning, print, string 등 출력 타입을 선택합니다 what_color : 출력할 말의 색깔을 정합니다 by_color : 동물의 색깔을 정합니다 length : 만일 longcat을 선택했다면 longcat의 길이를 정해주세요\n\n\n\nlibrary(cowsay)\n\n# 닭이 꼬끼오하고 울게 해보겠습니다.\nsay(\"꼬끼오\", by = \"chicken\")\n\n\n ----- \n꼬끼오 \n ------ \n    \\   \n     \\\n         _\n       _/ }\n      `>' \\\n      `|   \\\n       |   /'-.     .-.\n        \\'     ';`--' .'\n         \\'.    `'-./\n          '.`-..-;`\n            `;-..'\n            _| _|\n            /` /` [nosig]\n  \n\n# cowsay 패키지에서 제공해주는 아스키아트는 총 44마리입니다.\nsort(names(animals))\n\n [1] \"ant\"          \"anxiouscat\"   \"bat\"          \"bat2\"         \"behindcat\"   \n [6] \"bigcat\"       \"buffalo\"      \"cat\"          \"chicken\"      \"chuck\"       \n[11] \"clippy\"       \"cow\"          \"daemon\"       \"duck\"         \"duckling\"    \n[16] \"egret\"        \"endlesshorse\" \"facecat\"      \"fish\"         \"frog\"        \n[21] \"ghost\"        \"grumpycat\"    \"hypnotoad\"    \"longcat\"      \"longtailcat\" \n[26] \"monkey\"       \"mushroom\"     \"owl\"          \"pig\"          \"poop\"        \n[31] \"pumpkin\"      \"rabbit\"       \"shark\"        \"shortcat\"     \"signbunny\"   \n[36] \"smallcat\"     \"snowman\"      \"spider\"       \"squirrel\"     \"squirrel2\"   \n[41] \"stretchycat\"  \"trilobite\"    \"turkey\"       \"yoda\"        \n\n# 아스키아트에는 cat()함수를 이용해 접근할 수 있습니다.\n# 호박 아스키아트에 접근해보죠.\npumpkin <- animals[[\"pumpkin\"]]\ncat(pumpkin)\n\n\n ----- \n%s \n ------ \n    \\   \n     \\\n                  ___\n               ___)__|_\n          .-*'          '*-,\n         /      /|   |\\     \\\n        ;      /_|   |_\\     ;\n        ;   |\\           /|  ;\n        ;   | ''--...--'' |  ;\n         \\  ''---.....--''  /\n          ''*-.,_______,.-*'  [nosig]\n  \n\n# longcat에게 말을 시킨다면 longcat의 길이도 정해주세요\nsay(what = \"음메\",\n    by = \"longcat\",\n    length = \"20\")\n\n\n ----- \n음메 \n ------ \n    \\   \n     \\\n    .ﾊ,,ﾊ\n    ( ﾟωﾟ)\n    |つ  つ\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    U \"  U\n        [BoingBoing]"
  },
  {
    "objectID": "daily/211006/index.html",
    "href": "daily/211006/index.html",
    "title": "enframe() : Convert vectors to data frames",
    "section": "",
    "text": "오늘의 함수는 tibble 패키지의 enframe() 함수입니다. enframe() 함수는 atomic vector나 리스트를 1개 혹은 2개의 칼럼을 가진 데이터프레임으로 만들어줍니다. 리스트를 enframe() 함수에 넣고 돌리면 중첩된 tibble이 나옵니다. 만일 2개의 칼럼의 데이터프레임을 vector 혹은 리스트로 변환하고 싶으면 deframe() 함수를 사용하면 됩니다.\n\n\n\nenframe(x, name = \"name\", value = \"value\")\n\ndeframe(x)\n\n\n\nx : enframe() 함수에는 벡터가, deframe() 함수에는 1~2열 짜리 데이터프레임이 들어갑니다 name, value : name과 value로 지정하고 싶은 텍스트를 입력합니다. 만약 name이 NULL이라면 1열의 데이터프레임이 출력됩니다.\n\n\n\nlibrary(tibble)\n\n# 1부터 3까지 Unnamed Numeric vector를 enframe에 넣으면\nenframe(1:3)\n\n# A tibble: 3 × 2\n   name value\n  <int> <int>\n1     1     1\n2     2     2\n3     3     3\n\n# 이번엔 Named Numeric vector를 입력해봅니다\nenframe(c(a = 1, b = 2, c = 3))\n\n# A tibble: 3 × 2\n  name  value\n  <chr> <dbl>\n1 a         1\n2 b         2\n3 c         3\n\n# list를 입력하면 중첩된 tibble이 나옵니다\nlist_example <- list(\n  a = 1,\n  b = \"orange\",\n  c = 2:3,\n  d = c(delta = 4)\n)\n\nenframe(list_example)\n\n# A tibble: 4 × 2\n  name  value    \n  <chr> <list>   \n1 a     <dbl [1]>\n2 b     <chr [1]>\n3 c     <int [2]>\n4 d     <dbl [1]>\n\n# deframe은 1~2개의 칼럼을 가지고 있는 데이터프레임만 사용가능합니다\ndeframe(enframe(3:1))\n\n1 2 3 \n3 2 1 \n\ndeframe(tibble(a = as.list(1:3)))\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3"
  }
]