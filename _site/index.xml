<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>오렌지 맨숀🍊</title>
<link>https://orange-mansion.com/index.html</link>
<atom:link href="https://orange-mansion.com/index.xml" rel="self" type="application/rss+xml"/>
<description>귤 향 가득한, 오렌지 맨숀입니다.</description>
<generator>quarto-1.2.313</generator>
<lastBuildDate>Thu, 16 Mar 2023 15:00:00 GMT</lastBuildDate>
<item>
  <title>그래프 데이터로 풀 수 있는 문제</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/230317_GNN_intro_2/index.html</link>
  <description><![CDATA[ 




<section id="what-types-of-problems-have-graph-structured-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="what-types-of-problems-have-graph-structured-data">What types of problems have graph structured data?</h3>
<p>앞에서 <a href="https://orange-mansion.com/posts/230316_gnn_intro_1/">Part 1</a>에서는 그래프의 몇몇 사례를 설명했습니다. 이런 데이터를 활용해서 어떤 작업을 수행할 수 있을까요? 그래프에 대한 예측 작업을 크게 3가지 레벨로 나눌 수 있습니다. 그래프 수준, Node 수준, Edge 수준 이렇게 말이죠.</p>
<p>그래프 수준에서는 전체 그래프에 대해서 단일 속성을 예측합니다. Node 수준에서는 각 Node가 가지고 있는 일부 속성을 예측합니다. Edge 수준에서는 그래프에서 Edge 속성은 어떠한지, 또는 Edge가 존재하는지 여부를 예측합니다. 이 세 가지 수준의 예측 문제는 단일 모델 클래스인 GNN으로 다 해결할 수 있습니다. 먼저 세 가지 수준 별로 구체적인 예시를 통해 조금 더 자세히 살펴보도록 하겠습니다.</p>
<p><br></p>
<section id="graph-level-task" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="graph-level-task">Graph-level task</h4>
<p>그래프 수준에서의 목표는 전체 그래프의 속성을 예측하는 것입니다. 예를 들면 분자식을 그래프로 표현한 경우에, 분자가 어떤 냄새를 풍기는지 혹은 질병과 관련된 수용체에 결합할지를 예측할 수 있죠.</p>
<div class="column-body-outset">
<p><img src="https://orange-mansion.com/posts/230317_GNN_intro_2/graph-level-task.png" class="img-fluid" style="width:100.0%"></p>
</div>
<p>이러한 접근방식은 라벨을 이미지에 연결하는 MNIST, CIFAR의 이미지 분류 문제와 비슷합니다. 텍스트 데이터로 보자면, 전체 문장의 분위기나 감정을 파악하는 이른바 감정 분석이 비슷한 접근이라고 할 수 있을 겁니다.</p>
<p><br></p>
</section>
<section id="node-level-task" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="node-level-task">Node-level task</h4>
<p>Node 수준의 예측 작업은 하나의 그래프 안에서 각 Node의 특성이나 역할을 예측하는 게 주목적입니다.</p>
<p>Node 수준 예측 문제의 대표적인 예는 ’재커리 가라테 클럽 데이터’입니다. 제커리 가라테 클럽 데이터는 클럽 내 정치적 불화로 클럽이 둘로 갈라지면서, 한 곳에만 충성을 맹세한 사람들로 구성된 소셜 네트워크 그래프입니다. 조금 더 스토리를 설명하자면 가라테 강사 Mr.&nbsp;Hi와 관리자 John A 사이에 불화가 생겨 가라테 클럽이 분열됩니다. 회원의 절반 가량이 Mr.&nbsp;Hi를 중심으로 새로운 가라테 클럽을 결성하게 되죠.</p>
<p>여튼 그래프에서 Node는 개별 가라테 수련생을 나타내고, Edge는 가라테 클럽 밖에서의 회원들 간의 상호 작용을 나타냅니다. 여기서 예측문제는 불화 이후 특정 회원이 Mr.&nbsp;Hi와 John A 중 어느 쪽에 충성하게 될지 분류하는 거죠. 이 경우 특정 Node와 Mr.&nbsp;Hi와의 거리, 혹은 John A와의 거리는 충성도와 높은 상관관계가 있습니다.</p>
<div class="column-body-outset">
<p><img src="https://orange-mansion.com/posts/230317_GNN_intro_2/node-level-task.png" class="img-fluid"></p>
</div>
<p>이미지 분석에 비유를 해보자면, Node 수준의 예측 문제는 이미지 안에서 각 픽셀의 역할에 레이블을 지정하는 이미지 분할(image segmentation)과 유사한 접근입니다. 텍스트 분석에서는 문장 안에서 각 단어의 품사를 예측하는 것과 비슷하죠.</p>
<p><br></p>
</section>
<section id="edge-level-task" class="level4">
<h4 class="anchored" data-anchor-id="edge-level-task">Edge-level task</h4>
<p>마지막으로 남은 예측 문제는 Edge 예측입니다.</p>
<p>Edge 수준의 예측의 한 가지 예는 이미지 장면 이해(Image scene understanding)입니다. 딥러닝 모델은 이미지에서 객체를 식별하는 것 외에도 객체 간의 관계를 예측하는 데 사용할 수 있습니다. 이를 Edge 수준 분류라고 표현할 수 있죠. 이미지의 객체(Node)들이 주어지면 Node 가운데 어떤 Node가 Edge를 서로 공유하는지, 혹은 그 Edge의 값이 무엇인지 예측합니다. 각 개체 간의 연결을 발견하기 위해선 그래프를 완전 그래프(Complete graph, 모든 Node간에 Edge가 존재하는 그래프)로 설정한 뒤 예측된 값에 따라 Edge를 잘라내면서 희소 그래프(Sparse graph, Node 개수보다 Edge 개수가 적은 그래프)에 도달할 수 있습니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://orange-mansion.com/posts/230317_GNN_intro_2/edge-level-task.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">원본 이미지에서 각 선수, 심판, 관중, 매트 등 5개의 엔티티(Entities)로 세분화해 그들 사이의 관계를 표현해봅니다</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://orange-mansion.com/posts/230317_GNN_intro_2/edges_level_diagram.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">왼쪽에는 엔티티 구분 전에 구축된 초기 그래프가 있습니다. 오른쪽은 Edge 라벨링된 결과 그래프입니다.</figcaption><p></p>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="the-challenges-of-using-graphs-in-machine-learning" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-challenges-of-using-graphs-in-machine-learning">The challenges of using graphs in machine learning</h3>
<p>그렇다면 신경망을 통해 위에서 살펴본 다양한 그래프 작업을 해결하려면 어떻게 해야 할까요? 가장 먼저 해야 할 건 신경망과 호환되도록 그래프를 어떻게 표현할지 생각하는 겁니다.</p>
<p>머신러닝 모델은 일반적으로 직사각형이나 격자모양의 배열을 input 값으로 받습니다. 따라서 이를 딥러닝과 호환되는 형식으로 표현하는 방법은 직관적이지 않을 수 있습니다. 그래프에는 Node, Edge, 글로벌 컨텍스트, 연결성 등 예측에 잠재적으로 사용할 수 있는 4개의 정보가 있습니다. 앞의 3개는 비교적 간단합니다. 예를 들어서 Node의 경우 각각의 Node에 인덱스 <img src="https://latex.codecogs.com/png.latex?i">를 할당하고 <img src="https://latex.codecogs.com/png.latex?node_i">의 특징을 Node 특징 행렬(Node feature matrix) <img src="https://latex.codecogs.com/png.latex?N">에 넣을 수 있을 겁니다. 이러한 행렬에는 다양한 예가 있지만 특별한 기술이 들어갈 필요 없이 처리할 수 있습니다.</p>
<p>하지만 그래프의 연결성을 표현하는 건 복잡합니다. 아마도 가장 확실한 방법은 쉽게 텐서화(Tensorisable)할 수 있는 인접 행렬을 사용하는 것일 겁니다. 하지만 이 방법은 몇 가지 단점이 있습니다. 어떤 그래프의 Node 수는 수백만 개에 달할 수 있습니다. 그리고 Node별 Edge 수는 매우 가변적이죠. 이로 인해 인접 행렬은 희소 행렬(Sparse matrix)이 될 가능성이 높아 공간이 비효율적인 경우가 많습니다.</p>
<p>또 다른 문제는 동일한 연결성을 인코딩할 수 있는 인접 행렬이 많다는 겁니다. 동일한 연결성을 나타내지만 다른 모양의 인접 행렬이 심층 신경망에서 동일한 결과를 생성한다는 보장이 없죠. 즉 다시 말해 순열 불변(Permutation invariance, 입력 벡터 요소의 순서와 상관없이 같은 출력을 생성하는 특성)이 아니라는 겁니다. 예를 들어서 앞서 설명한 오셀로 그래프는 아래 두 인접 행렬로 표현할 수 있습니다.</p>
<p><img src="https://orange-mansion.com/posts/230317_GNN_intro_2/othello.png" class="img-fluid"></p>
<p><br></p>
<p>아래 예는 4개의 Node로 구성된 작은 그래프를 표현할 수 있는 모든 인접 행렬을 나타낸 겁니다. 인접행렬의 개수는 <img src="https://latex.codecogs.com/png.latex?4!%20=%2024">개로, 상당한 수가 나옵니다. 오셀로 그래프와 같이 더 큰 데이터에서는 인접 행렬의 수는 엄청나게 늘어날 겁니다.</p>
<div class="column-body-outset">
<p><img src="https://orange-mansion.com/posts/230317_GNN_intro_2/matrices.png" class="img-fluid" style="width:100.0%"></p>
</div>
<p>메모리 효율을 고려한다면 인접성 목록으로 희소 행렬(sparse matrices)을 표현할 수도 있습니다. 인접성 목록의 k번째 항목에는 Node <img src="https://latex.codecogs.com/png.latex?n_i">와 Node <img src="https://latex.codecogs.com/png.latex?n_j"> 사이의 Edge <img src="https://latex.codecogs.com/png.latex?e_k">의 연결성을 나타냅니다. 희소 행렬이니만큼 Edge 수가 행렬의 항목 수 <img src="https://latex.codecogs.com/png.latex?n%5E2_%7Bnodes%7D">) 보다 훨씬 적을 테고, 그만큼 그래프에서 연결되어 있지 않는 부분에 대한 계산과 저장을 피할 수 있습니다. 예시에서 본 그림에서는 Node, Edge, Global에 스칼라 값을 사용했지만, 대부분의 실제 텐서 표현에서는 그래프의 각 속성당 벡터를 사용합니다.</p>


</section>

 ]]></description>
  <category>GNN</category>
  <category>GRAPH</category>
  <category>TRANSLATION</category>
  <guid>https://orange-mansion.com/posts/230317_GNN_intro_2/index.html</guid>
  <pubDate>Thu, 16 Mar 2023 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/230317_GNN_intro_2/gnn_thumbnail.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>그래프는 세상 어디에나 있다</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/230316_GNN_intro_1/index.html</link>
  <description><![CDATA[ 




<section id="gnn-publication" class="level2">
<h2 class="anchored" data-anchor-id="gnn-publication">GNN Publication</h2>
<p>GNN 관련 내용을 공부하면서 찾게 된 좋은 간행물이나 논문 등을 번역 및 정리해서 올리려고 합니다. 그 첫 번째 순서로 지난 2021년 9월 2일 Distill에서 발행된 <a href="https://distill.pub/2021/gnn-intro/">&lt; A Gentle Introduction to Graph Neural Networks &gt;</a>입니다. 당시 Google Research 소속의 다섯 연구원이 작성한 글인데요, GNN 입문자에게 적당한 설명이 있는 것 같아 정리해 보았습니다.</p>
<p><br></p>
<section id="잠깐-distill" class="level4">
<h4 class="anchored" data-anchor-id="잠깐-distill">잠깐! Distill</h4>
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/distill.png" class="img-fluid" style="width:100.0%"></p>
<p>Distill은 2016년부터 2021년까지 운영된 머신러닝 관련 과학 저널입니다. Explanation, Interactive Articles, Visualization 등 기존의 과학 저널에서 표현하지 않던 스토리텔링을 담아 새로운 과학 출판물을 제작했죠. 저널이니만큼 투고도 가능했지만 그러려면 Distill Template에 맞춰서 제작해야 했습니다.</p>
<p>전통적인 과학 저작물을 넘어선, 새로운 과학 저널을 꿈꾸었던 Distill의 시도는 성공으로 이어지진 못했습니다. 기존 저널에서도 큰 반향을 일으키진 못했고, 논문을 작성하는 사람들이 Interactive 요소를 담아서 Distill의 Template을 맞추기도 어려웠죠. 결국 2021년 이후 Distill은 무기한 중단 중입니다.</p>
<p><br></p>
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/distill_logo.png" class="img-fluid" style="width:25.0%"></p>
<p>그렇다고 Distill이 사라진 건 아닙니다. R에서 이 Distill Template을 참조해 과학 및 기술 커뮤니케이션 용 Markdown을 만들었거든요. 이름하여 Distill for R Markdown, Distill package였죠. 과학, 기술 블로그를 만드는 데 도움을 준 Distill package는 지금은 Quarto의 Blog, Website Format으로 흡수되어 있습니다. 더 많은 사람들에게 과학 아티클을 이해하기 쉽게 표현하려 했던 Distill의 노력은 지금 이 Quarto 블로그에 남아있는 거죠.</p>
<p>헤어졌던 Distill을 다시 만나게 되어 이상한 기분이 들었는지 서두가 길었습니다. 본격적으로 <a href="https://distill.pub/2021/gnn-intro/">&lt; A Gentle Introduction to Graph Neural Networks &gt;</a>를 정리해 보겠습니다. Distill의 원 게시글은 D3를 활용한 Interacitve 요소가 풍부하게 담겨있으니 꼭 한번 살펴보세요.</p>
<p><br></p>
</section>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>그래프는 우리 주변에서 흔히 볼 수 있습니다. 현실에 있는 사물은 다른 사물과의 연결로 정의되는 경우가 많죠. 일련의 사물들과 사물들 간의 연결은 자연스럽게 그래프로 표현됩니다. 그래프 연구자들은 GNN(Graph neural networks, 그래프 신경망)을 10년 이상 개발해 왔습니다. 최근엔 기술 발전으로 그 기능과 표현력이 더욱 향상되었죠. GNN은 항균 물질의 발견, 물리학 시뮬레이션, 가짜 뉴스 탐지, 교통 예측 및 추천 시스템 등… 다양한 분야에서 적용되고 있습니다. 이 글에서는 최신<sup>1</sup> 그래프 신경망에 대해 살펴보고 설명하려고 합니다 이 글은 크게 네 파트로 나뉩니다.</p>
<blockquote class="blockquote">
<p>1.첫 번째 파트에서는 어떤 종류의 데이터가 가장 자연스럽게 그래프로 표현되는지, 일반적인 예시와 함께 살펴봅니다.</p>
<p>2.두 번째 파트에서는 그래프가 다른 유형의 데이터와는 어떻게 다른지, 그래프를 사용할 때 고려해야 하는 지점에 대해 살펴봅니다.</p>
<p>3.세 번째 파트에서는 그래프 분야의 역사적인 모델링 혁신부터 시작해 모델의 각 부분을 살펴보면서 최신 GNN 모델을 설계해 보겠습니다.</p>
<p>4.네 번째 파트에서는 실제 작업과 데이터 세트를 적용하면서 GNN 모델의 각 요소가 예측에 어떻게 기여하는지 살펴봅니다.</p>
</blockquote>
<p>먼저 그래프가 무엇인지부터 알아봅시다. 그래프는 엔티티(Nodes)들의 관계(Edges)를 나타냅니다. 그래프에는 세 타입의 속성이 존재합니다.</p>
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/graph.png" class="img-fluid"></p>
<p>V : Vertex(or Node) attributes, 정점 혹은 Node 속성</p>
<p>E : Edge(or Link) attributes and directions, Edge 혹은 Link 속성</p>
<p>U : Global (or Master node) attributes, 전역 혹은 Master Node 속성</p>
<p><br></p>
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/directed_undirected.png" class="img-fluid"></p>
<p>각각의 Node, Edge, 전체 그래프를 더 자세히 설명하기 위해 정보를 저장할 수도 있습니다. 또 Edge에 방향을 추가할 수도 있습니다. 그래프는 매우 우연한 데이터 구조입니다. 아직까지는 그래프가 약간은 추상적으로 느껴질 수 있지만 다음 섹션부터는 예시를 통해 구체적으로 설명해 보겠습니다.</p>
<p><br></p>
</section>
<section id="part-1.-graphs-and-where-to-find-them" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="part-1.-graphs-and-where-to-find-them">Part 1. Graphs and where to find them</h2>
<p>그래프의 형태라고 하면 아마도 SNS의 소셜 네트워크를 떠올리는 분이 계실지 모릅니다. 하지만 그래프는 매우 강력하고 일반적인 데이터 표현입니다. 지금부터는 그래프로 모델링할 수 없다고 생각하기 쉬운 이미지 데이터와 텍스트 데이터를 가지고 이야기해 보겠습니다. 이미지와 텍스트를 그래프 구조로 보면 이미지와 텍스트의 대칭성과 구조에 대해 더 많이 배울 수 있습니다. 또 나중에 설명할 다른 그래프 데이터를 이해하는 데에도 도움이 될 수 있어요.</p>
<p><br></p>
<section id="image-as-graphs" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="image-as-graphs">Image as graphs</h4>
<p>일반적으로 우리는 이미지 데이터를 처리할 때 이미지 채널<sup>2</sup>이 있는 직사각형 격자로 생각합니다. 그리고 244 X 244 X 3과 같이 배열(array)로 표현하죠. 이미지 데이터를 표현하는 다른 방법은 각각의 픽셀을 Node로 생각하고 인접한 픽셀 사이를 Edge로 연결하는 겁니다. 바로 그래프 구조죠. 이를테면 가장자리에 위치하지 않은 픽셀은 8개의 이웃 픽셀을 가질 겁니다. 그리고 픽셀의 RGB 값을 나타내는 3차원 vector는 각각의 Node에 저장될 거고요.</p>
<p>그래프의 연결을 시각화할 수 있는 방법 중 하나는 인접 행렬을 이용하는 것입니다. 아래 예에서는 웃는 얼굴의 픽셀 이미지(5X5)를 가지고 인접 행렬을 만들어봤습니다. 각각 25픽셀씩 Node를 정렬(0-0부터 4-4까지)하고, 두 Node가 연결되어 있는 경우 인접 행렬의 칸을 채웠습니다. 아래의 세 표현 방식은 모두 동일한 이미지를 표현한 방식입니다.</p>
<div class="column-body-outset">
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/image_as_graph.png" class="img-fluid"></p>
</div>
<p><br></p>
</section>
<section id="text-as-graphs" class="level4">
<h4 class="anchored" data-anchor-id="text-as-graphs">Text as graphs</h4>
<p>텍스트 데이터에서는 각각의 단어, 문자, 토큰<sup>3</sup>을 Node 삼아 연결해서 그래프화할 수 있습니다. 각각의 문자가 Node가 되고 Edge를 통해 그다음 Node로 연결되는 아주 간단한 방향성 그래프를 만들 수 있죠.</p>
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/text_as_graph.png" class="img-fluid"></p>
<p>참고로 이렇게 문자 토큰의 시퀀스로 표현하는 방법은 RNN에서 텍스트를 포현하는 방법입니다. 트랜스포머와 같은 다른 모델에서는 텍스트를 완전히 연결된 그래프로 보고 토큰간의 관계를 학습합니다.</p>
<p>물론 위에서 이야기한 방식이 실제로 텍스트와 이미지가 인코딩 되는 방식은 아닙니다. 모든 이미지와 텍스트 데이터들은 매우 규칙적인 구조를 갖기 때문에 위와 같은 그래프 표현은 불필요할 수 있습니다. 이를테면 이미지는 모든 픽셀들이 서로 이웃해 연결되어 있기 때문에 인접 행렬로 표현하면 띠 모양의 구조를 갖게 됩니다. 텍스트 데이터는 일방향성이기 때문에 인접 행렬로 표현하면 대각선으로만 나오죠.</p>
<p><br></p>
</section>
<section id="graph-valued-data-in-the-wild" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="graph-valued-data-in-the-wild">Graph-valued data in the wild</h4>
<p>그래프는 익숙한 데이터를 설명하는 데 참으로 유용한 도구입니다. 지금부터는 조금 더 이질적인 구조를 가진 데이터로 넘어가 보겠습니다. 이제부터 나올 데이터들은 이미지와 텍스트처럼 이웃의 개수가 고정되어있지 않고 각 Node별로 이웃 수가 가변적입니다. 이런 데이터들은 그래프 말고 다른 방식으로 표현하기가 어렵습니다.</p>
<p><br></p>
<ol type="1">
<li><strong>그래프로 보는 분자</strong></li>
</ol>
<div class="column-body-outset">
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/molecule_as_graph.png" class="img-fluid"></p>
</div>
<p>분자는 원자와 전자로 이루어져 있는 물질의 구성 요소입니다. 모든 입자는 상호작용하지만 한 쌍의 원자가 서로 안정된 거리에 붙어 있으면 우리는 공유 결합을 형성하고 있다고 말합니다. 공유결합은 두 원자 사이에 공유하는 전자 쌍의 개수에 따라 서로 다른 거리를 갖습니다. 이를테면 단일결합은 한 쌍, 이중결합은 두 쌍, 삼중결합은 세 쌍의 전자를 공유하죠. 결합의 수가 늘어날수록 결합 사이의 거리는 짧아지고 그 세기는 증가합니다. 3D로 표현된 분자 개체를 그래프로 설명하는 건 매우 편리합니다. 분자 그래프에서 Node는 원자이고 Edge는 결합을 나타냅니다. 위에는 매우 일반적인 분자<sup>4</sup>를 가지고 그래프로 표현한 자료가 있습니다.</p>
<p><br></p>
<ol start="2" type="1">
<li><strong>그래프로 보는 소셜 네트워크</strong></li>
</ol>
<div class="column-body-outset">
<p><img src="https://orange-mansion.com/posts/230316_GNN_intro_1/socialnetwork_as_graph.png" class="img-fluid"></p>
</div>
<p>소셜 네트워크는 사람과 기관, 그리고 조직의 집단행동 패턴을 연구하는 도구입니다. 개인을 Node로, 관계를 Edge로 모델링하면 사람들의 그룹을 나타내는 그래프를 만들 수 있습니다. 위의 이미지는 연극 오델로의 캐릭터 간 상호작용을 인접 행렬과 그래프로 표현한 겁니다.</p>
<p><br></p>
<ol start="3" type="1">
<li><strong>그래프로 보는 인용 네트워크</strong></li>
</ol>
<p>과학자들은 논문을 발표할 때 다른 과학자의 연구를 일상적으로 인용합니다. 이러한 인용 네트워크 역시 그래프로 시각화할 수 있습니다. 각각의 논문은 Node로 표현하고, Node와 Node를 연결하는 Edge는 한 논문과 다른 논문 사이의 인용을 나타낼 수 있죠. 또한 각 Node에 초록의 단어를 임베딩하는 등 각 논문에 대한 정보를 추가할 수도 있습니다.</p>
<p><br></p>
<ol start="4" type="1">
<li><strong>그 외</strong></li>
</ol>
<p>컴퓨터 비전(CV, Computer Vision)에서는 시각적 장면에 포함된 객체에 태그를 지정하고 싶을 때가 있습니다. 이런 경우에는 객체를 Node로, 객체 간의 관계를 Edge로 처리해서 그래프를 만들 수 있습니다. 머신러닝 모델, 프로그래밍 코드, 수식 역시 그래프로 표현 가능합니다. 이 경우엔 변수를 Node로 연산을 Edge로 보면 되죠. Tensorflow 등에서 등장하는 Dataflow graph(데이터 흐름도)가 바로 그 예시입니다.</p>
<p>현실 세계에 존재하는 그래프들의 구조는 데이터 유형에 따라 크게 달라질 수 있을 겁니다. 어떤 그래프에선 Node가 많지만 서로 연결이 적을 수도 있고, 또 어떤 그래프에선 Node는 적지만 연결이 엄청나게 많을 수도 있죠. 그래서 그래프 데이터셋은 Node, Edge, Node의 연결성 등의 측면을 고려했을 때 매우 다양한 형태를 가질 수 있습니다.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>이 글은 2021년 9월 2일에 출간되었습니다↩︎</p></li>
<li id="fn2"><p>픽셀이 가지고 있는 색상 정보↩︎</p></li>
<li id="fn3"><p>문법적으로 더 이상 나눌 수 없는 언어요소↩︎</p></li>
<li id="fn4"><p>Citronellal 분자↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>GNN</category>
  <category>GRAPH</category>
  <category>TRANSLATION</category>
  <guid>https://orange-mansion.com/posts/230316_GNN_intro_1/index.html</guid>
  <pubDate>Wed, 15 Mar 2023 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/230316_GNN_intro_1/graph_thumbnail.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>뜯어먹는 Quarto ①YAML</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/230108_quarto_yaml/index.html</link>
  <description><![CDATA[ <section id="quarto-뜯어보기" class="level2"><h2 class="anchored" data-anchor-id="quarto-뜯어보기">Quarto 뜯어보기</h2>
<section id="차세대-포맷-qaurto" class="level4"><h4 class="anchored" data-anchor-id="차세대-포맷-qaurto">차세대 포맷 Qaurto</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/230108_quarto_yaml/penguins_meteor.png" class="img-fluid figure-img" alt="Two penguins looking happily up at a Quarto logo &quot;meteor&quot; that is flying overhead."></p>
<p></p><figcaption class="figure-caption">R &amp; stats illustrations by <a href="https://github.com/allisonhorst/stats-illustrations">@allison_horst</a></figcaption><p></p>
</figure>
</div>
<p><a href="https://orange-mansion.com/posts/220827_quarto/">지난 게시물</a>에선 R Markdown의 차세대 포맷, Quarto의 등장 배경에 대해 살펴봤습니다. Quarto를 한 문장으로 정리해 보면 이렇게 이야기할 수 있습니다. Quarto는 “마크다운 등 일반 텍스트 형식(.qmd, .rmd, .md)과 혼합 형식(.ipynb, jupyter notebook)을 pandoc과 knitr 패키지를 통해 PDF/Word/HTML/책/웹사이트/프레젠테이션 등 다양한 형태로 렌더링 하는 명령줄 인터페이스(CLI)다”라고요.</p>
<p>R Studio나 VS code 같은 IDE로 Quarto를 이용하면 Quarto의 CLI의 모습을 엿보기 어렵지만 명령 프롬프트를 이용하면 바로 확인할 수 있습니다. 아래 이미지는 iTerm에서 <code>quarto --help</code>라는 명령어를 입력하면 나오는 Quarto의 개괄입니다.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">quarto</span> <span class="at" style="color: #657422;">--help</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
  Usage:   quarto 
  Version: 1.2.313

  Description:

    Quarto CLI

  Options:

    -h, --help     - Show this help.                            
    -V, --version  - Show the version number for this program.  

  Commands:

    render          [input] [args...]     - Render files or projects to various document types.        
    preview         [file] [args...]      - Render and preview a document or website project.          
    serve           [input]               - Serve a Shiny interactive document.                        
    create          [type] [commands...]  - Create a Quarto project or extension                       
    create-project  [dir]                 - Create a project for rendering multiple documents          
    convert         &lt;input&gt;               - Convert documents to alternate representations.            
    pandoc          [args...]             - Run the version of Pandoc embedded within Quarto.          
    run             [script] [args...]    - Run a TypeScript, R, Python, or Lua script.                
    add             &lt;extension&gt;           - Add an extension to this folder or project                 
    install         [target...]           - Installs an extension or global dependency.                
    publish         [provider] [path]     - Publish a document or project. Available providers include:
    check           [target]              - Verify correct functioning of Quarto installation.         
    help            [command]             - Show this help or the help of a sub-command.               </code></pre>
</div>
</div>
<p><br></p>
</section><section id="quarto의-구조" class="level4"><h4 class="anchored" data-anchor-id="quarto의-구조">Quarto의 구조</h4>
<p>Quarto라는 녀석이 CLI라는 건 그렇게 중요하지 않습니다. 왜냐면 우리가 Quarto를 이용해서 얻고자 하는 건 글을 쓰고, 블로그를 쓰고, 책을 출간하고, 발표자료를 만들려고 하는 거니까요. 그러려면 우선 Quarto 문서(.qmd)를 작성해야 합니다. 이번 게시물에선 Quarto 문서, 그 자체에 집중해서 이야기를 나눠보도록 하겠습니다. 먼저 Quarto 문서가 어떻게 구성되어 있는지 살펴보겠습니다. Quarto 문서는 크게 3가지 요소로 구분할 수 있습니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/230108_quarto_yaml/quarto_anatomy.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
<ul>
<li><p>Metadata: YAML header</p></li>
<li><p>Text: Markdown</p></li>
<li><p>Code: knitr or jupyter</p></li>
</ul>
<p>이 세 가지 요소를 잘 버무려서 Quarto 문서를 작성하면 다양한 형태의 콘텐츠를 제작할 수 있습니다. 지금 이 게시물 역시 Metadata와 Text, Code 이렇게 3가지 요소로 만든 qmd 파일을 html로 렌더링 한 거죠.</p>
<p><br></p>
<section id="metadata" class="level5"><h5 class="anchored" data-anchor-id="metadata">1. Metadata</h5>
<p>먼저 Metadata가 담겨있는 YAML header입니다. 지금 이 게시글의 YAML header는 요런 모습입니다.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">'뜯어먹는 Quarto ①YAML'</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">date</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">'2023-01-08'</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">'R Markdown'</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">'Quarto'</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">'YAML'</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"YAML Ain't Markup Language"</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;">execute</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb3-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">message</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">warning</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;">editor_options</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb3-10"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">chunk_output_type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> console</span></span>
<span id="cb3-11"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p>YAML header의 내용을 보면 꽤나 직관적입니다. title에는 게시물 제목이, date에는 작성 시점이, cateogories에는 이 게시물의 카테고리가 표시되어 있죠. YAML header에는 이 문서의 메타데이터를 표시해 줍니다. 메타데이터는 다른 데이터를 설명해 주는 데이터를 뜻합니다. 메타데이터의 메타(Meta)는 about(~에 관하여)과 같은 의미를 갖고 있죠. 이론을 대상으로 하는 이론을 뜻하는 메타이론(metatheory), 수학으로 수학 자체를 연구하는 메타수학(Metamathematics)의 메타와 같아요.</p>
<p><br></p>
</section><section id="text" class="level5"><h5 class="anchored" data-anchor-id="text">2. Text</h5>
<p>두 번째는 텍스트 항목입니다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><span class="fu" style="color: #4758AB;">## Quarto 뜯어보기</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">지난 게시물에선 R Markdown의 차세대 포맷, Quarto의 등장 배경에 대해 살펴봤습니다. </span></code></pre></div>
<p>Quarto에서는 마크업 언어의 일종인 마크다운(Markdown)을 이용해 텍스트를 작성합니다. HTML 문서를 무작정 작성하려고 하면 온갖 다양한 태그를 사용하게 되는데 그걸 일일이 작성하긴 어려우니까요. 마크다운(Markdown)을 이용하면 훨씬 쓰기 쉽고, 읽기 쉬운 형태의 문서를 쓸 수 있습니다.</p>
<p><br></p>
</section><section id="code" class="level5"><h5 class="anchored" data-anchor-id="code">3. Code</h5>
<p>마지막은 코드입니다. R을 사용하는 사람들은 knitr 엔진을, python을 사용하는 사람들은 jupyter 엔진을 활용해 인라인 코드를 작성하고, 시각화를 구현할 수 있습니다. 이런 식으로 말이죠.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://ggplot2.tidyverse.org">ggplot2</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">airquality</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">Temp</span>, <span class="va" style="color: #111111;">Ozone</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_smooth.html">geom_smooth</a></span><span class="op" style="color: #5E5E5E;">(</span>method <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"loess"</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/230108_quarto_yaml/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><br></p>
</section></section></section><section id="about-yaml" class="level2"><h2 class="anchored" data-anchor-id="about-yaml">About YAML</h2>
<section id="yaml-aint-markup-language" class="level4"><h4 class="anchored" data-anchor-id="yaml-aint-markup-language">YAML Ain’t Markup Language</h4>
<p>세 요소 중에서도 YAML에 대해서 조금 더 이야기를 나눠보도록 하겠습니다. YAML은 <strong>Y</strong>et <strong>A</strong>nother <strong>M</strong>arkup <strong>L</strong>anguage라는 뜻을 가진 마크업 언어입니다. [야믈], [야멜] 등으로 읽을 수 있겠습니다. YAML은 2001년 클라크 에반스가 고안한 언어로 기존의 JSON이 가지고 있는 단점(주석을 달 수 없다, 문법이 유연하지 않다)들을 해소하기 위해 만들어졌습니다.</p>
<p>YAML은 마크업 언어지만 스스로 마크업 언어가 아니라고 이야기합니다. YAML을 또 다르게 풀어보면 <strong>Y</strong>AML <strong>A</strong>in’t <strong>M</strong>arkup <strong>L</strong>anguage라고도 할 수 있거든요. “YAML은 마크업 문서가 아니다”라고 이야기하는 이유는 바로 YAML의 정체성을 마크업이 아닌 데이터에 두겠다는 거죠. 데이터에 방점을 둔 YAML은 JSON과 XML과 비교해 압도적으로 간결하고 가독성 높은 구조로 만들어졌습니다. 직접 한 번 비교해보시면 그 차이가 느껴질겁니다. 이렇게 간결한 구조는 YAML 문서가 여러 프레임워크에서 설정파일로 자리잡는데 큰 힘이 되었어요.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">YAML</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">JSON</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">XML</a></li>
</ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">Server</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Server1</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">owner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> John</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">created</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">123456</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">status</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> active</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">...</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb7-1"><span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb7-2">  <span class="er" style="color: #AD0000;">Server</span><span class="fu" style="color: #4758AB;">:</span> <span class="ot" style="color: #003B4F;">[</span></span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb7-4">    <span class="er" style="color: #AD0000;">name</span><span class="fu" style="color: #4758AB;">:</span> <span class="er" style="color: #AD0000;">Server1</span></span>
<span id="cb7-5">    <span class="er" style="color: #AD0000;">owner:</span> <span class="er" style="color: #AD0000;">John</span></span>
<span id="cb7-6">    <span class="er" style="color: #AD0000;">created:</span> <span class="dv" style="color: #AD0000;">123456</span></span>
<span id="cb7-7">    <span class="er" style="color: #AD0000;">status:</span> <span class="er" style="color: #AD0000;">active</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;">}</span></span>
<span id="cb7-9">  <span class="ot" style="color: #003B4F;">]</span></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;">}</span></span></code></pre></div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb8-1">&lt;<span class="kw" style="color: #003B4F;">Servers</span>&gt;</span>
<span id="cb8-2">  &lt;<span class="kw" style="color: #003B4F;">Server</span>&gt;</span>
<span id="cb8-3">    &lt;<span class="kw" style="color: #003B4F;">name</span>&gt;Server1&lt;/<span class="kw" style="color: #003B4F;">name</span>&gt;</span>
<span id="cb8-4">    &lt;<span class="kw" style="color: #003B4F;">owner</span>&gt;John&lt;/<span class="kw" style="color: #003B4F;">owner</span>&gt;</span>
<span id="cb8-5">    &lt;<span class="kw" style="color: #003B4F;">created</span>&gt;123456&lt;/<span class="kw" style="color: #003B4F;">created</span>&gt;</span>
<span id="cb8-6">    &lt;<span class="kw" style="color: #003B4F;">status</span>&gt;active&lt;/<span class="kw" style="color: #003B4F;">status</span>&gt;</span>
<span id="cb8-7">  &lt;/<span class="kw" style="color: #003B4F;">Server</span>&gt;</span>
<span id="cb8-8">&lt;/<span class="kw" style="color: #003B4F;">Servers</span>&gt;</span></code></pre></div>
</div>
</div>
</div>
<p>Quarto도 마찬가지입니다. 서두에서 이야기한 것처럼 YAML header에는 메타데이터가 담겨있습니다. Quarto 문서의 다양한 설정을 YAML header에 담아두면 됩니다. 간단한 구조와 간결한 문법을 활용해서 말이죠. Quarto는 매번 모든 옵션을 수동으로 입력하지 않도록 하기 위해 YAML header를 활용합니다. 입력된 메타데이터들은 최종적으로 퍼블리싱되는 포맷에 영향을 주죠. 퍼블리싱, 렌더링 과정에 참여하는 pandoc, quarto, knitr이 YAML header에 담긴 정보를 읽고 처리합니다.</p>
<p><br></p>
</section><section id="quarto-with-yaml" class="level4"><h4 class="anchored" data-anchor-id="quarto-with-yaml">Quarto with YAML</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/230108_quarto_yaml/penguins_telescope_2.png" class="img-fluid figure-img" style="width:100.0%" alt="Two penguins in a room made of ice, looking out a window. One penguin is holding an icicle as a pointer, pointing at a Quarto logo &quot;moon&quot; in the sky, while the other penguin looks on."></p>
<p></p><figcaption class="figure-caption">R &amp; stats illustrations by <a href="https://github.com/allisonhorst/stats-illustrations">@allison_horst</a></figcaption><p></p>
</figure>
</div>
<p>지금부터는 YAML header에 포함되는 Quarto의 옵션들을 살펴보겠습니다. 우선 가장 기본적인 Output Option입니다. 말 그대로 어떤 결과물을 만들고 싶은지를 선택하는 옵션입니다. 내가 qmd 문서를 HTML로, 혹은 PDF로, 아니면 revealjs 형태로 뽑아내고 싶다면 YAML header의 <code>format</code> 자리에 적어주면 됩니다. <code>format: html</code> 이렇게 말이죠. 참고로 <code>format: html</code>처럼 <code>key</code>값(여기선 <code>format</code>이 해당하겠죠)에 <code>html</code>이라는 <code>value</code>값을 대응시키는 구조를 <code>map</code>형식이라고 합니다.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> html</span></span>
<span id="cb9-3"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> revealjs</span></span>
<span id="cb10-3"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p>참고로 원래 YAML에서는 <code>---</code>로 열고 <code>...</code>으로 닫는 게 원칙입니다. 하지만 Quarto의 YAML header에선 그것마저도 귀찮았는지 <code>---</code> 하나로 열고 닫습니다.</p>
<p>추가 옵션을 적으려면 적어놓은 옵션 밑에 주르륵 적으면 됩니다. 다만 하위 옵션을 적을 때에는 상위 옵션의 아랫줄에 적어야 하고 들여 쓰기를 사용해야 합니다. YAML은 들여 쓰기로 계층구조를 표현하거든요. YAML에서 들여 쓰기는 2n(2, 4, 6…) 칸을 지원합니다.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span><span class="co" style="color: #5E5E5E;">  #하위 옵션은 들여 쓰기로</span></span>
<span id="cb11-5"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">code-fold</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb11-6"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p>또 하나 주의해야할 점, 띄어쓰기기나 줄바꿈을 맞추지 않을 경우엔 옵션이 실행되지 않습니다. YAML은 민감한 친구거든요.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;">format:html</span><span class="co" style="color: #5E5E5E;">  # format과 html 사이에 띄어쓰기가 없기 때문에 작동 X</span></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb13-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb13-3"><span class="at" style="color: #657422;">html</span><span class="co" style="color: #5E5E5E;">  # 들여 쓰기가 없기 때문에 작동 X </span></span>
<span id="cb13-4"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb14-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span><span class="co" style="color: #5E5E5E;">  # 들여 쓰기는 했지만 html: 이후 value값이 없어서 작동 X</span></span>
<span id="cb14-4"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p><br></p>
<p>제대로 된 YAML 구조는 이렇습니다.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> html</span><span class="co" style="color: #5E5E5E;">  # format과 html 사이에 띄어쓰기</span></span>
<span id="cb15-3"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb16-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-3"><span class="at" style="color: #657422;">  html</span><span class="co" style="color: #5E5E5E;">  # 들여 쓰기 2칸</span></span>
<span id="cb16-4"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb17-5"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p>R studio를 사용하고 있다면 YAML 문법을 하나하나 외우고 있을 필요는 없습니다. R studio에선 기본적으로 YAML intelligence 기능이 있거든요. 옵션을 자동완성 해주거나, 잘못된 문법이 있을 경우 강조 표시로 오류를 확인할 수 있습니다. YAML intelligence 기능을 사용하려면 Quarto CLI 0.9.44 이상의 버전이어야 합니다.</p>
<p>간단하게나마 HTML format의 옵션을 살펴보겠습니다.</p>
<table class="table">
<colgroup>
<col style="width: 24%">
<col style="width: 75%">
</colgroup>
<thead><tr class="header">
<th>Option</th>
<th>설명</th>
</tr></thead>
<tbody>
<tr class="odd">
<td><code>title</code></td>
<td>문서 제목</td>
</tr>
<tr class="even">
<td><code>subtitle</code></td>
<td>문서 부제</td>
</tr>
<tr class="odd">
<td><code>date</code></td>
<td>문서 작성 시점</td>
</tr>
<tr class="even">
<td><code>date-modified</code></td>
<td>문서 편집 시점</td>
</tr>
<tr class="odd">
<td><code>author</code></td>
<td>문서의 작성자</td>
</tr>
<tr class="even">
<td><code>abstract</code></td>
<td>문서 요약</td>
</tr>
<tr class="odd">
<td><code>abstract-title</code></td>
<td>문서 요약본의 제목</td>
</tr>
<tr class="even">
<td><code>doi</code></td>
<td>DOI(Digital Object Identifier, 디지털객체식별자) 표시</td>
</tr>
<tr class="odd">
<td><code>order</code></td>
<td>문서의 정렬 순서</td>
</tr>
</tbody>
</table>
<p>위의 표는 HTML format에서 제목과 작성자와 관련된 옵션을 정리한 겁니다. 옵션의 수는 너무나도 많아서 여기에다 정리하긴 어려울 것 같고요. Quarto의 공식 홈페이지를 들어가 보면 <a href="https://quarto.org/docs/reference/formats/html.html">HTML option</a>들을 확인할 수 있을 겁니다. 공식 홈페이지에는 HTML뿐 아니라 PDF, MS Word, OpenOffice, ePub, Presentations 등 다양한 포맷들의 option을 정리해두고 있습니다. 주요 포맷들의 option과 guide 링크를 소개하는 것으로 이번 게시물은 마무리하도록 하겠습니다.</p>
<p><br></p>
</section><section id="yaml-options" class="level4"><h4 class="anchored" data-anchor-id="yaml-options">YAML Options</h4>
<table class="table">
<thead><tr class="header">
<th>Format</th>
<th>Options Reference</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>HTML</td>
<td><a href="https://quarto.org/docs/reference/formats/html.html" class="uri">https://quarto.org/docs/reference/formats/html.html</a></td>
</tr>
<tr class="even">
<td>PDF</td>
<td><a href="https://quarto.org/docs/reference/formats/pdf.html" class="uri">https://quarto.org/docs/reference/formats/pdf.html</a></td>
</tr>
<tr class="odd">
<td>MS Word</td>
<td><a href="https://quarto.org/docs/reference/formats/docx.html" class="uri">https://quarto.org/docs/reference/formats/docx.html</a></td>
</tr>
<tr class="even">
<td>OpenOffice</td>
<td><a href="https://quarto.org/docs/reference/formats/odt.html" class="uri">https://quarto.org/docs/reference/formats/odt.html</a></td>
</tr>
<tr class="odd">
<td>ePub</td>
<td><a href="https://quarto.org/docs/reference/formats/epub.html" class="uri">https://quarto.org/docs/reference/formats/epub.html</a></td>
</tr>
<tr class="even">
<td>Presentation_revealjs</td>
<td><a href="https://quarto.org/docs/reference/formats/presentations/revealjs.html" class="uri">https://quarto.org/docs/reference/formats/presentations/revealjs.html</a></td>
</tr>
<tr class="odd">
<td>Presentation_ppt</td>
<td><a href="https://quarto.org/docs/reference/formats/presentations/pptx.html" class="uri">https://quarto.org/docs/reference/formats/presentations/pptx.html</a></td>
</tr>
<tr class="even">
<td>Presentation_beamer</td>
<td><a href="https://quarto.org/docs/reference/formats/presentations/beamer.html" class="uri">https://quarto.org/docs/reference/formats/presentations/beamer.html</a></td>
</tr>
</tbody>
</table>


</section></section> ]]></description>
  <category>R Markdown</category>
  <category>Quarto</category>
  <category>YAML</category>
  <guid>https://orange-mansion.com/posts/230108_quarto_yaml/index.html</guid>
  <pubDate>Sat, 07 Jan 2023 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/230108_quarto_yaml/penguins_telescope_2.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>pure function과 친해지려면 purrr 합시다</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/230101_purrr/index.html</link>
  <description><![CDATA[ <section id="purrr-package" class="level2"><h2 class="anchored" data-anchor-id="purrr-package">purrr package</h2>
<p><img src="https://orange-mansion.com/posts/230101_purrr/purrr_compressed.png" class="img-fluid" style="width:25.0%"></p>
<p>데이터를 요리조리 만지다보면, 혹은 R을 조금 더 본격 프로그래밍적으로 접근하고 싶어서 이것저것 찾다보면 purrr 패키지를 만나게 됩니다. 마침 작년 12월 20일에 purrr 패키지 1.0.0 버전이 <a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/">출시</a>되었으니 새해를 여는 R쓸 이야기의 주인공으로 purrr 패키지를 골라봤습니다.</p>
<p><br></p>
<section id="purrrs-name" class="level3"><h3 class="anchored" data-anchor-id="purrrs-name">purrr’s name</h3>
<blockquote class="blockquote">
<p>“It’s designed to make your pure functions purrr”</p>
</blockquote>
<p>purrr 패키지가 세상에 처음으로 선을 보인건 2015년 9월입니다. 9월 29일 rstudio blog에 purrr 0.1.0을 올리며 쓴 <a href="https://www.rstudio.com/blog/purrr-0-1-0/">포스트</a>를 보면 왜 purrr 패키지를 만들었는지 알 수 있죠. “이 패키지는 당신의 순수한 함수를 그르릉되게 만들도록 설계되었습니다.” 이 문장의 표현대로 purrr 패키지는 R의 함수형 프로그래밍(FP)의 빈틈을 채워주는 패키지입니다.</p>
<p>그런데 이름은 왜 purrr로 정해졌을까요? purr라는 단어의 원래 뜻은 “그르렁대다”입니다. 그 영향으로 로고에는 귀여운 고양이가 담겨있죠. <a href="https://github.com/tidyverse/purrr/issues/35">tidyverse 깃허브</a>를 구경하다 보면, 당시 개발자들이 훗날 purrr가 될 새로운 패키지에 어떤 이름을 붙일지 고민한 흔적을 확인할 수 있습니다. 그 흔적을 살펴보면 purrr라는 작명의 이유를 찾을 수 있죠.</p>
<p>당시 함수형 프로그래밍 패키지 이름의 첫 번째 후보는 purr였습니다. 순수한 함수(pure function)와 어울리게 pure로도 읽을 수 있고, 함수(function → purpose → purr)라는 단어의 흔적도 담을 수 있으니 괜찮아 보입니다. 또 다른 후보는 funr이었어요. fun한 패키지면서도 function, 즉 함수형 프로그래밍의 의미를 담으려 했죠. funr 외에도 funcr, funkr, funker 등이 function의 흔적이 담긴 이름 후보들이었습니다. 최종적으로는 purr에 R이 더해져 purrr이 되었죠.</p>
<p><br></p>
</section><section id="functional-programming" class="level3"><h3 class="anchored" data-anchor-id="functional-programming">Functional Programming</h3>
<p>그런데 여기서 이야기하는 함수형 프로그래밍(FP, Functional Programming)은 뭘까요? 프로그래밍은 크게 명령형 프로그래밍(Imperative Programming)과 선언형 프로그래밍(Declarative Programming)으로 구분할 수 있습니다. 물론 엄밀하게 구분하면 아래와 같은 지도같이 더 복잡하게 구분할 수도 있는데, 우리는 purrr 패키지를 이해하는 게 우선이니 명령형과 선언형으로만 구분해 보겠습니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/230101_purrr/1920px-Programming_paradigms.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">Overview of the various programming paradigms according to Peter Van Roy</figcaption><p></p>
</figure>
</div>
<p>명령형 프로그래밍은 프로그래밍의 상태와 상태를 변형시키는 구문의 관점에서 연산을 설명합니다. 우리가 일반적으로 누군가에게 명령(혹은 부탁)을 할 때 어떤 동작을 할 것인지를 표현하는 것처럼, 명령형 프로그래밍은 컴퓨터에게도 컴퓨터가 수행할 명령을 순서대로 말하는 방식을 의미합니다. 즉 명령형 프로그래밍은 컴퓨터에게 무엇(What)을 할 것인지에 방점을 찍어 설명하는 게 아니라 어떻게(How)할 것인지에 중심을 두고 설명합니다.</p>
<p>반면 선언형 프로그래밍은 어떻게(How)가 메인이 아니라 무엇(What)이 메인인 프로그래밍 방법입니다. 웹 페이지나 블로그의 코드를 생각해 보죠. 우리는 블로그의 코드를 작성할 때 제목과 본문, 그림, 폰트와 같이 무엇(What)이 화면에 나타나야 하는지를 코드로 표현합니다. 이런 접근방식을 선언형 프로그래밍이라고 합니다.</p>
<p>함수형 프로그래밍은 선언형 프로그래밍에 속합니다. 이름에서 알 수 있듯이 함수를 조합해서 소프트웨어를 만드는 방식을 의미하죠. 함수형 프로그래밍은 거의 모든 것을 함수로 접근합니다. 아무리 작은 것도 함수로 표현하려고 합니다. 이렇게 하면 코드 가독성이 높아지고, 코드의 유지보수가 용이해진다는 장점이 있어요. 참고로 함수형 프로그래밍은 람다 대수라는 대수 체계를 기반으로 발전했는데, 그래서 lambda라는 이름이 purrr 패키지의 또다른 후보이기도 했죠.</p>
<p><br></p>
</section></section><section id="all-about-purrr" class="level2"><h2 class="anchored" data-anchor-id="all-about-purrr">All about purrr</h2>
<section id="map" class="level3"><h3 class="anchored" data-anchor-id="map">map</h3>
<p>purrr 패키지의 알파이자 오메가인 <code><a href="https://purrr.tidyverse.org/reference/map.html">map( )</a></code> 함수를 살펴보겠습니다. 아까 위에서 함수형 프로그래밍은 거의 모든 것을 함수로 생각한다고 했죠? 함수형 프로그래밍에서는 함수조차도 값으로 취급합니다. 그래서 함수를 다루는 함수도 존재하죠.</p>
<p>예를 들어 1부터 10까지의 숫자를 제곱한다고 해봅시다. 명령형 프로그래밍에선 반복문을 이용해 숫자들을 제곱해 나갈겁니다. 반면 함수형 프로그래밍에선 인수를 제곱하는 함수를 또 다른 함수의 인수로 전달하는 함수의 함수, 이름하여 고차 함수(고계 함수)를 이용해 접근합니다.</p>
<p>대표적인 게 바로 하스켈의 map함수입니다. 하스켈의 map함수는 purrr에서도 동일하게 등장합니다. map함수의 map은 수학에서 의미하는 매핑(mapping, 사상), 즉 일반적인 의미의 함수를 뜻합니다. 참고로 하스켈은 순수 함수형 프로그래밍 언어인데요, 하스켈 코드는 부작용(side effect)이 없다(!)는 장점을 가지고 있기도 하죠.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/230101_purrr/haskell_2x.png" class="img-fluid figure-img" style="width:30.0%"></p>
<p></p><figcaption class="figure-caption">xkce_Haskell</figcaption><p></p>
</figure>
</div>
<p>r에서 명령형 프로그래밍 방법과 함수형 프로그래밍 방법에 따라 1부터 10까지의 숫자들을 제곱해 보겠습니다. 먼저 나만의 소중한 제곱 함수를 만들어놓고 시작해 보죠. for loop에서는 1부터 10까지 각각의 i에 <code>my_square( )</code> 함수를 적용했습니다. 함수형 프로그래밍에선 고차함수 map( )에 <code>my_square( )</code>라는 함수를 값으로 취급해 넣었습니다. 당연히 두 결과는 같습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://purrr.tidyverse.org/">purrr</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="co" style="color: #5E5E5E;"># 나만의 소중한 제곱 함수</span>
<span class="va" style="color: #111111;">my_square</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span>
  <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">^</span><span class="fl" style="color: #AD0000;">2</span>
<span class="op" style="color: #5E5E5E;">}</span>

<span class="co" style="color: #5E5E5E;"># 명령형 프로그래밍(for loop)</span>
<span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">i</span> <span class="kw" style="color: #003B4F;">in</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">{</span>
  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/print.html">print</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">my_square</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">i</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>
<span class="op" style="color: #5E5E5E;">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 함수형 프로그래밍(map)</span>
<span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span> |&gt;
  <span class="fu" style="color: #4758AB;"><a href="https://purrr.tidyverse.org/reference/map.html">map</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">my_square</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25

[[6]]
[1] 36

[[7]]
[1] 49

[[8]]
[1] 64

[[9]]
[1] 81

[[10]]
[1] 100</code></pre>
</div>
</div>
<p>전통적인 명령형 함수에서는 모든 함수에 이름이 부여되어야 했지만 함수형 언어에서는 익명으로 처리할 수도 있습니다. 기존 R에서는 <code>function(x) {...}</code> 구문으로 표시해왔지만 R 4.1.0에서는 하스켈 문법과 동일하게 \(역빗금)으로 익명 함수 구문을 표현할 수 있게 되었습니다. 여기서 \(역빗금)은 람다를 의미하죠.</p>
<p>dog, cats, rats 이렇게 세 단어 중 “at”가 포함된 단어를 골라내는 함수를 적용해보겠습니다. 기존 R 문법 스타일로는 “at”를 찾으라는 함수를 <code>function(x) grepl("at", x)</code> 이렇게 표시했지만 R 4.1.0부터는 <code>\(x) grepl("at", x)</code>라고만 해도 됩니다.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 기존 R 문법에서 익명 함수 처리</span>
<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"dogs"</span>, <span class="st" style="color: #20794D;">"cats"</span>, <span class="st" style="color: #20794D;">"rats"</span><span class="op" style="color: #5E5E5E;">)</span> |&gt;
  <span class="op" style="color: #5E5E5E;">{</span><span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/grep.html">grepl</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"at"</span>, <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">}</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE  TRUE</code></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># R 4.1.0에서 익명 함수 처리</span>
<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"dogs"</span>, <span class="st" style="color: #20794D;">"cats"</span>, <span class="st" style="color: #20794D;">"rats"</span><span class="op" style="color: #5E5E5E;">)</span> |&gt;
  <span class="op" style="color: #5E5E5E;">{</span>\<span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/grep.html">grepl</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"at"</span>, <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">}</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE  TRUE</code></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 제곱함수도 익명 함수 구문으로 처리</span>
<span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span> |&gt;
  <span class="fu" style="color: #4758AB;"><a href="https://purrr.tidyverse.org/reference/map.html">map</a></span><span class="op" style="color: #5E5E5E;">(</span>\<span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">^</span><span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25

[[6]]
[1] 36

[[7]]
[1] 49

[[8]]
[1] 64

[[9]]
[1] 81

[[10]]
[1] 100</code></pre>
</div>
</div>
<p>purrr 패키지에는 <code><a href="https://purrr.tidyverse.org/reference/map.html">map( )</a></code> 함수만 해도 <code><a href="https://purrr.tidyverse.org/reference/map.html">map_dbl( )</a></code>, <code><a href="https://purrr.tidyverse.org/reference/map.html">map_lgl( )</a></code>, <code><a href="https://purrr.tidyverse.org/reference/map.html">map_int( )</a></code>, <code><a href="https://purrr.tidyverse.org/reference/map.html">map_int( )</a></code> 등 딸린 식구들이 많습니다. 거기에 map2, pmap, imap, keep, compact, pluck, modify 등 다양한 함수들이 넘쳐나죠. R쓸 패키지 이야기는 이 정도로 마무리하고 purrr에 딸려있는 나머지 다양한 함수들은 <a href="https://orange-mansion.com/daily.html">daily</a> 코너를 통해 조금씩 풀어나가 보도록 하겠습니다.</p>


</section></section> ]]></description>
  <category>R package</category>
  <category>purrr</category>
  <guid>https://orange-mansion.com/posts/230101_purrr/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/230101_purrr/cat.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>내가 원하는 주식 종목 정보 한번에 불러오기</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220918_quant/index.html</link>
  <description><![CDATA[ <section id="tidyquant-package" class="level2"><h2 class="anchored" data-anchor-id="tidyquant-package">tidyquant package</h2>
<p><img src="https://orange-mansion.com/posts/220918_quant/tidyquant-logo.png" class="img-fluid" style="width:25.0%"></p>
<p>R을 활용해 주식을 분석하는 방법엔 다양한 선택지가 있습니다. 주식정보 사이트에서 데이터를 크롤링해 분석하는 방법, 그리고 패키지를 활용하는 방법 등… R의 퀀트 분석에서 가장 유명한 패키지는 아마 quantmod package일 겁니다. quantmod package를 이용하면 주식, 환율, 원자재 등 다양한 경제 데이터를 활용해 분석할 수 있습니다. 하지만 오늘은 tidyquant package를 활용해 퀀트 분석을 정리해보려고 합니다.</p>
<p>tidyquant package는 zoo, xts, quantmod, TTR 등의 정량 데이터 및 시계열 데이터 분석 패키지를 통합해 제공해주고 있습니다. 거기에 패키지 이름에서 알 수 있듯 tidyverse 생태계의 도구를 사용해서 퀀트 분석을 할 수 있도록 설계되어 있죠. ggplot2를 이용한 시각화도 물론 가능합니다. 그럼 본격적으로 tidyquant package를 이용해 퀀트 분석을 시작해보겠습니다.</p>
<p><br></p>
</section><section id="주식정보-불러오기" class="level2"><h2 class="anchored" data-anchor-id="주식정보-불러오기">주식정보 불러오기</h2>
<p>우선 tidyquant package를 설치해야겠죠? <code>install.packages("tidyquant")</code>를 입력해 tidyquant package를 설치합니다. 설치된 패키지를 불러옵시다. 거기에 tidyverse까지 함께 불러오겠습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://github.com/business-science/tidyquant">tidyquant</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyverse.tidyverse.org">tidyverse</a></span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
</div>
<p><br></p>
<section id="tq_get" class="level4"><h4 class="anchored" data-anchor-id="tq_get">tq_get()</h4>
<p><code><a href="https://rdrr.io/pkg/tidyquant/man/tq_get.html">tq_get()</a></code> 함수는 주식 관련 정보를 불러오는 가장 기본 함수입니다. get에 어떤 매개변수를 넣느냐에 따라 어느때는 주식정보를 얻을 수 있고, 또 어느때는 원자재 데이터를 가지고 올 수 있습니다. <code><a href="https://rdrr.io/pkg/tidyquant/man/tq_get.html">tq_get()</a></code>함수의 주요 데이터 소스는 아래와 같습니다.</p>
<table class="table">
<colgroup>
<col style="width: 23%">
<col style="width: 76%">
</colgroup>
<thead><tr class="header">
<th>데이터 소스</th>
<th>데이터</th>
</tr></thead>
<tbody>
<tr class="odd">
<td>Yahoo Finance</td>
<td>기본적인 주가 정보는 Yahoo Finance의 API를 활용합니다</td>
</tr>
<tr class="even">
<td>FRED</td>
<td>금리, 원자재 등 경제 관련 다양한 데이터는 세인트루이스 연준에서 제공하는 FRED(Federal Reserve Economic Data)를 활용합니다</td>
</tr>
<tr class="odd">
<td>Quandl</td>
<td>경제, 에너지 등의 데이터를 다루는 캐나다의 데이터 공유 플랫폼 회사 Quandl의 금융 API를 활용합니다</td>
</tr>
<tr class="even">
<td>Tiingo</td>
<td>주가 데이터, 코인 데이터 등을 제공해주는 Tiingo API도 사용할 수 있습니다</td>
</tr>
<tr class="odd">
<td>Alpha Vantage</td>
<td>Tiingo와 비슷하게 주가, 코인 데이터 등을 제공해주는 Alpha Vantage API를 활용할 수 있습니다</td>
</tr>
<tr class="even">
<td>Bloomberg</td>
<td>블룸버그 경제 API도 사용할 수 있는데, 이 API는 유료 계정이 있어야 사용 가능합니다</td>
</tr>
</tbody>
</table>
<p><br></p>
<p>Yahoo Finance부터 Bloomberg까지 다양한 매개변수가 있지만 이번 포스트에선 주가 정보를 불러오는 것에 집중해보겠습니다. 주가 정보 데이터는 Yahoo Finance에서 가져옵니다. 함수에 입력할 변수들도 간단합니다. 원하는 회사의 종목명과 시점만 적어주면 끝이죠. 예를 들어 2000년 1월 1일부터 2022년 8월 31일까지 엔비디아의 주가를 불러와본다고 해 봅시다. 엔비디아의 종목명은 NVDA이고, 주식 가격을 불러오기 위해 get에 넣을 매개변수는 <code>stock.prices</code> 입니다.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/tidyquant/man/tq_get.html">tq_get</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"NVDA"</span>,
       get <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"stock.prices"</span>,
       from <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2000-01-01"</span>,
       to <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2022-08-31"</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5,702 × 8
   symbol date        open  high   low close   volume adjusted
   &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1 NVDA   2000-01-03 0.984 0.992 0.919 0.975 30091200    0.895
 2 NVDA   2000-01-04 0.958 0.961 0.901 0.949 30048000    0.871
 3 NVDA   2000-01-05 0.922 0.938 0.905 0.918 18835200    0.843
 4 NVDA   2000-01-06 0.918 0.918 0.823 0.858 12048000    0.788
 5 NVDA   2000-01-07 0.854 0.882 0.841 0.872  7118400    0.801
 6 NVDA   2000-01-10 0.875 0.938 0.859 0.901 23985600    0.827
 7 NVDA   2000-01-11 0.896 0.906 0.865 0.865 14812800    0.794
 8 NVDA   2000-01-12 0.865 0.866 0.831 0.842 12355200    0.773
 9 NVDA   2000-01-13 0.841 0.885 0.831 0.878 13219200    0.806
10 NVDA   2000-01-14 0.891 0.952 0.888 0.915 60456000    0.840
# … with 5,692 more rows</code></pre>
</div>
</div>
<p>짜잔~ 함수를 돌리면 tibble 형태의 데이터가 불러와집니다. 총 8열의 데이터에는 개장 시점의 가격부터 일일 거래량까지 기본적인 주식 정보가 담겨 있습니다. <code>adjusted</code> 열에는 주식 분할 및 배당 등 시장이 마감된 이후 주가에 영향을 줄 수 있는 변수까지 적용된 수정 가격이 들어가 있습니다.</p>
<p>해외 주식만 가능한 건 아닙니다. 물론 우리나라 주식도 가능하죠. 이번엔 2000년 1월 1일부터 2022년 8월 31일까지 삼성전자의 주식 정보를 가져와 보겠습니다. Yahoo Finance에서 삼성전자의 종목명은 <code>005930.KS</code> 입니다. 입력하면 마찬가지로 tibble 형태의 삼성전자 주가 데이터를 불러올 수 있습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/tidyquant/man/tq_get.html">tq_get</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"005930.KS"</span>,
       get <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"stock.prices"</span>,
       from <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2000-01-01"</span>,
       to <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2022-08-31"</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5,690 × 8
   symbol    date        open  high   low close   volume adjusted
   &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1 005930.KS 2000-01-04  6000  6110  5660  6110 74195000    4623.
 2 005930.KS 2000-01-05  5800  6060  5520  5580 74680000    4222.
 3 005930.KS 2000-01-06  5750  5780  5580  5620 54390000    4253.
 4 005930.KS 2000-01-07  5560  5670  5360  5540 40305000    4192.
 5 005930.KS 2000-01-10  5600  5770  5580  5770 46880000    4366.
 6 005930.KS 2000-01-11  5820  6100  5770  5770 59745000    4366.
 7 005930.KS 2000-01-12  5610  5740  5600  5720 29220000    4328.
 8 005930.KS 2000-01-13  5600  5740  5560  5710 41190000    4321.
 9 005930.KS 2000-01-14  5720  5880  5680  5830 49375000    4412.
10 005930.KS 2000-01-17  6000  6180  5920  6100 63505000    4616.
# … with 5,680 more rows</code></pre>
</div>
</div>
<p><br></p>
</section><section id="주가-시각화" class="level4"><h4 class="anchored" data-anchor-id="주가-시각화">주가 시각화</h4>
<p>엔비디아 주가 데이터(조정가)로 간단히 그래프를 그려보겠습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;">NV_prices</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/tidyquant/man/tq_get.html">tq_get</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"NVDA"</span>,
                    get <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"stock.prices"</span>,
                    from <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2000-01-01"</span>,
                    to <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2022-08-31"</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">NV_prices</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_path.html">geom_line</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">date</span>, <span class="va" style="color: #111111;">adjusted</span><span class="op" style="color: #5E5E5E;">)</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"black"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_minimal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220918_quant/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><br></p>
<p>이번엔 삼성전자 주가 데이터로 그래프를 그려보겠습니다. 이번에는 최고가도 표시해봤습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://scales.r-lib.org">scales</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">SE_prices</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/tidyquant/man/tq_get.html">tq_get</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"005930.KS"</span>,
                    get <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"stock.prices"</span>,
                    from <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2000-01-01"</span>,
                    to <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"2022-08-31"</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">SE_prices</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_path.html">geom_line</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">date</span>, <span class="va" style="color: #111111;">adjusted</span><span class="op" style="color: #5E5E5E;">)</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"black"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/subset.html">subset</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">SE_prices</span>, <span class="va" style="color: #111111;">adjusted</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">max</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">adjusted</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, 
             <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">date</span>, <span class="va" style="color: #111111;">adjusted</span><span class="op" style="color: #5E5E5E;">)</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"red"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_text.html">geom_text</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/subset.html">subset</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">SE_prices</span>, <span class="va" style="color: #111111;">adjusted</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">max</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">adjusted</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>,
             <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">date</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">500</span>, <span class="va" style="color: #111111;">adjusted</span>, label <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">scales</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://scales.r-lib.org/reference/comma.html">comma</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">adjusted</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_continuous.html">scale_y_continuous</a></span><span class="op" style="color: #5E5E5E;">(</span>labels <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">comma</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_minimal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220918_quant/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section></section> ]]></description>
  <category>Quant</category>
  <category>tidyquant</category>
  <guid>https://orange-mansion.com/posts/220918_quant/index.html</guid>
  <pubDate>Sat, 17 Sep 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220918_quant/tidyquant.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>한글 폰트 깨짐 현상 Ragg package로 부셔드림</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220904_Ragg/index.html</link>
  <description><![CDATA[ <section id="한글이-깨진다" class="level2"><h2 class="anchored" data-anchor-id="한글이-깨진다">한글이 깨진다</h2>
<p>R에서 데이터를 잘 정제해서 시각화를 만들면 항상 한글의 벽에 부딫히곤 합니다. 한글을 인식하지 못하는 경우에는 인코딩을 해결하면 깨짐현상을 막을 수 있죠. 그렇다면 이미지를 추출할 때 한글이 깨지는 경우는 어떻게 할까요? 여기 그 예시가 있습니다. 대한민국의 주요 도시의 위치를 나타내기 위해 이런 데이터 셋을 만들어봤어요. tibble package에서 소개했던 <code><a href="https://tibble.tidyverse.org/reference/tribble.html">tibble::tribble</a></code> 함수를 이용해봤습니다. 세계화 시대에 맞춰 도시명에는 한글과 영어, 그리고 한자까지 포함했고요.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tibble.tidyverse.org/">tibble</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">ROK_city</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tribble.html">tribble</a></span><span class="op" style="color: #5E5E5E;">(</span>
  <span class="op" style="color: #5E5E5E;">~</span><span class="va" style="color: #111111;">City</span>, <span class="op" style="color: #5E5E5E;">~</span><span class="va" style="color: #111111;">Lat</span>, <span class="op" style="color: #5E5E5E;">~</span><span class="va" style="color: #111111;">Lon</span>,
  <span class="st" style="color: #20794D;">"울산(Ulsan, 蔚山)"</span>, <span class="fl" style="color: #AD0000;">35.549999</span>, <span class="fl" style="color: #AD0000;">129.316666</span>,
  <span class="st" style="color: #20794D;">"광주(Gwangju, 光州)"</span>, <span class="fl" style="color: #AD0000;">35.166668</span>, <span class="fl" style="color: #AD0000;">126.916664</span>,
  <span class="st" style="color: #20794D;">"대전(Daejeon, 大田)"</span>, <span class="fl" style="color: #AD0000;">36.351002</span>, <span class="fl" style="color: #AD0000;">127.385002</span>,
  <span class="st" style="color: #20794D;">"대구(Daegu, 大邱)"</span>, <span class="fl" style="color: #AD0000;">35.866669</span>, <span class="fl" style="color: #AD0000;">128.600006</span>,
  <span class="st" style="color: #20794D;">"부산(Busan, 釜山)"</span>, <span class="fl" style="color: #AD0000;">35.166668</span>, <span class="fl" style="color: #AD0000;">129.066666</span>,
  <span class="st" style="color: #20794D;">"청주(Chungju, 淸州)"</span>, <span class="fl" style="color: #AD0000;">36.981304</span>, <span class="fl" style="color: #AD0000;">127.935905</span>,
  <span class="st" style="color: #20794D;">"원주(Wonju, 原州)"</span>, <span class="fl" style="color: #AD0000;">37.342220</span>, <span class="fl" style="color: #AD0000;">127.920158</span>,
  <span class="st" style="color: #20794D;">"인천(Incheon, 仁川)"</span>, <span class="fl" style="color: #AD0000;">37.456257</span>, <span class="fl" style="color: #AD0000;">126.705208</span>,
  <span class="st" style="color: #20794D;">"서울(Seoul)"</span>, <span class="fl" style="color: #AD0000;">37.532600</span>,<span class="fl" style="color: #AD0000;">127.024612</span>
<span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
</div>
<p><br></p>
<p>이 데이터셋을 바탕으로 지도를 그려봤습니다. 지도의 제목은 &lt;🇰🇷대한민국(大韓民國)의 주요 도시 위치&gt;로 해봤습니다. 그래프 제목에 이모지 정도는 써 줘야 그래도 웹 3.0 시대를 살고 있다고 할 수 있지 않겠습니까? 그렇게 만들어본 그래프의 모습입니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/220904_Ragg/broken_image.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<p>처참한 모습입니다. 영어를 제외한 모든 글자를 인식하지 못하는군요. 하지만 걱정하지 마세요. 해결책이 있습니다. 바로 Ragg package를 이용하면 됩니다.</p>
<p><br></p>
</section><section id="ragg-package" class="level2"><h2 class="anchored" data-anchor-id="ragg-package">Ragg Package</h2>
<section id="ragg가-뭐지" class="level4"><h4 class="anchored" data-anchor-id="ragg가-뭐지">Ragg가 뭐지?</h4>
<p><img src="https://orange-mansion.com/posts/220904_Ragg/logo.svg" class="img-fluid" style="width:25.0%"></p>
<p>Rapp package는 Maxim Shemanarev라는 개발자가 개발한 AGG(Anti-Grain Geometry) 라이브러리를 기반으로 만들어진 R용 그래픽 패키지입니다. R과 AGG가 만나 Ragg package로 탄생했죠. Rag가 누더기, 조각이라는 뜻이 있는만큼 패키지 로고는 천 조각의 모습을 하고 있습니다. R의 그래픽 패키지로 가장 많이 알려진 건 grDevices package일 겁니다. 색상, 폰트를 자유롭게 이용하기 위해, 이제는 grDevices 대신 Ragg를 사용하면 됩니다. AGG는 grDevices에서 제공하는 표준 래스터 장치보다 더 높은 성능과 더 높은 품질을 제공하고 있습니다.</p>
<p><br></p>
</section><section id="rapp-package-사용법" class="level4"><h4 class="anchored" data-anchor-id="rapp-package-사용법">Rapp package 사용법</h4>
<p>Rapp package를 사용하는 법은 아주 간단합니다. 일반적인 package를 설치하듯 R에 Rapp package를 설치하면 됩니다. <code>intall.package("ragg")</code> 이렇게 말이죠. <code>devtools::install_github("r-lib/ragg")</code>로 개발버전의 Rapp package를 사용해도 됩니다. 설치한 다음엔 RStudio의 옵션창으로 가 봅시다. 일반 옵션에서 Graphics 항목에서 Graphics Device를 기존 (Default)로 되어있던 것을 AGG로 변경하면 끝입니다. 아래 스크린샷을 참고하시면 이해하기 편할겁니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/220904_Ragg/image1.png" class="img-fluid figure-img" style="width:88.0%"></p>
</figure>
</div>
<p><br></p>
</section><section id="app-환경에서-만드는-그래프" class="level4"><h4 class="anchored" data-anchor-id="app-환경에서-만드는-그래프">APP 환경에서 만드는 그래프</h4>
<p>이제 다시 그래프를 만들어봅시다. 대한민국의 지도를 만들기 위해 rnaturalearth package의 ne_countries 함수를 이용했습니다. rnaturalearth package는 과학 데이터의 장벽을 낮추기 위한 프로젝트 중 하나인 ropensci package에 포함되어 있는데요, ropensci는 나중에 따로 다뤄보겠습니다. 여튼 <code><a href="https://rdrr.io/pkg/rnaturalearth/man/ne_countries.html">rnaturalearth::ne_countries</a></code> 함수를 사용해보겠습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;">korea</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnaturalearth</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/rnaturalearth/man/ne_countries.html">ne_countries</a></span><span class="op" style="color: #5E5E5E;">(</span>
  scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">10</span>, 
  country <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"South Korea"</span>, 
  returnclass <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"sf"</span>
<span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
</div>
<p>불러온 대한민국 데이터를 <code><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">ggplot2::geom_sf</a></code>에 넣어 지도를 그려보겠습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://ggplot2.tidyverse.org">ggplot2</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://ragg.r-lib.org">ragg</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;">(</span>
    data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">korea</span>, 
    fill <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#C3ECB1"</span>, 
    colour <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#D5D8DB"</span>, 
    size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.2</span>
  <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;">ggrepel</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/ggrepel/man/geom_text_repel.html">geom_label_repel</a></span><span class="op" style="color: #5E5E5E;">(</span>
    data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">ROK_city</span>,
    <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">Lon</span>, <span class="va" style="color: #111111;">Lat</span>, label <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">City</span><span class="op" style="color: #5E5E5E;">)</span>, 
    fill <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#FFFFFF88"</span>,
    box.padding <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/grid/unit.html">unit</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">5</span>, <span class="st" style="color: #20794D;">"mm"</span><span class="op" style="color: #5E5E5E;">)</span>
  <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">ROK_city</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">Lon</span>, <span class="va" style="color: #111111;">Lat</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">ggtitle</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"대한민국(大韓民國)의 주요 도시 위치🇰🇷"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;">(</span>panel.background <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_rect</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"#AADAFE"</span><span class="op" style="color: #5E5E5E;">)</span>,
        plot.title <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_text</a></span><span class="op" style="color: #5E5E5E;">(</span>margin <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">margin</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220904_Ragg/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>짜잔~ rapp 패키지로 APP 환경을 이용하면 한글과 이모지, 한자가 깨지지 않는 이미지를 손쉽게 얻을 수 있습니다.</p>


</section></section> ]]></description>
  <category>R package</category>
  <category>Ragg</category>
  <guid>https://orange-mansion.com/posts/220904_Ragg/index.html</guid>
  <pubDate>Sat, 03 Sep 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220904_Ragg/Ragg_thumb.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>R Markdown의 차세대 포맷, Quarto</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220827_quarto/index.html</link>
  <description><![CDATA[ 




<section id="quarto가-뭐지" class="level2">
<h2 class="anchored" data-anchor-id="quarto가-뭐지">Quarto가 뭐지</h2>
<p><img src="https://orange-mansion.com/posts/220827_quarto/quarto thumbnail.jpeg" class="img-fluid" style="width:100.0%"></p>
<p>RStudio는 자사의 2022년 컨퍼런스 rstudio::conf(2022)에서 발표한 여러 소식 가운데 가장 중요한 소식으로 이렇게 4가지를 꼽았습니다.</p>
<ol type="1">
<li><p>RStudio의 이름은 Posit으로 바꾼다</p></li>
<li><p>새로운 오픈소스 기반의 과학기술 출판 시스템, Quarto</p></li>
<li><p>Shiny 생태계의 새로운 발전</p></li>
<li><p>tidymodel의 업데이트</p></li>
</ol>
<p>1번은 이미 <a href="https://orange-mansion.com/posts/220821_rstudio-is-becoming-posit/">이 포스트</a>에서 다루었죠? 그 연장선이라고 볼 수 있는 Quarto가 이번 게시물의 주제입니다. Quarto는 R Markdown에 이은 RStudio의 차세대 R 출판 플랫폼입니다. 기존의 R Markdown을 이용하면 R code sript를 Word, HTML, PDF, PPT 등 다양한 문서 형식으로 만들 수 있었습니다. 웹을 통한 출판(Bookdown)까지도 가능했죠.</p>
<p><img src="https://orange-mansion.com/posts/220827_quarto/rmarkdown env.png" class="img-fluid" style="width:100.0%"></p>
<p>그런데 이 R Markdwon이 어느새 10년 가까이 지났습니다. 기능의 편리함은 지적할만한 게 없었지만 R Markdown 생태계가 너무 커져버렸죠. 관련 생태계가 커졌다는 건 오히려 반길 일이지만 덕지덕지 붙어버린 서드파티 패키지들이 많아진 게 문제였습니다. 더 이상 통일된 하나의 R Markdown의 제작과 작업이 되질 못했습니다. 과학, 기술 블로그를 만들 땐 distill package를 사용하고, 웹 프레젠테이션 파일을 만들 땐 xaringan(사륜안) package를 사용하고…</p>
<p>그래서 등장한 게 바로 이 Quarto입니다. R Markdown과 마찬가지로 Knitr와 Pandoc을 기반으로 하고 있고요. 궁극적으로 R Studio는 Quarto 생태계에 다른 언어를 사용하는 사람들끼리 모을 생각을 하고 있습니다. 그래서 저번 Posit 이야기의 연장선이라고 말씀을 드린 겁니다. 그 이유 때문인지 Quarto는 R의 내장 라이브러리가 아닌 독립 소프트웨어로 제작되었습니다. 새로운 시스템 Quarto 단어가 생소할 텐데, Quarto는 4절판을 의미합니다. 8페이지 분량의 텍스트를 두 번 접어서 네 장을 만드는 형식을 뜻하죠. 출판 역사에 의미가 있는 단어를 골랐다고 합니다.</p>
<p><br></p>
<section id="quarto-다운받기" class="level4">
<h4 class="anchored" data-anchor-id="quarto-다운받기">Quarto 다운받기</h4>
<p><a href="https://quarto.org/docs/get-started/" class="uri">https://quarto.org/docs/get-started/</a></p>
<p>Quarto는 위 링크에서 받을 수 있습니다. 링크를 들어가면 나오는 홈페이지에서도 확인할 수 있지만 Quarto는 R 뿐만 아니라 VS code, Jupyter에서도 활용할 수 있습니다.</p>
<p><br></p>
</section>
</section>
<section id="r-markdown과-차이점" class="level2">
<h2 class="anchored" data-anchor-id="r-markdown과-차이점">R Markdown과 차이점</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://orange-mansion.com/posts/220827_quarto/rmarkdown sys.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Quarto의 구조를 알기 위해선 R Markdown에 대한 이해가 필요합니다. 일단 R Markdown 시스템은 위의 그림과 같습니다. Rmd(R 마크다운) 파일을 knitr package를 통해 md(마크다운) 파일로 만들고, pandoc 라이브러리를 통해 문서, PPT, 웹페이지, 책의 형태로 퍼블리싱되는 거죠. knitr은 2012년 Yihui Xie에 의해 개발된 패키지입니다. Knitr 패키지를 이용하면 동적 리포트를 생성할 수 있게 해주죠. md 파일을 다양한 형식으로 변환할 때에는 pandoc 라이브러리를 활용합니다. 정리해보면 기존 R Markdown은 Rmd 파일을 여러 가지 형태의 문서로 퍼블리싱해주는 시스템이라고 할 수 있겠네요.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://orange-mansion.com/posts/220827_quarto/quarto.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">R &amp; stats illustrations by <a href="https://github.com/allisonhorst/stats-illustrations">@allison_horst</a></figcaption><p></p>
</figure>
</div>
<p>Quarto도 비슷합니다. R Markdown과 마찬가지로 Knitr과 pandoc을 활용합니다. 달라진 건 적용 대상입니다. 기존 시스템에선 Rmd만 가능했다면 이제는 Python도 가능합니다. jupyter까지 활용하게 되면서 Python에서 qmd(Qarto markdown) 파일을 작성하면 jupyter를 통해 md 파일로 변환해 다양한 결과물을 만들어 낼 수 있게 된 거죠.</p>
<p><br></p>
<section id="quarto-vs-r-markdown" class="level4">
<h4 class="anchored" data-anchor-id="quarto-vs-r-markdown">Quarto vs R Markdown</h4>
<table class="table">
<colgroup>
<col style="width: 27%">
<col style="width: 32%">
<col style="width: 38%">
</colgroup>
<thead>
<tr class="header">
<th>구분</th>
<th>R Markdown</th>
<th>Quarto</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>기본 포맷</td>
<td>html_document<br>
pdf_document<br>
word_document</td>
<td>html<br>
pdf<br>
word</td>
</tr>
<tr class="even">
<td>비머 포맷(발표자료)</td>
<td>beamer_presentation</td>
<td>beamer</td>
</tr>
<tr class="odd">
<td>PPT</td>
<td>powerpoint_presentation</td>
<td>pptx</td>
</tr>
<tr class="even">
<td>HTML 슬라이드</td>
<td>xaringan<br>
ioslides<br>
revealjs</td>
<td><br>
<br>
revealjs</td>
</tr>
<tr class="odd">
<td>블로그 및 웹사이트</td>
<td>blogdown<br>
distill</td>
<td>Quarto Websites<br>
Quarto Blogs</td>
</tr>
<tr class="even">
<td>책</td>
<td>bookdown</td>
<td>Quarto Books</td>
</tr>
<tr class="odd">
<td>인터랙티브</td>
<td>Shiny Documents</td>
<td>Quarto Interactive Documents</td>
</tr>
<tr class="even">
<td>Paged HTML</td>
<td>pagedown</td>
<td>2022 여름 공개 예정</td>
</tr>
<tr class="odd">
<td>Journal Articles</td>
<td>rticles</td>
<td>2022 여름 공개 예정</td>
</tr>
<tr class="even">
<td>대시보드</td>
<td>flexdashboard</td>
<td>2022 가을 공개 예정</td>
</tr>
</tbody>
</table>
<p>다양한 포맷을 만들기 위해 여러 패키지를 사용했던 R Markdown과 달리, Quarto에서는 Quarto 시스템으로 다 들어왔습니다. 예전 R을 활용해 기술 블로그를 만들기 위해 distll package를 사용했지만, 이젠 Quarto의 Quarto Websites, Blogs를 활용하면 됩니다. 이 블로그도 Quarto Blogs를 이용해 만들었습니다. 아직 공개되지 않은 대시보드와 Journal Articles, Paged HTML도 곧 공개될 예정입니다.</p>
<p><br></p>
</section>
</section>
<section id="quarto의-미래" class="level2">
<h2 class="anchored" data-anchor-id="quarto의-미래">Quarto의 미래</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://orange-mansion.com/posts/220827_quarto/qaurto2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">R &amp; stats illustrations by <a href="https://github.com/allisonhorst/stats-illustrations">@allison_horst</a></figcaption><p></p>
</figure>
</div>
<p>RStudio의 이번 Qaurto 발표는 결국 Posit과 비슷합니다. Python과 Julia 등 다른 언어들까지 포함하는 IDE인 Posit을 발표하고, 새롭게 출시한 Quarto에는 jupyter를 지원하면서 다른 언어 이용자들을 R 커뮤니티에 끌어들이겠다는 겁니다. Python 이용자들도 충분히 웹사이트와 블로그, 책을 만들 수 있다고 유혹하는 것이죠. RStudio의 CEO가 발표한 내용을 살펴보면 미래에는 마치 Google Docs에서 사람들이 자유롭게 문서를 편집하듯이 여러 언어를 사용하는 이용자들이 Quarto 문서를 통해 협업을 하길 구상하고 있더라고요. 물론 아직까지 그런 환경이 갖춰져 있는 건 아니지만, 꽤나 매력적인 미래의 모습입니다. 하루빨리 그런 환경이 오길 바라면서 이번 포스트를 마무리하겠습니다.</p>


</section>

 ]]></description>
  <category>R Markdown</category>
  <category>Quarto</category>
  <guid>https://orange-mansion.com/posts/220827_quarto/index.html</guid>
  <pubDate>Fri, 26 Aug 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220827_quarto/quarto%20thumbnail.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>RStudio가 Posit으로 이름을 바꾼다</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220821_Rstudio-is-becoming-Posit/index.html</link>
  <description><![CDATA[ 




<section id="rstudio-is-becoming-posit" class="level2">
<h2 class="anchored" data-anchor-id="rstudio-is-becoming-posit">RStudio is becoming Posit</h2>
<p><img src="https://orange-mansion.com/posts/220821_Rstudio-is-becoming-Posit/posit.jpeg" class="img-fluid" alt="posit logo" style="width:100.0%"></p>
<p>프로그래밍 언어 그 자체를 가지고 명령어를 통해 작업을 하는 건 많이 어렵습니다. 불편하기도 하고요. 그럴 때 사용하는 게 바로 IDE(통합계발환경, Intergrated Development Environment)입니다. Python을 이용할 때 사용하는 PyCharm이나 Jupyter Notebook, 혹은 MS의 텍스트 에디터 VS Code가 대표적인 IDE라고 할 수 있을겁니다.</p>
<p>RStudio는 R의 가장 대표 IDE입니다. 그런데 이 RStudio가 지난 7월 말, 본인들의 이름을 바꾼다고 선언했습니다. 아마 8월 중으로 이름표를 새로 바꿀 것 같은데요, 그들이 공개한 RStudio의 새로운 이름은 Posit입니다. RStudio는 왜 갑자기 이름을 Posit으로 바꾸려는걸까요?</p>
<p><br></p>
</section>
<section id="rstudio가-이름을-바꾸는-이유는" class="level2">
<h2 class="anchored" data-anchor-id="rstudio가-이름을-바꾸는-이유는">RStudio가 이름을 바꾸는 이유는</h2>
<section id="a-broader-focus" class="level4">
<h4 class="anchored" data-anchor-id="a-broader-focus">1. A Broader Focus</h4>
<blockquote class="blockquote">
<p>“That name has started to feel increasing constraining.”</p>
</blockquote>
<p>데이터 관련 분석 프로그래밍, 혹은 데이터 사이언스에서 R은 항상 Python과 비교됩니다. 데이터 관련 공부를 시작하면서 R과 Python 사이의 양자택일은 쉽지 않은 고민이죠. 전반적인 흐름은 Python에게 웃어주고 있는 모양세입니다. 여기에 Julia까지 참전하면서 R의 입지는 점점 줄어들고 있습니다. R 이름을 딱 박고 있는 RStudio 입장에서 반길일이 아니죠.</p>
<p>RStudio가 여지껏 가만히 있었던 건 아닙니다. RStudio는 이미 Python을 지원하고 있습니다. R 인터페이스로 Python을 할 수 있는 reticulate 패키지도 있고요. 하지만 Python 이용자가 RStudio를 이용하는 건 쉽지 않은 선택입니다. 이미 잘 갖춰진 Python 전용 IDE를 쓰지 뭣하러 RStudio를 씁니까. 아니면 호환성 좋은 VS code를 쓰면 되죠.</p>
<p>RStudio의 수석과학자 해들리 위컴은 RStudio라는 이름이 가지는 한계를 인정했습니다. 누가봐도 RStudio는 R만 개발할 수 있는 IDE로 느껴집니다. 그래서 그들은 선택을 한 겁니다. 우리 프로그램에 R 이름 뗄 테니까, Python, Julia 등 다른 언어 쓰는 사람들도 우리 개발환경으로 들어오라고요.</p>
<p><br></p>
</section>
<section id="a-large-community" class="level4">
<h4 class="anchored" data-anchor-id="a-large-community">2. A Large Community</h4>
<p>R community는 RStudio를 중심으로 비교적 잘 운영되고 있습니다. 하지만 위에서 언급한것처럼 규모 측면이나 확장성 측면에서 한계도 명확하죠. RStudio는 이번 Posit으로의 개편을 통해 다른 커뮤니티와의 융합을 목적으로 두고 있습니다. 그렇다고 R에서 Python으로의 전환이 이뤄지진 않을 겁니다.</p>
<blockquote class="blockquote">
<p>“I’m not going to stop writing R code. I’m not going to learn Python.”</p>
</blockquote>
<p>해들리 위컴이 이렇게 밝힌 이상 Python으로의 거대한 전환은 없을 것 같네요. Posit으로의 변화에 발맞춰 또 다른 변화가 있으니 바로 Quarto입니다. 차세대 Rmarkdown인 Quarto에서는 Jupyter, VS code, Observable Javascript를 기본적으로 실행할 수 있다고 합니다. Quarto에 대해서는 다음 포스트를 통해 더 깊이 이야기를 해보도록 하겠습니다. 여튼 개편될 Posit은 아마 10월 이후에나 만나볼 수 있을 것 같습니다. <a href="https://posit.co">홈페이지</a>는 10월 중으로 오픈 예정이라고 합니다.</p>
<p><br></p>
</section>
</section>
<section id="posit의-뜻은" class="level2">
<h2 class="anchored" data-anchor-id="posit의-뜻은">Posit의 뜻은</h2>
<p>Posit을 사전에서 찾아보면 설치하다, ~을 사실로 가정하다, 아이디어 및 이론을 제시하다로 나옵니다. 토론 과정에서 아이디어를 제시하는 경우 posit이라는 단어를 쓰는 셈인거죠. RStudio(IDE 이름이 회사 이름이기도 합니다)에서는 posit이라는 단어가 데이터 분석가, 데이터 과학자들의 업무와 잘 어울린다는 판단을 했고, RStudio의 새로운 이름으로 Posit을 결정했다고 발표했습니다. 회사명도 Posit으로 바뀔 예정입니다.</p>
<p>조금 더 지켜봐야겠지만 R을 공부하는 제 입장에서 이번 RStudio의 변화는 반길만한 일입니다. 여러 언어 환경에 있는 사람들을 한 IDE에 모아둘 수 있다면 협업도 더 원활하게 이뤄질테니까요. 앞으로 발표될 Posit에 대한 정보는 꾸준히 정리해보겠습니다.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>IDE</category>
  <guid>https://orange-mansion.com/posts/220821_Rstudio-is-becoming-Posit/index.html</guid>
  <pubDate>Sat, 20 Aug 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220821_Rstudio-is-becoming-Posit/posit.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>iris 대신 귀여운 penguins package 씁시다</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220527_palmerpenguins-package/index.html</link>
  <description><![CDATA[ <section id="palmerpenguins-package" class="level2"><h2 class="anchored" data-anchor-id="palmerpenguins-package">palmerpenguins package</h2>
<p><img src="https://orange-mansion.com/posts/220527_palmerpenguins-package/palmerpenguins.png" class="img-fluid" style="width:25.0%"></p>
<p>오늘 소개할 R package는 palmerpenguins package입니다. 남극의 파머 군도에 있는 3곳의 섬에서 관찰된 3종의 펭귄 데이터가 담겨져 있죠.</p>
<section id="paler-penguins" class="level3"><h3 class="anchored" data-anchor-id="paler-penguins">paler penguins</h3>
<p><img src="https://orange-mansion.com/posts/220527_palmerpenguins-package/penguins.png" class="img-fluid" style="width:100.0%"></p>
<p>파머 군도에 있는 Dreams Island, Torgersen Island, Biscoe Point에는 세 종의 펭귄이 살고 있습니다. 턱끈 펭귄(Chinstrap), 젠투 펭귄(Gentoo), 아델리 펭귄(Adélie) 이렇게 말이죠. palmerpenguins package에는 이 세 펭귄의 크기, 성별 정보가 담겨있습니다. 펭귄들의 데이터는 미국의 장기 생태 연구 네트워크(US Long Term Ecological Research Network)에서 운영하는 프로그램의 일부로, 파머 군도에서 2007년부터 2009년까지 크리스틴 고먼 박사에 의해 수집됐습니다.</p>
<p><br></p>
</section><section id="no-iris-yes-penguin" class="level3"><h3 class="anchored" data-anchor-id="no-iris-yes-penguin">No iris, Yes penguin</h3>
<p>R을 이용하는 유저 중에 iris 데이터를 한 번이라도 안 써본 유저는 없을 겁니다. iris 데이터는 로널드 피셔(Ronald Fisher)의 1936년 논문에 포함되어 있던 유서 깊은 자료입니다. R에 기본적으로 내장되어 있는 데이터이기도 하고 기본적인 R 연산, 시각화를 공부하는데 iris만한 데이터가 없죠. 그런데 이 iris 데이터를 이제 그만 쓰자는 목소리가 나오고 있어요. 바로 로널드 피셔 때문이죠.</p>
<p><br></p>
</section><section id="ronald-fisher" class="level3"><h3 class="anchored" data-anchor-id="ronald-fisher">Ronald Fisher</h3>
<p>피셔는 통계학자이자 유전학자이자 진화생물학자였습니다. 현대 통계학에 지대한 공을 세운 학자로 알려져있습니다. 통계학자 앤더스 할(Anders Hald)은 피셔를 두고 현대 통계학의 토대를 거의 혼자서 만들어낸 천재로 지칭할 정도죠. Bootstrap을 처음으로 제안한 브래들리 에프론(스탠퍼드 대학교 통계학과 교수)도 로널드 피셔를 20세기 통계에서 가장 중요한 인물이라고 말할 정도입니다.</p>
<p>F-검정, F-분포의 F가 바로 피셔의 F입니다. 피셔가 F-분포를 처음 제안했고, 조지 W 스네데코가 이후에 완성하면서 처음 제안한 피셔를 기려 F-분포, F-검정이라고 명명한거죠. 그래서 F-분포를 피셔-스네데코 분포라고도 합니다. ggplot2에서 제공해주는 stat_function을 활용해서 간단한 F-분포를 그려봤습니다. `</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyverse.tidyverse.org">tidyverse</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_function.html">stat_function</a></span><span class="op" style="color: #5E5E5E;">(</span>fun <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"df"</span>, args <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span>df1 <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span>, df2 <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_classic</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220527_palmerpenguins-package/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 자유도가 (a, b)인 F-분포를 그리려면 args의 df1, df2에 a, b를 넣으면 됩니다.</span>
<span class="co" style="color: #5E5E5E;"># 위의 그래프는 자유도가 5, 10인 F-분포입니다.</span></code></pre></div>
</div>
<p>전체 대상(모집단)의 특성(모수)을 파악하기 위해 표본을 추출해 추론하는 건 현대 통계에서 아주 당연한 접근방식이죠? 이 흐름을 만든 게 바로 로널드 피셔입니다. 피셔는 모집단과 표본집단을 구분짓고, 일부(표본집단)를 통해 전체(모집단)에 대한 분석이 가능하다는 걸 귀무가설로 증명해 냈습니다. 귀무가설(null hypothesis)도 피셔가 정의한 개념입니다.</p>
<p>그리고 이걸 발전시켜서 추측통계학, 이른바 추계학(stochastic)을 탄생시키죠. 추계학은 통계의 범위를 수학뿐만 아니라 여론조사, 제품검사, 의약품의 효과 등 사회과학의 방법론까지 확장시켰습니다. 20세기 통계에서 가장 중요한 인물이라고 칭하는 게 부족함이 없어보입니다.</p>
<p>그런데 그 대단한 피셔가 우생학자로도 유명했습니다. BLM 시위 이후 피셔의 우생학자로서의 삶이 다시 재조명되면서 과학 분야 전반에서 정화의 흐름이 나오고 있습니다. 영국의 명문대학 유니버시티 칼리지 런던은 피셔의 이름이 붙은 연구 센터의 이름을 Center for Computational Biology로 바꾸기도 했죠. 그래서 iris를 과연 계속 써야하는지에 대한 논의가 나온 겁니다. 그 대안으로 떠오른 데이터셋이 바로 palmerpenguins package의 펭귄 데이터입니다.</p>
<p><br></p>
</section></section><section id="all-about-package" class="level2"><h2 class="anchored" data-anchor-id="all-about-package">All about package</h2>
<section id="penguins" class="level3"><h3 class="anchored" data-anchor-id="penguins">penguins</h3>
<p>파머 군도에서 수집된 원자료는 penguins_raw에 담겨있습니다. 관측치를 모두 활용하고 싶다면 penguins_raw를 불러오면 됩니다. 아마 대부분의 경우에는 penguins 데이터면 충분할겁니다. penguins 데이터에는 8개의 변수, 344개의 개체 정보가 들어가 있습니다. bill_length와 bill_depth는 펭귄의 부리의 크기를 나타낸 정보입니다. 아래 그림을 보면 length와 depth의 차이를 알 수 있어요.</p>
<p><img src="https://orange-mansion.com/posts/220527_palmerpenguins-package/culmen_depth.png" class="img-fluid" style="width:100.0%"></p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;">palmerpenguins</span><span class="fu" style="color: #4758AB;">::</span><span class="va" style="color: #111111;"><a href="https://allisonhorst.github.io/palmerpenguins/reference/penguins.html">penguins</a></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># species : 펭귄 종을 나타내는 factor형 변수(Adélie, Chinstrap, Gentoo)</span>
<span class="co" style="color: #5E5E5E;"># island : 남극 파머 군도의 섬을 나타내는 factor형 변수(Biscoe, Dreams, Torgersen)</span>
<span class="co" style="color: #5E5E5E;"># bill_length_mm : 펭귄 부리의 길이를 ㎜단위로 나타낸 number형 변수</span>
<span class="co" style="color: #5E5E5E;"># bill_depth_mm : 펭귄 부리의 깊이를 ㎜단위로 나타낸 number형 변수</span>
<span class="co" style="color: #5E5E5E;"># flipper_length_mm : 펭귄 물갈퀴의 길이를 ㎜단위로 나타낸 integer형 변수</span>
<span class="co" style="color: #5E5E5E;"># body_mass_g : 펭귄 몸무게를 g단위로 나타낸 integer형 변수</span>
<span class="co" style="color: #5E5E5E;"># sex : 펭귄 성별을 나타낸 factor형 변수(female, male)</span>
<span class="co" style="color: #5E5E5E;"># year : 연구 시점이 담긴 integer형 변수(2007, 2008, 2009)</span></code></pre></div>
</div>
</section><section id="simpsons-paradox" class="level3"><h3 class="anchored" data-anchor-id="simpsons-paradox">Simpson’s paradox</h3>
<p>iris대신 제시되는 데이터셋인만큼 기본적인 시각화를 연습하는데 penguins 패키지는 부족함이 없습니다. 펭귄 부리의 길이와 깊이를 가지고 scatter plot을 그려보겠습니다. geom_smooth로 상관관계를 살펴보면 음의 상관관계가 있다고 볼 수 있겠네요.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">penguins</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">bill_length_mm</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">bill_depth_mm</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span>size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_smooth.html">geom_smooth</a></span><span class="op" style="color: #5E5E5E;">(</span>method <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"lm"</span>, se <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">FALSE</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_classic</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220527_palmerpenguins-package/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>하지만 종별로 나눠서 살펴보면 어떨까요? 이번엔 Adélie, Chinstrap, Gentoo 세 종별로 scatter plot을 그려서 상관관계를 살펴보겠습니다. 종별로 보면 부리의 길이와 깊이는 양의 상관관계가 있어 보입니다. 야생의 데이터에서 확인할 수 있는 심슨의 역설(Simpson’s Paradox)의 아주 좋은 사례입니다. 영국의 통계학자 에드워드 심슨이 정리한 이 역설은 각각의 변수를 살피지 않고 전체 통계만 보고 판단하다가 발생할 수 있는 함정입니다.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">penguins</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">bill_length_mm</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">bill_depth_mm</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>color <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">species</span>, 
                 shape <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">species</span><span class="op" style="color: #5E5E5E;">)</span>,
             size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_smooth.html">geom_smooth</a></span><span class="op" style="color: #5E5E5E;">(</span>method <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"lm"</span>, se <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>color <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">species</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_manual.html">scale_color_manual</a></span><span class="op" style="color: #5E5E5E;">(</span>values <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"darkorange"</span>,<span class="st" style="color: #20794D;">"darkorchid"</span>,<span class="st" style="color: #20794D;">"cyan4"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_classic</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;">(</span>legend.position <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"none"</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220527_palmerpenguins-package/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section></section> ]]></description>
  <category>R package</category>
  <category>palmerpenguins</category>
  <guid>https://orange-mansion.com/posts/220527_palmerpenguins-package/index.html</guid>
  <pubDate>Thu, 26 May 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220527_palmerpenguins-package/penguin.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>대선 득표율 지도 시각화 with R</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220320_geofacet/index.html</link>
  <description><![CDATA[ <section id="geo_grid를-활용한-시각화" class="level2"><h2 class="anchored" data-anchor-id="geo_grid를-활용한-시각화">geo_grid를 활용한 시각화</h2>
<section id="해외의-선거-시각화" class="level4"><h4 class="anchored" data-anchor-id="해외의-선거-시각화">해외의 선거 시각화</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/220320_geofacet/fivethirtyeight_vote_graph.webp" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">FiveThirtyEight의 2020 미 대선 선거결과 시각화</figcaption><p></p>
</figure>
</div>
<p>해외 언론에서 선거 결과를 시각화한 기사를 볼 때마다 드는 생각이 있습니다. “아 우리나라도 저렇게 격자형태로 시각화하면 멋드러지지 않을까…” 국내에서는 시군구 혹은 읍면동 단위로 색을 칠하는 형태가 대부분이지 그 안에 그래프를 넣어서 시각화하기가 힘들어요. 미국은 50개 주에 1개의 특별구로 이루어졌으니, 필요한 격자는 51개 뿐이지만 우리나라의 시군구는 250개. 큰 권역 구분 정도는 다양한 시각화를 시도할 수 있지만 시군구 단위로 하기엔 부담이 될 수 있는거죠.</p>
<p><br></p>
</section><section id="geofacet-package" class="level4"><h4 class="anchored" data-anchor-id="geofacet-package">geofacet package</h4>
<p>그래도 해보고 싶습니다. 우리나라도 시군구 단위로 멋드러지게 만들고 싶어요. 그래서(!) 시군구 단위 그리드 만들어 봤습니다. 활용한 패키지는 <a href="https://hafen.github.io/geofacet/">geofacet</a>입니다. geofacet은 말 그대로 지리적 정보(geo)로 면(facet)을 분할해 볼 수 있는 패키지인데요, 이 패키지가 좋은 건 Grid Designer라는 기능을 통해 자기만의 그리드를 만들 수 있다는 거죠. 그래서 지도를 펼치고 250개 시군구의 위치를 하나하나 지정해가며 만들어 봤습니다. geofacet package에도 제출해 놓았습니다. <a href="https://github.com/hafen/geofacet/issues/358">여기에서</a> 확인할 수 있어요.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://readr.tidyverse.org">readr</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="va" style="color: #111111;">mygrid</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://readr.tidyverse.org/reference/read_delim.html">read_csv</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"kr_sgg.csv"</span>, col_types <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://readr.tidyverse.org/reference/cols.html">cols</a></span><span class="op" style="color: #5E5E5E;">(</span>code <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://readr.tidyverse.org/reference/parse_atomic.html">col_character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">mygrid</span><span class="op" style="color: #5E5E5E;">[</span>,<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span>,<span class="fl" style="color: #AD0000;">3</span>,<span class="fl" style="color: #AD0000;">4</span>,<span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
  code    row   col name               
  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;              
1 11110     5     7 서울특별시 종로구  
2 11140     6     7 서울특별시 중구    
3 11170     7     7 서울특별시 용산구  
4 11200     6     8 서울특별시 성동구  
5 11215     7     8 서울특별시 광진구  
6 11230     5     8 서울특별시 동대문구</code></pre>
</div>
</div>
<p>만들어 놓은 대한민국 시군구 단위 그리드 구조는 아주 간단합니다. 이름, row, col, code 정도로 이루어져 있죠. geofacet 함수는 그리드의 행(row)과 열(col)을 인식해서 그 모양에 맞춰 facet해 주는 구조입니다. 이 그리드를 가지고 그려보면 이런 모양이 나옵니다.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;">geofacet</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/geofacet/man/grid_preview.html">grid_preview</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">mygrid</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220320_geofacet/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>짜잔~ 면적이 서로 다른 시군구를 동일한 면적 단위로 표현했기때문에 실제 위치와는 차이가 있을 수 있습니다. 시군구 그리드에 적용된 코드는 행정안전부에서 제공하고 있는 행정표준코드를 따라서 만들어 놓았습니다. 종로구(11110), 중구(11140) 이런식으로 말이죠. 시군구 단위의 여러 데이터들을 합쳐서 시각화, 분석할 일 있으면 행정코드 기준으로 정리한다면 간단하게 할 수 있을 겁니다.</p>
<p><br></p>
</section></section><section id="geo_grid-ggplot" class="level2"><h2 class="anchored" data-anchor-id="geo_grid-ggplot">geo_grid + ggplot</h2>
<section id="선거-데이터-만들기" class="level4"><h4 class="anchored" data-anchor-id="선거-데이터-만들기">선거 데이터 만들기</h4>
<p>이제 여기에 해야할 것은 각각의 시군구에 그래프를 넣어보는 겁니다. 이번 대통령 선거 득표 정보를 바탕으로 그래프를 넣어보려고 해요. 선관위 개표 데이터를 정리해서 다음과 같은 데이터(PE_20)를 만들어 봤습니다. PE_20 데이터는 <a href="https://github.com/chichead/chichead.github.io/blob/master/_posts/geofacet_package/Presidential_Election_2022.xlsx">여기에서</a> 다운받을 수 있습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://readxl.tidyverse.org">readxl</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tibble.tidyverse.org/">tibble</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">PE_20</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://readxl.tidyverse.org/reference/read_excel.html">read_excel</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Presidential_Election_2022.xlsx"</span><span class="op" style="color: #5E5E5E;">)</span>
<span class="va" style="color: #111111;">PE_20</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/as_tibble.html">as_tibble</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 21
   code 구분    시군…¹  선거…² 투표수 이재명 윤석열 심상정 오준호 허경영 이백윤
  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
1 11110 서울특… 종로구  129968 100629  46130  49172   3115     53    558     42
2 11140 서울특… 중구    111448  84998  38244  42906   2310     46    463     19
3 11170 서울특… 용산구  199077 152068  60063  85047   4374     67    755     37
4 11200 서울특… 성동구  252087 197240  84411 103880   5365    123    969     50
5 11215 서울특… 광진구  303582 235471 109922 113733   7072    155   1416     52
6 11230 서울특… 동대문… 300928 232106 108171 112890   6416    151   1304     44
# … with 10 more variables: 옥은호 &lt;dbl&gt;, 김경재 &lt;dbl&gt;, 조원진 &lt;dbl&gt;,
#   김재연 &lt;dbl&gt;, 이경희 &lt;dbl&gt;, 김민찬 &lt;dbl&gt;, 계 &lt;dbl&gt;, 무효투표수 &lt;dbl&gt;,
#   기권수 &lt;dbl&gt;, 개표율 &lt;dbl&gt;, and abbreviated variable names ¹​시군구명,
#   ²​선거인수</code></pre>
</div>
</div>
<p>PE_20 데이터에는 각 시군구 단위로 후보별 득표수를 넣어 두었습니다. 시군구별 선거인수, 후보별 득표수, 무효투표수, 기권수 등… 이 데이터로 시각화를 바로 할 순 없습니다. 우리에게 필요한 건 각 후보별 득표율이니까, 조금 더 정제할 필요가 있죠. 일단 득표율 TOP3 후보의 득표율을 계산해보겠습니다. 득표율은 후보별 투표수를 전체 투표수 - 무효투표수로 나누면 됩니다.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://dplyr.tidyverse.org">dplyr</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">PE_20</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">PE_20</span> |&gt; <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;">(</span>lee_R <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">이재명</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">투표수</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">무효투표수</span><span class="op" style="color: #5E5E5E;">)</span>,
                         yoon_R <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">윤석열</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">투표수</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">무효투표수</span><span class="op" style="color: #5E5E5E;">)</span>,
                         sim_R <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">심상정</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">투표수</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">무효투표수</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">PE_20_rate</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">PE_20</span> |&gt; <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/select.html">select</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">code</span>, <span class="va" style="color: #111111;">lee_R</span>, <span class="va" style="color: #111111;">yoon_R</span>, <span class="va" style="color: #111111;">sim_R</span>, <span class="va" style="color: #111111;">구분</span>, <span class="va" style="color: #111111;">시군구명</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>
<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20_rate</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 6
   code lee_R yoon_R  sim_R 구분       시군구명
  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   
1 11110 0.464  0.495 0.0313 서울특별시 종로구  
2 11140 0.454  0.510 0.0274 서울특별시 중구    
3 11170 0.399  0.564 0.0290 서울특별시 용산구  
4 11200 0.432  0.532 0.0275 서울특별시 성동구  
5 11215 0.472  0.488 0.0304 서울특별시 광진구  
6 11230 0.471  0.492 0.0279 서울특별시 동대문구</code></pre>
</div>
</div>
<p>제대로 계산되었는지 비교해봅시다. 선관위 홈페이지에서 살펴보면 종로구에서 3명의 후보의 득표율이 46.42%, 49.48%, 3.13%였고, 중구에서의 득표율이 각각 45.42%, 50.96%, 2.74% 군요. 계산된 것과 비교해보니 맞는것 같습니다. 계산된 데이터는 wide form인데 시각화를 위해선 long form으로 조정할 필요가 있어요.</p>
<p><br></p>
</section><section id="long-form-으로-만들기" class="level4"><h4 class="anchored" data-anchor-id="long-form-으로-만들기">long form 으로 만들기</h4>
<p>long form으로 바꾸는 법은 여러가지가 있지만 여기선 2개를 소개해드리겠습니다. 먼저 tidyr 패키지의 gather 함수. gather 함수가 직관적이지 않다면 그 대안으로 나온 pivot_longer를 사용하는 것도 방법입니다. 두 함수의 결과는 같으니까 원하는 것 사용하면 될 겁니다. tidyr 패키지 제작자인 해들리 위컴은 새로 나온 pivot_longer 함수를 추천하고 있어요.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://dplyr.tidyverse.org">dplyr</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyr.tidyverse.org">tidyr</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">PE_20_final</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">PE_20_rate</span> |&gt; <span class="fu" style="color: #4758AB;"><a href="https://tidyr.tidyverse.org/reference/gather.html">gather</a></span><span class="op" style="color: #5E5E5E;">(</span>key <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cand"</span>, value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"rate"</span>, <span class="va" style="color: #111111;">lee_R</span>, <span class="va" style="color: #111111;">yoon_R</span>, <span class="va" style="color: #111111;">sim_R</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="co" style="color: #5E5E5E;"># key: long form 데이터로 바꾸었을 때 이름이 될 칼럼명</span>
<span class="co" style="color: #5E5E5E;"># value: long form 데이터로 바꾸었을 때 값이 들어갈 칼럼명</span>
<span class="co" style="color: #5E5E5E;"># PE_20_rate의 칼럼 중 후보별 득표율 칼럼 3개(lee_R, yoon_R, sim_R)를 써주면 됩니다.</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20_final</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
   code 구분       시군구명 cand   rate
  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;
1 11110 서울특별시 종로구   lee_R 0.464
2 11140 서울특별시 중구     lee_R 0.454
3 11170 서울특별시 용산구   lee_R 0.399
4 11200 서울특별시 성동구   lee_R 0.432
5 11215 서울특별시 광진구   lee_R 0.472
6 11230 서울특별시 동대문구 lee_R 0.471</code></pre>
</div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;">PE_20_final2</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">PE_20_rate</span> |&gt; <span class="fu" style="color: #4758AB;"><a href="https://tidyr.tidyverse.org/reference/pivot_longer.html">pivot_longer</a></span><span class="op" style="color: #5E5E5E;">(</span>cols <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://tidyselect.r-lib.org/reference/starts_with.html">ends_with</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"R"</span><span class="op" style="color: #5E5E5E;">)</span>, 
                                           names_to <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cand"</span>,
                                           values_to <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"rate"</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="co" style="color: #5E5E5E;"># cols: long form 데이터로 바꾸고 싶은 칼럼들(lee_R, yoon_R, sim_R)</span>
<span class="co" style="color: #5E5E5E;"># ends_with: 동일한 단어로 끝나는 애들만 고를 때 사용하는 함수(tidyselect package의 함수)</span>
<span class="co" style="color: #5E5E5E;"># names_to : long form 데이터로 바꾸었을 때 lee_R, yoon_R, sim_R이 들어갈 칼럼 이름</span>
<span class="co" style="color: #5E5E5E;"># values_to : long form 데이터로 바꾸었을 때 value 값에 들어갈 칼럼 이름</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20_final2</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
   code 구분       시군구명 cand     rate
  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;   &lt;dbl&gt;
1 11110 서울특별시 종로구   lee_R  0.464 
2 11110 서울특별시 종로구   yoon_R 0.495 
3 11110 서울특별시 종로구   sim_R  0.0313
4 11140 서울특별시 중구     lee_R  0.454 
5 11140 서울특별시 중구     yoon_R 0.510 
6 11140 서울특별시 중구     sim_R  0.0274</code></pre>
</div>
</div>
<p><br></p>
</section><section id="ggplot-그래프-그리기" class="level4"><h4 class="anchored" data-anchor-id="ggplot-그래프-그리기">ggplot 그래프 그리기</h4>
<p>데이터도 정리가 되었겠다… 이제 이것을 가지고 그래프로 그려서 그리드에 넣으면 끝입니다. 일단 후보별 득표율을 가지고 지역별로 들어갈 바 차트가 어떤 모양이 될지, 샘플을 만들어보겠습니다. 서울특별시 종로구(code = 11110)를 가지고 예시로 그려봅시다.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 그래프를 그렸을 때 기호순으로 나열될 수 있도록 factor level을 부여해줍니다.</span>
<span class="co" style="color: #5E5E5E;"># coord_flip()를 사용하면 후보의 순서가 뒤집어지기때문에 factor level은 역순으로.</span>
<span class="co" style="color: #5E5E5E;"># 각 후보에 맞춰서 컬러 팔레트 설정해줍니다.</span>

<span class="va" style="color: #111111;">PE_20_final</span><span class="op" style="color: #5E5E5E;">$</span><span class="va" style="color: #111111;">cand</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20_final</span><span class="op" style="color: #5E5E5E;">$</span><span class="va" style="color: #111111;">cand</span>, levels <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"sim_R"</span>, <span class="st" style="color: #20794D;">"yoon_R"</span>, <span class="st" style="color: #20794D;">"lee_R"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>
<span class="va" style="color: #111111;">data_11110</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">PE_20_final</span> |&gt; <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/filter.html">filter</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">code</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">11110</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyverse.tidyverse.org">tidyverse</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">data_11110</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">cand</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">rate</span>, fill <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">cand</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_bar.html">geom_col</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/coord_flip.html">coord_flip</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_manual.html">scale_fill_manual</a></span><span class="op" style="color: #5E5E5E;">(</span>values <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"#F7EF99"</span>, <span class="st" style="color: #20794D;">"#fc7b84"</span>, <span class="st" style="color: #20794D;">"#008EC6"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_minimal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;">(</span>
    strip.background <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,
    strip.text.x <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,
    axis.text.y <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>
    <span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220320_geofacet/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="768"></p>
</div>
</div>
</section><section id="최종-시각화" class="level4"><h4 class="anchored" data-anchor-id="최종-시각화">최종 시각화</h4>
<p>이제 이 그래프를 250개 시군구에 넣으면 됩니다. 어떻게? geofacet::facet_geo 함수를 쓰면 단 한 줄이면 만들 수 있습니다. 전국 지도에서 3위 후보의 득표율이 보이질 않으니… 일단 제외하고 1, 2위 후보만 시각화를 해 보겠습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 위의 코드에서 추가된 건 facet_geo()뿐</span>
<span class="co" style="color: #5E5E5E;"># 만들어 놓은 그리드(mygrid)와 join할 데이터(code)를 입력하면 끝</span>
<span class="co" style="color: #5E5E5E;"># 시각화 정리는 theme에서 약간의 조정으로 마무리</span>

<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://github.com/hafen/geofacet">geofacet</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/subset.html">subset</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">PE_20_final</span>, <span class="va" style="color: #111111;">cand</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"sim_R"</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">cand</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">rate</span>, fill <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">cand</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_bar.html">geom_col</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/coord_flip.html">coord_flip</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_manual.html">scale_fill_manual</a></span><span class="op" style="color: #5E5E5E;">(</span>values <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"#fc7b84"</span>, <span class="st" style="color: #20794D;">"#008EC6"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/geofacet/man/facet_geo.html">facet_geo</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">~</span> <span class="va" style="color: #111111;">code</span>, grid <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">mygrid</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_minimal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;">(</span>
    strip.background <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,
    strip.text.x <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,
    axis.text.x <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,
    axis.text.y <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>
  <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> 
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_continuous.html">scale_y_continuous</a></span><span class="op" style="color: #5E5E5E;">(</span>breaks <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">.5</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, limits <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220320_geofacet/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="768"></p>
</div>
</div>
<p>짜잔! 이러면 우리가 원했던 250개 시군구 그리드에 각각의 후보별 득표율을 그릴수 있게 되었습니다.</p>


</section></section> ]]></description>
  <category>R</category>
  <category>Visualization</category>
  <guid>https://orange-mansion.com/posts/220320_geofacet/index.html</guid>
  <pubDate>Sat, 19 Mar 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220320_geofacet/map.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>bump chart를 그리고 싶을 때, ggbump package</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/220220_ggbump-package/index.html</link>
  <description><![CDATA[ <section id="ggbump-package" class="level2"><h2 class="anchored" data-anchor-id="ggbump-package">ggbump package</h2>
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/thumbnail.png" class="img-fluid" style="width:100.0%"></p>
<section id="ggbumps-name" class="level3"><h3 class="anchored" data-anchor-id="ggbumps-name">ggbump’s name</h3>
<p>ggplot2는 grammar of graphics(a.k.a. gg)을 토대로 시각화를 만드는 패키지입니다. 2는 ver.2의 의미를 담았죠. gg는 릴랜드 윌킨스의 동명의 책 The Grammar of Graphics에서 따온 건데, 이 책에서 릴랜드는 데이터를 어떻게 시각적으로 표현할 것인지에 대해 다룹니다. gg에 대한 이야기는 나중에 다른 포스트에서 다루도록 하겠습니다.</p>
<p>ggplot2 패키지의 문법 기반 위에서 돌아가는 서브 패키지들은 보통 gg라는 접두사로 시작됩니다. ggbump 역시 ggplot2의 일원이라고 이해할 수 있어요. 그렇다면 bump는 무엇을 의미하는 걸까요? 자동차의 범퍼, 혹은 놀이동산의 범퍼카를 떠올리면 bump의 의미를 유추할 수 있어요. bump는 바로, 충돌을 의미합니다. 충돌과 차트, 어떤 연관이 있는 걸까요?</p>
<p><br></p>
</section><section id="bump-chart" class="level3"><h3 class="anchored" data-anchor-id="bump-chart">bump chart</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/220220_ggbump-package/may_bump.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">2022 May Bumps, Corpus Christi College</figcaption><p></p>
</figure>
</div>
<p>영국의 케임브리지 대학에는 The bump라고 불리는 조정 경기가 있습니다. 케임브리지를 가로지르는 캠 강(river Cam) 은 나란히 경주하기에는 너무 좁아서 한 줄로 경주하는 독특한 조정 경주를 진행해왔어요. 19세기 초부터 시작된 이 경기 이름이 바로 The bump입니다. The bump의 경주 방식은 이렇습니다. 우선 강을 따라 한 줄로 경기를 시작합니다. 각 선수들은 전속력으로 노를 저어 앞에 있는 보트를 따라잡고 충돌(bump)하죠. 그렇게 되면 앞에 있는 조정 팀을 추월한 것으로 인정, 순위가 올라가게 됩니다. 주최 측에서는 경기의 진행 상황을 매핑하는 차트를 그려서 제공했는데, 이 차트를 bump chart라고 불렀습니다. 아래 차트는 2020년 사순절에 치러진 대회(Lent Bump)의 남자부 경기 결과입니다. 어떤 차트인지 감이 오죠?</p>
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/bumpchart_thebump.png" class="img-fluid" style="width:50.0%"></p>
<p><br></p>
</section><section id="ggbumps-logo" class="level3"><h3 class="anchored" data-anchor-id="ggbumps-logo">ggbump’s logo</h3>
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/ggbump%20logo.png" class="img-fluid" style="width:25.0%"></p>
<p>로고에는 3개의 노드(점), 노드에 연결된 시그모이드 곡선이 보입니다. 시그모이드(Sigmoid) 곡선은 S자 모양의 부드러운 곡선을 의미합니다. Sigmoid라는 단어의 뜻이 S자 모양이거든요. 시그모이드 곡선은 로지스틱 방정식, 정규분포의 누적분포함수에서 확인할 수 있습니다. 아래 차트를 보면 정규분포의 누적분포함수의 부드러운 S자 곡선을 확인할 수 있습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyverse.tidyverse.org">tidyverse</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="co" style="color: #5E5E5E;"># ggplot2에서 주요 확률분포 곡선을 그릴 때는 stat_function을 활용하면 됩니다</span>
<span class="co" style="color: #5E5E5E;"># 정규분포(norm)의 누적분포함수를 그릴 땐 fun = pnorm 조건을 쓰세요</span>
<span class="co" style="color: #5E5E5E;"># 마찬가지로 지수분포(exp)에서 누적분포함수를 그릴 땐 fun = pexp 조건을 쓰면 됩니다.</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;">(</span>X <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">X</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_function.html">stat_function</a></span><span class="op" style="color: #5E5E5E;">(</span>fun <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">pnorm</span>, colour <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"black"</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">ggtitle</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Cumulative Normal Distribution of X ~ N(0,1)"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_classic</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 참고로 접두사 p는 누적분포함수(CDF)를 의미하고, </span>
<span class="co" style="color: #5E5E5E;"># 접두사 q는 누적분포함수(CDF)의 역함수인 분위수함수를, </span>
<span class="co" style="color: #5E5E5E;"># 접두사 r은 무작위 난수 샘플을 의미합니다</span></code></pre></div>
</div>
<p>ggbump package를 활용하면 시그모이드 곡선도 그릴 수 있습니다. 그럼 본격적으로 ggbump 패키지에 대해서 살펴보도록 하죠.</p>
<p><br></p>
</section></section><section id="all-about-ggbump" class="level2"><h2 class="anchored" data-anchor-id="all-about-ggbump">All about ggbump</h2>
<section id="geom_sigmoid" class="level3"><h3 class="anchored" data-anchor-id="geom_sigmoid">geom_sigmoid</h3>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyverse.tidyverse.org">tidyverse</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">ggbump</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">df</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">6</span>,
                 y <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span>,
                 xend <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7</span>,
                 yend <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">df</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x  y xend yend
1 1  5    7   -5
2 2  6    7   -4
3 3  7    7   -3
4 4  8    7   -2
5 5  9    7   -1
6 6 10    7    0</code></pre>
</div>
</div>
<p>시그모이드 곡선에 필요한 변수는 시작점, 끝점, 그룹 정도입니다. 시작점의 위치는 (x, y) 변수에, 끝점의 위치는 (xend, yend) 변수에 넣으면 되죠. 그리고 어떤 점끼리 이어지는지 그룹을 결정해주면 됩니다. 위의 데이터를 가지고 시그모이드 곡선을 그려보면 총 6개의 선이 그려집니다. (1, 5)와 (7, -5)를 잇는 곡선을 포함해서 말이죠.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tidyverse.tidyverse.org">tidyverse</a></span><span class="op" style="color: #5E5E5E;">)</span>
<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">ggbump</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="co" style="color: #5E5E5E;"># geom_sigmoid 함수에서 x, y, xend, yend, group 변수를 지정해주면 됩니다.</span>
<span class="co" style="color: #5E5E5E;"># geom_sigmoid 외의 함수는 점(geom_point)과 라벨(geom_text)을 위한 함수입니다.</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">df</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/ggbump/man/geom_sigmoid.html">geom_sigmoid</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">x</span>, xend <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">xend</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">y</span>, yend <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">yend</span>, group <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"black"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">x</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">y</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">xend</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">yend</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_text.html">geom_text</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">x</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">y</span>, label <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"("</span>, <span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">", "</span>, <span class="va" style="color: #111111;">y</span>, <span class="st" style="color: #20794D;">")"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, vjust <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.8</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_text.html">geom_text</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">xend</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">yend</span>, label <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"("</span>, <span class="va" style="color: #111111;">xend</span>, <span class="st" style="color: #20794D;">", "</span>, <span class="va" style="color: #111111;">yend</span>, <span class="st" style="color: #20794D;">")"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, 
            vjust <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.4</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_classic</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><br></p>
</section><section id="geom_bump" class="level3"><h3 class="anchored" data-anchor-id="geom_bump">geom_bump</h3>
<p>bump chart를 그리기 위해선 geom_bump 함수를 사용하면 됩니다. 간단하게 가상의 데이터를 만들어 보겠습니다. 대한민국을 포함해 총 5개 국가(Korea, Japan, China, Russia, India)의 임의 데이터입니다. 아래와 같이 나라명과 연도(2020, 2021, 2022), 그리고 임의의 value값이 포함돼있습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;">df</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tibble.html">tibble</a></span><span class="op" style="color: #5E5E5E;">(</span>country <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Korea"</span>, <span class="st" style="color: #20794D;">"Korea"</span>, <span class="st" style="color: #20794D;">"Korea"</span>, <span class="st" style="color: #20794D;">"Japan"</span>, <span class="st" style="color: #20794D;">"Japan"</span>, <span class="st" style="color: #20794D;">"Japan"</span>, <span class="st" style="color: #20794D;">"China"</span>, <span class="st" style="color: #20794D;">"China"</span>, <span class="st" style="color: #20794D;">"China"</span>, <span class="st" style="color: #20794D;">"Russia"</span>, <span class="st" style="color: #20794D;">"Russia"</span>, <span class="st" style="color: #20794D;">"Russia"</span>, <span class="st" style="color: #20794D;">"India"</span>, <span class="st" style="color: #20794D;">"India"</span>, <span class="st" style="color: #20794D;">"India"</span><span class="op" style="color: #5E5E5E;">)</span>,
             year <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">2020</span>, <span class="fl" style="color: #AD0000;">2021</span>, <span class="fl" style="color: #AD0000;">2022</span>, <span class="fl" style="color: #AD0000;">2020</span>, <span class="fl" style="color: #AD0000;">2021</span>, <span class="fl" style="color: #AD0000;">2022</span>, <span class="fl" style="color: #AD0000;">2020</span>, <span class="fl" style="color: #AD0000;">2021</span>, <span class="fl" style="color: #AD0000;">2022</span>, <span class="fl" style="color: #AD0000;">2020</span>, <span class="fl" style="color: #AD0000;">2021</span>, <span class="fl" style="color: #AD0000;">2022</span>, <span class="fl" style="color: #AD0000;">2020</span>, <span class="fl" style="color: #AD0000;">2021</span>, <span class="fl" style="color: #AD0000;">2022</span><span class="op" style="color: #5E5E5E;">)</span>,
             value <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">500</span>, <span class="fl" style="color: #AD0000;">200</span>, <span class="fl" style="color: #AD0000;">100</span>, <span class="fl" style="color: #AD0000;">400</span>, <span class="fl" style="color: #AD0000;">300</span>, <span class="fl" style="color: #AD0000;">400</span>, <span class="fl" style="color: #AD0000;">200</span>, <span class="fl" style="color: #AD0000;">400</span>, <span class="fl" style="color: #AD0000;">200</span>, <span class="fl" style="color: #AD0000;">500</span>, <span class="fl" style="color: #AD0000;">400</span>, <span class="fl" style="color: #AD0000;">300</span>, <span class="fl" style="color: #AD0000;">300</span>, <span class="fl" style="color: #AD0000;">300</span>, <span class="fl" style="color: #AD0000;">100</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">df</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  country  year value
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 Korea    2020   500
2 Korea    2021   200
3 Korea    2022   100
4 Japan    2020   400
5 Japan    2021   300
6 Japan    2022   400</code></pre>
</div>
</div>
<p>geom_bump 함수를 사용하려면 rank 값이 필요합니다. 각 연도별로 묶어서 value값에 따라 rank 값을 부여하면 되겠습니다. rank 함수를 사용하면 됩니다.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># ties.method는 만일 value값이 동등할경우 어떻게 계산할 것인지 결정하는 부분입니다.</span>
<span class="co" style="color: #5E5E5E;"># 보통은 min(동률 순위 중 낮은 값 출력), max(동률 순위 중 높은 값 출력)을 사용합니다.</span>
<span class="co" style="color: #5E5E5E;"># 여기선 그냥 겹치지 않게 그리기 위해 random method(순서 상관없이 랜덤)를 선택했습니다.</span>

<span class="va" style="color: #111111;">df</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">df</span> |&gt;
  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/group_by.html">group_by</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span><span class="op" style="color: #5E5E5E;">)</span> |&gt;
  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;">(</span>rank <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/rank.html">rank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">value</span>, ties.method <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"random"</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> |&gt;
  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/group_by.html">ungroup</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">df</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
  country  year value  rank
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;
1 Korea    2020   500     4
2 Korea    2021   200     1
3 Korea    2022   100     2
4 Japan    2020   400     3
5 Japan    2021   300     3
6 Japan    2022   400     5</code></pre>
</div>
</div>
<p>rank값이 잘 나왔군요. rank값은 값이 크면 클수록 더 높은 숫자가 부여됩니다. 2020년 한국의 value는 500, 일본의 value는 400인데 한국이 4위, 일본이 3위인 걸 보면 알 수 있죠. 우리가 보통 생각하는 순위와는 반대입니다. 위에서 rank를 계산할 때 -value로 계산한다면 이 부분은 해결할 수 있습니다. 여기선 그래프를 그릴 때 y축을 돌려버리는 걸로 처리하겠습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://github.com/karthik/wesanderson">wesanderson</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">df</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span>, <span class="va" style="color: #111111;">rank</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">country</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/ggbump/man/geom_bump.html">geom_bump</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_classic</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;">(</span>legend.position <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"none"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_continuous.html">scale_y_reverse</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_manual.html">scale_color_manual</a></span><span class="op" style="color: #5E5E5E;">(</span>values <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/wesanderson/man/wes_palette.html">wes_palette</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Zissou1"</span>, n <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>부드러운 시그모이드 곡선으로 이뤄진 범프 차트가 만들어졌습니다. scale_color_manual에 들어있는 wes_palette는 이름에서 유추할 수 있듯 웨스 앤더슨 감독의 색감이 담긴 컬러 팔레트입니다. 이 차트에서는 웨스 앤더슨 감독의 2004년 작 &lt;스티브 지소와의 해저 생활(The Life Aquatic With Steve Zissou)&gt;의 색상을 사용했습니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://orange-mansion.com/posts/220220_ggbump-package/zissou.gif" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><figcaption class="figure-caption">The Life Aquatic with Steve Zissou, Wes Anderson</figcaption><p></p>
</figure>
</div>
<p>여기서 조금 더 꾸며볼까요? bump line의 폭을 늘리고 점도 찍어보고, 해당 라인이 어떤 국가를 의미하는지 라벨도 달아보겠습니다. 축은 있으면 보기 싫으니 선을 다 없애버립시다. 그리고 x축은 정수 연도만 남겨야 할 것 같고요. 정리해보면 이렇게 될 겁니다.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">df</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span>, <span class="va" style="color: #111111;">rank</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">country</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/ggbump/man/geom_bump.html">geom_bump</a></span><span class="op" style="color: #5E5E5E;">(</span>size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span>, smooth <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">8</span>, alpha <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.8</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_point.html">geom_point</a></span><span class="op" style="color: #5E5E5E;">(</span>size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_text.html">geom_text</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">df</span> <span class="op" style="color: #5E5E5E;"><a href="https://magrittr.tidyverse.org/reference/pipe.html">%&gt;%</a></span> <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/filter.html">filter</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">min</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>,
            <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">year</span>, label <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">country</span><span class="op" style="color: #5E5E5E;">)</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span>, hjust <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0</span>, vjust <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/geom_text.html">geom_text</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">df</span> <span class="op" style="color: #5E5E5E;"><a href="https://magrittr.tidyverse.org/reference/pipe.html">%&gt;%</a></span> <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/filter.html">filter</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">max</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">year</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>,
            <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">year</span>, label <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">country</span><span class="op" style="color: #5E5E5E;">)</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span>, hjust <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span>, vjust <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_minimal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;">(</span>legend.position <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"none"</span>,
        panel.grid.major <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/element.html">element_blank</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_continuous.html">scale_x_continuous</a></span><span class="op" style="color: #5E5E5E;">(</span>limits <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">2019.95</span>, <span class="fl" style="color: #AD0000;">2022.05</span><span class="op" style="color: #5E5E5E;">)</span>,
                     breaks <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/seq.html">seq</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">2020</span>, <span class="fl" style="color: #AD0000;">2022</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_continuous.html">scale_y_reverse</a></span><span class="op" style="color: #5E5E5E;">(</span>limits <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">0.5</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">labs</a></span><span class="op" style="color: #5E5E5E;">(</span>y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"RANK"</span>,
       x <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">NULL</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span>
  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_manual.html">scale_color_manual</a></span><span class="op" style="color: #5E5E5E;">(</span>values <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/wesanderson/man/wes_palette.html">wes_palette</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Zissou1"</span>, n <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://orange-mansion.com/posts/220220_ggbump-package/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section></section> ]]></description>
  <category>R package</category>
  <category>ggbump</category>
  <guid>https://orange-mansion.com/posts/220220_ggbump-package/index.html</guid>
  <pubDate>Sat, 19 Feb 2022 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/220220_ggbump-package/thumbnail.png" medium="image" type="image/png" height="62" width="144"/>
</item>
<item>
  <title>data frame의 진화, tibble package</title>
  <dc:creator>chichead</dc:creator>
  <link>https://orange-mansion.com/posts/210502_tibble-package/index.html</link>
  <description><![CDATA[ <section id="tibble-package" class="level2"><h2 class="anchored" data-anchor-id="tibble-package">tibble package</h2>
<p><img src="https://orange-mansion.com/posts/210502_tibble-package/thumbnail.png" class="img-fluid" style="width:100.0%"></p>
<p>tidyverse 패키지를 사용하면 data.frame 대신 사용하게되는 tibble. 오늘 알아볼 R package는 tibble입니다. tibble 패키지의 역사부터 기존의 data.frame과는 어떻게 다른지 정리해봅니다.</p>
<p><br></p>
<section id="tibbles-name" class="level3"><h3 class="anchored" data-anchor-id="tibbles-name">tibble’s name</h3>
<p>2014년 1월, dplyr 패키지에선 data.frame을 tbl_df이라는 서브클래스로 사용했습니다. 이전의 data.frame과 다르게 출력된 결과가 콘솔창을 다 뒤덮지도 않고 칼럼명 아래에 자료형을 표현해주는 강점이 있었죠. 이 tbl_df가 지금의 tibble 패키지의 시초입니다. tbl_df를 [티블-디프]로 읽다가 뒤에 df는 떨어져나가고 tbl남 남아 결국엔 tibble이 되었죠. 참고로 패키지를 만든 <a href="https://github.com/hadley">해들리 위컴</a>은 뉴질랜드 사람인데, 뉴질랜드인들이 table을 tibble이라고 발음한다고 합니다.</p>
<p><br></p>
</section><section id="tibbles-logo" class="level3"><h3 class="anchored" data-anchor-id="tibbles-logo">tibble’s logo</h3>
<p>위대한 패키지 tidyverse의 일원인만큼 tibble 로고의 뒷 배경은 tidyverse 세계관을 공유하고 있습니다. 우주 배경을 뒤에 두고 표가 그려져있죠. 그 위엔 TIBBLE 이라는 이름표가 적혀있고요. 폰트 스타일은 스타트랙을 닮았는데, 스타트랙에는 tibble과 유사한 tribble이라는 크리쳐가 등장합니다. tribble은 tibble 패키지의 함수로도 등장하는데 이건 뒤에서 설명 드리겠습니다. tibble 이름표를 잘 보면 TI33으로도 읽을 수 있는데 공학용 계산기로 유명한 텍사스 인스트루먼트(TI)에서 만든 동명의 모델이 있죠. (물론 의도한지는 모르겠지만요)</p>
<p><br></p>
</section></section><section id="all-about-tibble" class="level2"><h2 class="anchored" data-anchor-id="all-about-tibble">All about tibble</h2>
<section id="as.tibble" class="level3"><h3 class="anchored" data-anchor-id="as.tibble">as.tibble</h3>
<p>아이리스(붓꽃) 데이터가 담겨있는 iris 데이터를 가지고 살펴보겠습니다. 총 150개의 로(row)와 5개의 칼럼(column)으로 이뤄진 데이터프레임(data.frame)입니다. 만일 코드에 그냥 iris라고 입력한다면 콘솔창에는 150개의 행을 보실 수 있을텐데요. 그걸 막기 위해 iris 데이터의 머릿부분만 불러오라는 함수 head( )를 써보았어요.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">iris</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa</code></pre>
</div>
</div>
<p>이번엔 tibble 패키지를 이용해볼까요. 여기서 사용할 함수는 as_tibble( )입니다. 무언가를 tibble로 만들어주는 고마운 함수입니다. 새로운 iris tibble 녀석을 tbl_iris에 할당했습니다. 그리고 불러와봅시다. tibble은 그냥 tbl_iris라고 입력해도 콘솔창을 다 뒤덮지않는군요. 10개의 행을 보여주고는 나머지 140개가 남아있다고 깨알같이 설명해줍니다. 게다가 5개의 칼럼이 어떤 녀석인지 밑에다가 자료형을 설명해주고 있군요. 착한 녀석이죠. 혹여나 이러한 편의를 무시하고 모든 행을 다 보고 싶은 경우에는 옵션을 통해 바꿔줄 수 있습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tibble.tidyverse.org/">tibble</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">tbl_iris</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/as_tibble.html">as_tibble</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">iris</span><span class="op" style="color: #5E5E5E;">)</span>
<span class="va" style="color: #111111;">tbl_iris</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 150 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 140 more rows</code></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 행이 n개를 넘어가면 m개만 출력하고 싶다면</span>
<span class="co" style="color: #5E5E5E;"># options(tibble.print_max = n, tibble.print_min = m)</span>

<span class="co" style="color: #5E5E5E;"># 모든 행을 다 보고 싶다면</span>
<span class="co" style="color: #5E5E5E;"># option(tibble.print_max = Inf)</span>

<span class="co" style="color: #5E5E5E;"># 콘솔창의 폭은 고려말고 모든 열을 다 보고 싶다면</span>
<span class="co" style="color: #5E5E5E;"># option(tibble.width = Inf)</span></code></pre></div>
</div>
<p><br></p>
</section><section id="tibble" class="level3"><h3 class="anchored" data-anchor-id="tibble">tibble</h3>
<p>본격적으로 tibble을 만들어봅니다. tibble( )을 이용하면 후딱 tibble을 생성할 수 있답니다. tibble( ) 함수는 data.frame( ) 함수와는 다르게 변수의 이름을 바꾸지 않아요. 예를 들어볼게요. <strong>오렌지 맨숀</strong>라는 칼럼에 숫자 1을 넣은 data.frame을 만들어볼거에요. 동일하게 tibble로도 만들어보고요.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># 오렌지 맨숀이라는 이름의 칼럼을 가진 데이터를 만들어봅니다</span>

<span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://tibble.tidyverse.org/">tibble</a></span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;">(</span>`오렌지 맨숀` <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  오렌지.맨숀
1           1</code></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tibble.html">tibble</a></span><span class="op" style="color: #5E5E5E;">(</span>`오렌지 맨숀` <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  `오렌지 맨숀`
          &lt;dbl&gt;
1             1</code></pre>
</div>
</div>
<p>칼럼 이름에 공백이 들어가게 되면 data.frame은 공백을 온점으로 바꿔줍니다. <strong>오렌지 맨숀</strong> 대신 <strong>오렌지.맨숀</strong>이 되었죠? 반면 tibble은 변수의 이름을 바꾸지 않고 그대로 내비두죠. 이러한 tibble의 유연함은 공백말고 다른 비정상적인 문자도 칼럼 이름에 넣을 수 있게 했어요.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># tibble은 비정상적 문자도 칼럼명에 넣을 수 있습니다</span>
<span class="co" style="color: #5E5E5E;"># 물론 백틱(`)으로 묶어야 합니다</span>

<span class="va" style="color: #111111;">tb</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tibble.html">tibble</a></span><span class="op" style="color: #5E5E5E;">(</span>
  `:^)` <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"smile"</span>, 
  ` ` <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"space"</span>,
  `2021` <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"number"</span>
<span class="op" style="color: #5E5E5E;">)</span>

<span class="va" style="color: #111111;">tb</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  `:^)` ` `   `2021`
  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 
1 smile space number</code></pre>
</div>
</div>
<p><br></p>
</section><section id="tribble" class="level3"><h3 class="anchored" data-anchor-id="tribble">tribble</h3>
<p><img src="https://orange-mansion.com/posts/210502_tibble-package/tribble.gif" class="img-fluid" style="width:40.0%"></p>
<p>tibble을 만들 수 있는 또다른 방법은 함수 tribble을 사용하는겁니다. 스타 트렉의 커크 함장에게 눈처럼 내리는 동물이 바로 트리블이랍니다. 트리블은 복실복실한 털과 귀여운 목소리 탓에 애완용으로 많이 키워졌는데 다만 한가지 주의해야할 부분은 바로 번식이랍니다. 한 번 번식을 시작하면 끝도 없이 증식해버려서 자칫하면 손을 쓸 수 없을지도 몰라요.</p>
<p>tibble 패키지에 있는 tribble은 <strong>tr</strong>ansposed t<strong>ibble</strong>의 줄임말입니다. 단어 그대로 전치된 티블이라는 뜻이지요. 기존의 tibble 입력 형식이 colname = data 같은 가로형이었다면 tribble에서는 세로형으로 입력할 수 있지요. 간단하게 적은 양의 데이터를 코드로 입력할 때에는 tribble을 쓰면 편리합니다.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># tribble 함수에서 칼럼명은 ~로 시작해야 합니다</span>
<span class="co" style="color: #5E5E5E;"># 데이터 구분은 ,로 하고요</span>

<span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tribble.html">tribble</a></span><span class="op" style="color: #5E5E5E;">(</span>
  <span class="op" style="color: #5E5E5E;">~</span><span class="va" style="color: #111111;">x</span>, <span class="op" style="color: #5E5E5E;">~</span><span class="va" style="color: #111111;">y</span>, <span class="op" style="color: #5E5E5E;">~</span><span class="va" style="color: #111111;">z</span>,
  <span class="st" style="color: #20794D;">"a"</span>, <span class="fl" style="color: #AD0000;">21</span>, <span class="st" style="color: #20794D;">"2000"</span>,
  <span class="st" style="color: #20794D;">"b"</span>, <span class="fl" style="color: #AD0000;">31</span>, <span class="st" style="color: #20794D;">"1990"</span>
<span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  x         y z    
  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;
1 a        21 2000 
2 b        31 1990 </code></pre>
</div>
</div>
<p><br></p>
</section><section id="tibble_row" class="level3"><h3 class="anchored" data-anchor-id="tibble_row">tibble_row</h3>
<p>tibble을 만들 수 있는 또 다른 방법. tibble_row( )가 있어요. 기본적으로 data.frame과 tibble은 벡터들의 모음입니다. 여기서 잠깐, 벡터는 동일한 유형의 데이터가 여러개 묶여있는 형식을 뜻해요. 수치형 벡터도 있을 테고, 문자형 벡터도 있을 거고요, 논리형 벡터도 존재해요. 함수 등과 같이 특별한 타입의 데이터들은 벡터가 아니여요. class를 가지고 있는 일부 요소들은 벡터이기도 하고 아닌 녀석도 있죠.</p>
<p>tibble_row 이야기를 하는데 갑자기 벡터 이야기를 해서 뜬금없다고 생각할 수 있지만 다 이유가 있답니다. 기존 함수들로는 벡터가 아닌 데이터(스칼라)를 tibble 안에 담을 수 없었어요. 하지만 tibble_row 함수와 함께라면 스칼라도 tibble 안에 넣을 수 있게 되죠. tibble_row 함수는 한 행(row)을 차지하는 데이터프레임을 구성해줍니다. 즉 한 열에 크기가 1인 녀석만 들어갈 수 있지만 그 대신 스칼라 데이터도 넣을 수 있게 된 거죠. 참고로 저장되는 스칼라는 list 형태로 포장됩니다.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="co" style="color: #5E5E5E;"># vector가 아닌 scalar 데이터를 만들어봅니다</span>
<span class="co" style="color: #5E5E5E;"># lm(linear model)과 time 데이터를 써 보겠습니다</span>

<span class="va" style="color: #111111;">model</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">y</span> <span class="op" style="color: #5E5E5E;">~</span> <span class="va" style="color: #111111;">x</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">5</span>, y <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">7</span><span class="op" style="color: #5E5E5E;">)</span>, model <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">FALSE</span><span class="op" style="color: #5E5E5E;">)</span>
<span class="va" style="color: #111111;">time</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>

<span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tibble.html">tibble</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">time</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  time               
  &lt;dttm&gt;             
1 2022-10-03 17:41:53</code></pre>
</div>
</div>
<p>model의 경우 vector가 아니여서 tibble에 담기지 않아요. 반면 time 데이터는 들어갈 수 있어요. 하지만 tibble_row 함수를 사용한다면 어떨까요. tibble_row와 함께라면 vector와 scalar 상관없이 tibble에 담을 수 있습니다.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;"><a href="https://tibble.tidyverse.org/reference/tibble.html">tibble_row</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">model</span><span class="op" style="color: #5E5E5E;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  model 
  &lt;list&gt;
1 &lt;lm&gt;  </code></pre>
</div>
</div>


</section></section> ]]></description>
  <category>R package</category>
  <category>tibble</category>
  <guid>https://orange-mansion.com/posts/210502_tibble-package/index.html</guid>
  <pubDate>Sat, 01 May 2021 15:00:00 GMT</pubDate>
  <media:content url="https://orange-mansion.com/posts/210502_tibble-package/thumbnail.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
