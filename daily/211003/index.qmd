---
title: 'unnest() : Flatten back out into regular columns'
date: '2022-10-03'
categories: ['tidyr']
description: '중첩된 데이터프레임을 풀 때'
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

## Today Function : unnest

![](logo.png){width="25%"}

오늘의 함수는 tidyr 패키지의 `unnest()` 함수입니다. <br/>

`unnest()` 함수는 중첩된 데이터프레임을 풀 때 사용합니다.

<br/>

### Usage

```{r, eval=FALSE}
unnest(
  data,
  cols,
  ...,
  keep_empty = FALSE,
  ptype = NULL,
  names_sep = NULL,
  names_repair = "check_unique",
  .drop = deprecated(),
  .id = deprecated(),
  .sep = deprecated(),
  .preserve = deprecated()
)
```

<br/>

### Argument

**data** : data.frame, tibble을 넣을 수 있습니다. <br/> 
**col** : 중첩된 상태를 해제할 칼럼을 입력합니다. tidy-select expression을 활용해 선택 가능합니다. <br/> 
**keep_empty** : 기본적으로 `unnest()` 함수는 각 요소별로 하나의 출력 행을 가져옵니다. `NULL`값이나 비어있는 경우엔 해당 행이 출력에서 삭제됩니다. 모든 행을 출력하려면 `keep_empty = TRUE`로 표시해야 합니다. <br/>
**name_sep** : 풀어지는 칼럼의 이름을 정합니다. NULL(기본값)일 경우엔 기존 이름이 그래도 유지됩니다. <br/> 
**names_repair** : 출력되는 데이터프레임에 유효한 이름이 있는지 확인하는 데 사용합니다.

<br/>

### Example

```{r}
library(tidyverse)

# tibble 함수를 통해 중첩된 tibble을 만들어보겠습니다.
df1 <- tibble(
  x = 1:3,
  y = list(
    NULL,
    tibble(a = 1, b = 2),
    tibble(a = 1:3, b = 3:1)
  )
)

df1

# unnest 함수를 통해 중첩된 tibble을 unnest 해보겠습니다.
df1 |> unnest(y)

# keep_empty = TRUE로 처리할 경우 NULL값이 들어있던 1행도 출력됩니다.
df1 |> unnest(y, keep_empty = TRUE)

```

<br/>

### names

이번에는 `unnest()` 함수를 통해 중첩을 푸는 과정에서 칼럼의 이름이 어떻게 결정되는지 확인해보겠습니다. `palmerpenguins` 패키지에 있는 펭귄 데이터를 불러와 종별로 총 4가지의 데이터(펭귄의 부리 길이, 깊이, 물갈퀴 길이, 몸무게)의 분위값을 정리해보겠습니다.

```{r}
library(palmerpenguins)

penguins |> 
  select(c(species, bill_depth_mm, bill_length_mm, flipper_length_mm, body_mass_g)) |>
  group_by(species) |>
  summarise_all(.funs = function(x) list(enframe(
    quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE))))
```

펭귄 종 별로 4가지 데이터에 대한 분위값이 각각 tibble 형태로 담겨 있습니다. 이걸 `unnest()` 함수를 통해 풀어보겠습니다.

```{r}
penguins |> 
  select(c(species, bill_depth_mm, bill_length_mm, flipper_length_mm, body_mass_g)) |>
  group_by(species) |>
  summarise_all(.funs = function(x) list(enframe(
    quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)))) |>
  unnest()
```

문제가 발생했습니다. 중첩이 풀린 데이터의 칼럼이 모두 name과 value로 표시되어 구분할 수 없게 되었습니다. 이럴때 사용하는 게 바로 `names_repair`와 `names_sep`입니다. 우선 `names_repair`는 `check_unique`가 기본값으로 되어 있습니다. 겹치는 변수가 없도록 name, name2, name3 같은 고유의 이름을 부여해주죠. 하지만 우리는 각 칼럼이 어떤 데이터인지 이름을 알고 싶습니다. 이럴 땐 `name_sep`을 사용합니다. 구분자를 무엇으로 할 지 설정해주면 해당 칼럼과 구분자를 합쳐서 칼럼명을 부여해줍니다.

```{r}
# names_sep = "_" 입력
penguins |> 
  select(c(species, bill_depth_mm, bill_length_mm, flipper_length_mm, body_mass_g)) |>
  group_by(species) |>
  summarise_all(.funs = function(x) list(enframe(
    quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)))) |>
  unnest(names_sep = "_")
```


<br/>

### lists of lists

리스트와 리스트가 중첩된 복잡한 데이터프레임을 풀려면 `unnest()` 함수를 두 번 사용하면 됩니다. 복잡하게 중첩된 데이터라면 `hoist()`, `unnest_wider()`, `unnest_longer()` 함수를 사용하면 좋습니다. 위 3개의 함수는 이른바 `rectangling` 작업에 사용되는 함수인데 이 녀석들은 나중에 따로 정리해보겠습니다.

```{r}
df2 <- tibble(
  a = list(c("a", "b"), "c"),
  b = list(1:2, 3),
  c = c(11, 22)
)

df2

# unnest를 이용해 동시에 여러 열의 중첩을 해제할 수 있습니다.
df2 |> unnest(c(a, b))

# 단계적으로 중첩을 해제하면 다음과 같은 결과를 얻습니다.
df2 |> unnest(a) |> unnest(b)
```
