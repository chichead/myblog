{
  "hash": "96a51a6584bc5edff29c345f1f2fb94f",
  "result": {
    "markdown": "---\ntitle: 'enframe() : Convert vectors to data frames'\ndate: '2022-10-12'\ncategories: ['tibble']\ndescription: '벡터를 데이터프레임으로 바꾸고 싶을 때'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Today Function : enframe()\n\n![](tibble_logo.png){width=\"25%\"}\n\n오늘의 함수는 tibble 패키지의 `enframe()` 함수입니다. `enframe()` 함수는 atomic vector나 리스트를 1개 혹은 2개의 칼럼을 가진 데이터프레임으로 만들어줍니다. 리스트를 `enframe()` 함수에 넣고 돌리면 중첩된 tibble이 나옵니다. 만일 2개의 칼럼의 데이터프레임을 vector 혹은 리스트로 변환하고 싶으면 `deframe()` 함수를 사용하면 됩니다.\n\n\n<br/>\n\n### Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenframe(x, name = \"name\", value = \"value\")\n\ndeframe(x)\n```\n:::\n\n\n<br/>\n\n### Argument\n\n**x** : `enframe()` 함수에는 벡터가, `deframe()` 함수에는 1~2열 짜리 데이터프레임이 들어갑니다 <br/> \n**name, value** : name과 value로 지정하고 싶은 텍스트를 입력합니다. 만약 name이 NULL이라면 1열의 데이터프레임이 출력됩니다.\n\n<br/>\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\n# 1부터 3까지 Unnamed Numeric vector를 enframe에 넣으면\nenframe(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n   name value\n  <int> <int>\n1     1     1\n2     2     2\n3     3     3\n```\n:::\n\n```{.r .cell-code}\n# 이번엔 Named Numeric vector를 입력해봅니다\nenframe(c(a = 1, b = 2, c = 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  value\n  <chr> <dbl>\n1 a         1\n2 b         2\n3 c         3\n```\n:::\n\n```{.r .cell-code}\n# list를 입력하면 중첩된 tibble이 나옵니다\nlist_example <- list(\n  a = 1,\n  b = \"orange\",\n  c = 2:3,\n  d = c(delta = 4)\n)\n\nenframe(list_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  name  value    \n  <chr> <list>   \n1 a     <dbl [1]>\n2 b     <chr [1]>\n3 c     <int [2]>\n4 d     <dbl [1]>\n```\n:::\n\n```{.r .cell-code}\n# deframe은 1~2개의 칼럼을 가지고 있는 데이터프레임만 사용가능합니다\ndeframe(enframe(3:1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 \n3 2 1 \n```\n:::\n\n```{.r .cell-code}\ndeframe(tibble(a = as.list(1:3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}