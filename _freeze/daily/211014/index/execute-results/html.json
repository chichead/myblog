{
  "hash": "231cd10ba8c2072552239cf18decc8bc",
  "result": {
    "markdown": "---\ntitle: 'accumulate() : Accumulate intermediate results'\ndate: '2022-10-14'\ncategories: ['purrr']\ndescription: 'reduce와 유사하지만 중간 단계를 다 유지한다'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Today Function : reduce()\n\n![](logo.png){width=\"25%\"}\n\n오늘의 함수는 purrr 패키지의 `accumulate()` 함수입니다. `Two-Table Verbs` 함수를 사용해서 3개 이상의 데이터테이블을 처리할 땐 `reduce()` 함수를 사용합니다. 그런데 그와 유사한 `accumulate()` 함수는 중간 단계를 모두 유지해줍니다.\n\n<br/>\n\n### Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccumulate(.x, .f, ..., .init, .dir = c(\"forward\", \"backward\"))\n\naccumulate2(.x, .y, .f, ..., .init)\n```\n:::\n\n\n<br/>\n\n### Argument\n\n**.x** : 리스트나 atomic vector가 들어갑니다 <br/> \n**.f** : `accumulate()` 함수에서는 `Two-Table Verbs` 함수가, `accumulate2()` 함수에는 그 이상의 함수를 사용할 수 있습니다. <br/>\n**.dir** : `accumulate`의 방향을 정합니다.\n\n<br/>\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\n\nnumber <- sample(10)\nnumber\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  6 10  8  9  3  2  7  4  1  5\n```\n:::\n\n```{.r .cell-code}\n# reduce 함수로 다 더하면?\nnumber |> reduce(`+`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\n# accumulate는 각 단계를 유지해서 누적합을 계산합니다.\nnumber |> accumulate(`+`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  6 16 24 33 36 38 45 49 50 55\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}