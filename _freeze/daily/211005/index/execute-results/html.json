{
  "hash": "6cbe08e584343f66b87081f10b7255f8",
  "result": {
    "markdown": "---\ntitle: 'say() : Print messages with various animals'\ndate: '2022-10-05'\ncategories: ['cowsay']\ndescription: '아스키아트와 함께 메시지를 출력하고 싶을 때'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Today Function : say()\n\n오늘의 함수는 cowsay 패키지의 `say()` 함수입니다. 패키지 이름에서 알 수 있듯 `say()` 함수를 사용하면 소를 비롯한 여러 동물들의 아스키아트로 텍스트를 출력할 수 있습니다. \n\n<br/>\n\n### Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsay(what = \"Hello world!\",\n    by = \"cat\",\n    type = NULL,\n    what_color = NULL,\n    by_color = NULL,\n    length = 18,\n    fortune = NULL,\n    ...\n)\n```\n:::\n\n\n<br/>\n\n### Argument\n\n**what** : 출력하고 싶은 말을 넣으세요 <br/> \n**by** : 어떤 동물이 말을 하도록 하고 싶나요? <br/>\n**type** : message(기본값), warning, print, string 등 출력 타입을 선택합니다 <br/>\n**what_color** : 출력할 말의 색깔을 정합니다 <br/>\n**by_color** : 동물의 색깔을 정합니다 <br/>\n**length** : 만일 longcat을 선택했다면 longcat의 길이를 정해주세요\n\n<br/>\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowsay)\n\n# 닭이 꼬끼오하고 울게 해보겠습니다.\nsay(\"꼬끼오\", by = \"chicken\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n ----- \n꼬끼오 \n ------ \n    \\   \n     \\\n         _\n       _/ }\n      `>' \\\n      `|   \\\n       |   /'-.     .-.\n        \\'     ';`--' .'\n         \\'.    `'-./\n          '.`-..-;`\n            `;-..'\n            _| _|\n            /` /` [nosig]\n  \n```\n:::\n\n```{.r .cell-code}\n# cowsay 패키지에서 제공해주는 아스키아트는 총 44마리입니다.\nsort(names(animals))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ant\"          \"anxiouscat\"   \"bat\"          \"bat2\"         \"behindcat\"   \n [6] \"bigcat\"       \"buffalo\"      \"cat\"          \"chicken\"      \"chuck\"       \n[11] \"clippy\"       \"cow\"          \"daemon\"       \"duck\"         \"duckling\"    \n[16] \"egret\"        \"endlesshorse\" \"facecat\"      \"fish\"         \"frog\"        \n[21] \"ghost\"        \"grumpycat\"    \"hypnotoad\"    \"longcat\"      \"longtailcat\" \n[26] \"monkey\"       \"mushroom\"     \"owl\"          \"pig\"          \"poop\"        \n[31] \"pumpkin\"      \"rabbit\"       \"shark\"        \"shortcat\"     \"signbunny\"   \n[36] \"smallcat\"     \"snowman\"      \"spider\"       \"squirrel\"     \"squirrel2\"   \n[41] \"stretchycat\"  \"trilobite\"    \"turkey\"       \"yoda\"        \n```\n:::\n\n```{.r .cell-code}\n# 아스키아트에는 cat()함수를 이용해 접근할 수 있습니다.\n# 호박 아스키아트에 접근해보죠.\npumpkin <- animals[[\"pumpkin\"]]\ncat(pumpkin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n ----- \n%s \n ------ \n    \\   \n     \\\n                  ___\n               ___)__|_\n          .-*'          '*-,\n         /      /|   |\\     \\\n        ;      /_|   |_\\     ;\n        ;   |\\           /|  ;\n        ;   | ''--...--'' |  ;\n         \\  ''---.....--''  /\n          ''*-.,_______,.-*'  [nosig]\n  \n```\n:::\n\n```{.r .cell-code}\n# longcat에게 말을 시킨다면 longcat의 길이도 정해주세요\nsay(what = \"음메\",\n    by = \"longcat\",\n    length = \"20\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n ----- \n음메 \n ------ \n    \\   \n     \\\n    .ﾊ,,ﾊ\n    ( ﾟωﾟ)\n    |つ  つ\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    |    |\n    U \"  U\n        [BoingBoing]\n    \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}