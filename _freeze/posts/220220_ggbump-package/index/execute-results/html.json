{
  "hash": "97604ebe53e715d19d527fe4dd26ffd1",
  "result": {
    "markdown": "---\ntitle: 'bump chart를 그리고 싶을 때, ggbump package'\ndate: '2022-02-20'\ncategories: ['R package', 'ggbump']\ndescription: 'R아두면 쓸데있는 패키지 이야기 02 ggbump package'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## ggbump package\n\n![](thumbnail.png){width=\"100%\"}\n\n### ggbump's name\n\nggplot2는 grammar of graphics(a.k.a. gg)을 토대로 시각화를 만드는 패키지입니다. 2는 ver.2의 의미를 담았죠. gg는 릴랜드 윌킨스의 동명의 책 The Grammar of Graphics에서 따온 건데, 이 책에서 릴랜드는 데이터를 어떻게 시각적으로 표현할 것인지에 대해 다룹니다. gg에 대한 이야기는 나중에 다른 포스트에서 다루도록 하겠습니다.\n\nggplot2 패키지의 문법 기반 위에서 돌아가는 서브 패키지들은 보통 gg라는 접두사로 시작됩니다. ggbump 역시 ggplot2의 일원이라고 이해할 수 있어요. 그렇다면 bump는 무엇을 의미하는 걸까요? 자동차의 범퍼, 혹은 놀이동산의 범퍼카를 떠올리면 bump의 의미를 유추할 수 있어요. bump는 바로, 충돌을 의미합니다. 충돌과 차트, 어떤 연관이 있는 걸까요?\n\n<br/c>\n\n### bump chart\n\n![2022 May Bumps, Corpus Christi College](may_bump.jpeg){width=\"100%\"}\n\n영국의 케임브리지 대학에는 The bump라고 불리는 조정 경기가 있습니다. 케임브리지를 가로지르는 캠 강(river Cam) 은 나란히 경주하기에는 너무 좁아서 한 줄로 경주하는 독특한 조정 경주를 진행해왔어요. 19세기 초부터 시작된 이 경기 이름이 바로 The bump입니다. The bump의 경주 방식은 이렇습니다. 우선 강을 따라 한 줄로 경기를 시작합니다. 각 선수들은 전속력으로 노를 저어 앞에 있는 보트를 따라잡고 충돌(bump)하죠. 그렇게 되면 앞에 있는 조정 팀을 추월한 것으로 인정, 순위가 올라가게 됩니다. 주최 측에서는 경기의 진행 상황을 매핑하는 차트를 그려서 제공했는데, 이 차트를 bump chart라고 불렀습니다. 아래 차트는 2020년 사순절에 치러진 대회(Lent Bump)의 남자부 경기 결과입니다. 어떤 차트인지 감이 오죠?\n\n![](bumpchart_thebump.png){width=\"50%\"}\n\n<br/>\n\n### ggbump's logo\n\n![](ggbump%20logo.png){width=\"25%\"}\n\n로고에는 3개의 노드(점), 노드에 연결된 시그모이드 곡선이 보입니다. 시그모이드(Sigmoid) 곡선은 S자 모양의 부드러운 곡선을 의미합니다. Sigmoid라는 단어의 뜻이 S자 모양이거든요. 시그모이드 곡선은 로지스틱 방정식, 정규분포의 누적분포함수에서 확인할 수 있습니다. 아래 차트를 보면 정규분포의 누적분포함수의 부드러운 S자 곡선을 확인할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# ggplot2에서 주요 확률분포 곡선을 그릴 때는 stat_function을 활용하면 됩니다\n# 정규분포(norm)의 누적분포함수를 그릴 땐 fun = pnorm 조건을 쓰세요\n# 마찬가지로 지수분포(exp)에서 누적분포함수를 그릴 땐 fun = pexp 조건을 쓰면 됩니다.\n\nggplot(data.frame(X = c(-3, 3)), aes(x = X)) +\n  stat_function(fun = pnorm, colour = \"black\", size = 1) +\n  ggtitle(\"Cumulative Normal Distribution of X ~ N(0,1)\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 참고로 접두사 p는 누적분포함수(CDF)를 의미하고, \n# 접두사 q는 누적분포함수(CDF)의 역함수인 분위수함수를, \n# 접두사 r은 무작위 난수 샘플을 의미합니다\n```\n:::\n\n\nggbump package를 활용하면 시그모이드 곡선도 그릴 수 있습니다. 그럼 본격적으로 ggbump 패키지에 대해서 살펴보도록 하죠.\n\n<br/>\n\n## All about ggbump\n\n### geom_sigmoid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggbump)\n\ndf <- data.frame(x = 1:6,\n                 y = 5:10,\n                 xend = 7,\n                 yend = -5:0)\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x  y xend yend\n1 1  5    7   -5\n2 2  6    7   -4\n3 3  7    7   -3\n4 4  8    7   -2\n5 5  9    7   -1\n6 6 10    7    0\n```\n:::\n:::\n\n\n시그모이드 곡선에 필요한 변수는 시작점, 끝점, 그룹 정도입니다. 시작점의 위치는 (x, y) 변수에, 끝점의 위치는 (xend, yend) 변수에 넣으면 되죠. 그리고 어떤 점끼리 이어지는지 그룹을 결정해주면 됩니다. 위의 데이터를 가지고 시그모이드 곡선을 그려보면 총 6개의 선이 그려집니다. (1, 5)와 (7, -5)를 잇는 곡선을 포함해서 말이죠.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggbump)\n\n# geom_sigmoid 함수에서 x, y, xend, yend, group 변수를 지정해주면 됩니다.\n# geom_sigmoid 외의 함수는 점(geom_point)과 라벨(geom_text)을 위한 함수입니다.\n\nggplot(df) +\n  geom_sigmoid(aes(x = x, xend = xend, y = y, yend = yend, group = factor(x)), color = \"black\") +\n  geom_point(aes(x = x, y = y)) +\n  geom_point(aes(x = xend, y = yend)) +\n  geom_text(aes(x = x, y = y, label = paste0(\"(\", x, \", \", y, \")\")), vjust = 1.8, size = 3) +\n  geom_text(aes(x = xend, y = yend, label = paste0(\"(\", xend, \", \", yend, \")\")), \n            vjust = 1.4, size = 3) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n<br/>\n\n### geom_bump\n\nbump chart를 그리기 위해선 geom_bump 함수를 사용하면 됩니다. 간단하게 가상의 데이터를 만들어 보겠습니다. 대한민국을 포함해 총 5개 국가(Korea, Japan, China, Russia, India)의 임의 데이터입니다. 아래와 같이 나라명과 연도(2020, 2021, 2022), 그리고 임의의 value값이 포함돼있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(country = c(\"Korea\", \"Korea\", \"Korea\", \"Japan\", \"Japan\", \"Japan\", \"China\", \"China\", \"China\", \"Russia\", \"Russia\", \"Russia\", \"India\", \"India\", \"India\"),\n             year = c(2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022),\n             value = c(500, 200, 100, 400, 300, 400, 200, 400, 200, 500, 400, 300, 300, 300, 100))\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  country  year value\n  <chr>   <dbl> <dbl>\n1 Korea    2020   500\n2 Korea    2021   200\n3 Korea    2022   100\n4 Japan    2020   400\n5 Japan    2021   300\n6 Japan    2022   400\n```\n:::\n:::\n\n\ngeom_bump 함수를 사용하려면 rank 값이 필요합니다. 각 연도별로 묶어서 value값에 따라 rank 값을 부여하면 되겠습니다. rank 함수를 사용하면 됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ties.method는 만일 value값이 동등할경우 어떻게 계산할 것인지 결정하는 부분입니다.\n# 보통은 min(동률 순위 중 낮은 값 출력), max(동률 순위 중 높은 값 출력)을 사용합니다.\n# 여기선 그냥 겹치지 않게 그리기 위해 random method(순서 상관없이 랜덤)를 선택했습니다.\n\ndf <- df |>\n  group_by(year) |>\n  mutate(rank = rank(value, ties.method = \"random\")) |>\n  ungroup()\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country  year value  rank\n  <chr>   <dbl> <dbl> <int>\n1 Korea    2020   500     4\n2 Korea    2021   200     1\n3 Korea    2022   100     2\n4 Japan    2020   400     3\n5 Japan    2021   300     3\n6 Japan    2022   400     5\n```\n:::\n:::\n\n\nrank값이 잘 나왔군요. rank값은 값이 크면 클수록 더 높은 숫자가 부여됩니다. 2020년 한국의 value는 500, 일본의 value는 400인데 한국이 4위, 일본이 3위인 걸 보면 알 수 있죠. 우리가 보통 생각하는 순위와는 반대입니다. 위에서 rank를 계산할 때 -value로 계산한다면 이 부분은 해결할 수 있습니다. 여기선 그래프를 그릴 때 y축을 돌려버리는 걸로 처리하겠습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wesanderson)\n\nggplot(df, aes(year, rank, color = country)) +\n  geom_bump() +\n  theme_classic() +\n  theme(legend.position = \"none\") +\n  scale_y_reverse() +\n  scale_color_manual(values = wes_palette(\"Zissou1\", n = 5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n부드러운 시그모이드 곡선으로 이뤄진 범프 차트가 만들어졌습니다. scale_color_manual에 들어있는 wes_palette는 이름에서 유추할 수 있듯 웨스 앤더슨 감독의 색감이 담긴 컬러 팔레트입니다. 이 차트에서는 웨스 앤더슨 감독의 2004년 작 \\<스티브 지소와의 해저 생활(The Life Aquatic With Steve Zissou)\\>의 색상을 사용했습니다.\n\n![The Life Aquatic with Steve Zissou, Wes Anderson](zissou.gif){width=\"100%\"}\n\n여기서 조금 더 꾸며볼까요? bump line의 폭을 늘리고 점도 찍어보고, 해당 라인이 어떤 국가를 의미하는지 라벨도 달아보겠습니다. 축은 있으면 보기 싫으니 선을 다 없애버립시다. 그리고 x축은 정수 연도만 남겨야 할 것 같고요. 정리해보면 이렇게 될 겁니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(year, rank, color = country)) +\n  geom_bump(size = 5, smooth = 8, alpha = 0.8) +\n  geom_point(size = 5) +\n  geom_text(data = df %>% filter(year == min(year)),\n            aes(x = year, label = country), size = 5, hjust = 0, vjust = -1) +\n  geom_text(data = df %>% filter(year == max(year)),\n            aes(x = year, label = country), size = 5, hjust = 1, vjust = -1) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank()) +\n  scale_x_continuous(limits = c(2019.95, 2022.05),\n                     breaks = seq(2020, 2022, 1)) +\n  scale_y_reverse(limits = c(5, 0.5)) +\n  labs(y = \"RANK\",\n       x = NULL) +\n  scale_color_manual(values = wes_palette(\"Zissou1\", n = 5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}