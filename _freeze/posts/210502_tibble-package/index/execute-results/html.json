{
  "hash": "2570b1fba93856cb646521893c0c7c41",
  "result": {
    "markdown": "---\ntitle: 'data frame의 진화, tibble package'\ndate: '2021-05-02'\ncategories: ['R package', 'tibble']\ndescription: 'R아두면 쓸데있는 패키지 이야기 01 tibble package'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## tibble package\n\n![](thumbnail.png){width=\"100%\"}\n\ntidyverse 패키지를 사용하면 data.frame 대신 사용하게되는 tibble. 오늘 알아볼 R package는 tibble입니다. tibble 패키지의 역사부터 기존의 data.frame과는 어떻게 다른지 정리해봅니다.\n\n<br/>\n\n### tibble's name\n\n2014년 1월, dplyr 패키지에선 data.frame을 tbl_df이라는 서브클래스로 사용했습니다. 이전의 data.frame과 다르게 출력된 결과가 콘솔창을 다 뒤덮지도 않고 칼럼명 아래에 자료형을 표현해주는 강점이 있었죠. 이 tbl_df가 지금의 tibble 패키지의 시초입니다. tbl_df를 \\[티블-디프\\]로 읽다가 뒤에 df는 떨어져나가고 tbl남 남아 결국엔 tibble이 되었죠. 참고로 패키지를 만든 [해들리 위컴](https://github.com/hadley)은 뉴질랜드 사람인데, 뉴질랜드인들이 table을 tibble이라고 발음한다고 합니다.\n\n<br/>\n\n### tibble's logo\n\n위대한 패키지 tidyverse의 일원인만큼 tibble 로고의 뒷 배경은 tidyverse 세계관을 공유하고 있습니다. 우주 배경을 뒤에 두고 표가 그려져있죠. 그 위엔 TIBBLE 이라는 이름표가 적혀있고요. 폰트 스타일은 스타트랙을 닮았는데, 스타트랙에는 tibble과 유사한 tribble이라는 크리쳐가 등장합니다. tribble은 tibble 패키지의 함수로도 등장하는데 이건 뒤에서 설명 드리겠습니다. tibble 이름표를 잘 보면 TI33으로도 읽을 수 있는데 공학용 계산기로 유명한 텍사스 인스트루먼트(TI)에서 만든 동명의 모델이 있죠. (물론 의도한지는 모르겠지만요)\n\n<br/>\n\n## All about tibble\n\n### as.tibble\n\n아이리스(붓꽃) 데이터가 담겨있는 iris 데이터를 가지고 살펴보겠습니다. 총 150개의 로(row)와 5개의 칼럼(column)으로 이뤄진 데이터프레임(data.frame)입니다. 만일 코드에 그냥 iris라고 입력한다면 콘솔창에는 150개의 행을 보실 수 있을텐데요. 그걸 막기 위해 iris 데이터의 머릿부분만 불러오라는 함수 head( )를 써보았어요.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\n이번엔 tibble 패키지를 이용해볼까요. 여기서 사용할 함수는 as_tibble( )입니다. 무언가를 tibble로 만들어주는 고마운 함수입니다. 새로운 iris tibble 녀석을 tbl_iris에 할당했습니다. 그리고 불러와봅시다. tibble은 그냥 tbl_iris라고 입력해도 콘솔창을 다 뒤덮지않는군요. 10개의 행을 보여주고는 나머지 140개가 남아있다고 깨알같이 설명해줍니다. 게다가 5개의 칼럼이 어떤 녀석인지 밑에다가 자료형을 설명해주고 있군요. 착한 녀석이죠. 혹여나 이러한 편의를 무시하고 모든 행을 다 보고 싶은 경우에는 옵션을 통해 바꿔줄 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\ntbl_iris <- as_tibble(iris)\ntbl_iris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# … with 140 more rows\n```\n:::\n\n```{.r .cell-code}\n# 행이 n개를 넘어가면 m개만 출력하고 싶다면\n# options(tibble.print_max = n, tibble.print_min = m)\n\n# 모든 행을 다 보고 싶다면\n# option(tibble.print_max = Inf)\n\n# 콘솔창의 폭은 고려말고 모든 열을 다 보고 싶다면\n# option(tibble.width = Inf)\n```\n:::\n\n\n<br/>\n\n### tibble\n\n본격적으로 tibble을 만들어봅니다. tibble( )을 이용하면 후딱 tibble을 생성할 수 있답니다. tibble( ) 함수는 data.frame( ) 함수와는 다르게 변수의 이름을 바꾸지 않아요. 예를 들어볼게요. **오렌지 맨숀**라는 칼럼에 숫자 1을 넣은 data.frame을 만들어볼거에요. 동일하게 tibble로도 만들어보고요.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 오렌지 맨숀이라는 이름의 칼럼을 가진 데이터를 만들어봅니다\n\nlibrary(tibble)\n\ndata.frame(`오렌지 맨숀` = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  오렌지.맨숀\n1           1\n```\n:::\n\n```{.r .cell-code}\ntibble(`오렌지 맨숀` = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `오렌지 맨숀`\n          <dbl>\n1             1\n```\n:::\n:::\n\n\n칼럼 이름에 공백이 들어가게 되면 data.frame은 공백을 온점으로 바꿔줍니다. **오렌지 맨숀** 대신 **오렌지.맨숀**이 되었죠? 반면 tibble은 변수의 이름을 바꾸지 않고 그대로 내비두죠. 이러한 tibble의 유연함은 공백말고 다른 비정상적인 문자도 칼럼 이름에 넣을 수 있게 했어요.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tibble은 비정상적 문자도 칼럼명에 넣을 수 있습니다\n# 물론 백틱(`)으로 묶어야 합니다\n\ntb <- tibble(\n  `:^)` = \"smile\", \n  ` ` = \"space\",\n  `2021` = \"number\"\n)\n\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  `:^)` ` `   `2021`\n  <chr> <chr> <chr> \n1 smile space number\n```\n:::\n:::\n\n\n<br/>\n\n### tribble\n\n![](tribble.gif){width=\"40%\"}\n\ntibble을 만들 수 있는 또다른 방법은 함수 tribble을 사용하는겁니다. 스타 트렉의 커크 함장에게 눈처럼 내리는 동물이 바로 트리블이랍니다. 트리블은 복실복실한 털과 귀여운 목소리 탓에 애완용으로 많이 키워졌는데 다만 한가지 주의해야할 부분은 바로 번식이랍니다. 한 번 번식을 시작하면 끝도 없이 증식해버려서 자칫하면 손을 쓸 수 없을지도 몰라요.\n\ntibble 패키지에 있는 tribble은 **tr**ansposed t**ibble**의 줄임말입니다. 단어 그대로 전치된 티블이라는 뜻이지요. 기존의 tibble 입력 형식이 colname = data 같은 가로형이었다면 tribble에서는 세로형으로 입력할 수 있지요. 간단하게 적은 양의 데이터를 코드로 입력할 때에는 tribble을 쓰면 편리합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tribble 함수에서 칼럼명은 ~로 시작해야 합니다\n# 데이터 구분은 ,로 하고요\n\ntribble(\n  ~x, ~y, ~z,\n  \"a\", 21, \"2000\",\n  \"b\", 31, \"1990\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  x         y z    \n  <chr> <dbl> <chr>\n1 a        21 2000 \n2 b        31 1990 \n```\n:::\n:::\n\n\n<br/>\n\n### tibble_row\n\ntibble을 만들 수 있는 또 다른 방법. tibble_row( )가 있어요. 기본적으로 data.frame과 tibble은 벡터들의 모음입니다. 여기서 잠깐, 벡터는 동일한 유형의 데이터가 여러개 묶여있는 형식을 뜻해요. 수치형 벡터도 있을 테고, 문자형 벡터도 있을 거고요, 논리형 벡터도 존재해요. 함수 등과 같이 특별한 타입의 데이터들은 벡터가 아니여요. class를 가지고 있는 일부 요소들은 벡터이기도 하고 아닌 녀석도 있죠.\n\ntibble_row 이야기를 하는데 갑자기 벡터 이야기를 해서 뜬금없다고 생각할 수 있지만 다 이유가 있답니다. 기존 함수들로는 벡터가 아닌 데이터(스칼라)를 tibble 안에 담을 수 없었어요. 하지만 tibble_row 함수와 함께라면 스칼라도 tibble 안에 넣을 수 있게 되죠. tibble_row 함수는 한 행(row)을 차지하는 데이터프레임을 구성해줍니다. 즉 한 열에 크기가 1인 녀석만 들어갈 수 있지만 그 대신 스칼라 데이터도 넣을 수 있게 된 거죠. 참고로 저장되는 스칼라는 list 형태로 포장됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vector가 아닌 scalar 데이터를 만들어봅니다\n# lm(linear model)과 time 데이터를 써 보겠습니다\n\nmodel <- lm(y ~ x, data.frame(x = 1:5, y = 3:7), model = FALSE)\ntime <- Sys.time()\n\ntibble(time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  time               \n  <dttm>             \n1 2023-04-09 21:41:43\n```\n:::\n:::\n\n\nmodel의 경우 vector가 아니여서 tibble에 담기지 않아요. 반면 time 데이터는 들어갈 수 있어요. 하지만 tibble_row 함수를 사용한다면 어떨까요. tibble_row와 함께라면 vector와 scalar 상관없이 tibble에 담을 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_row(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  model \n  <list>\n1 <lm>  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}